{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Linux Fundamentals","text":"<p>Feel free to contact the author:</p> <ul> <li>Paul Cobbaut: paul.cobbaut@gmail.com, http://www.linkedin.com/in/cobbaut</li> </ul> <p>Contributors to the Linux Training project are:</p> <ul> <li>Serge van Ginderachter: serge@ginsys.eu, build scripts and infrastructure setup</li> <li>Bert Van Vreckem: https://github.com/bertvv, translation to Markdown, new build scripts, and infrastructure setup</li> </ul> <p>We'd also like to thank our reviewers:</p> <ul> <li>Wouter Verhelst: wo@uter.be, http://grep.be</li> <li>Geert Goossens: mail.goossens.geert@gmail.com, &lt;http://www.linkedin.com/in/ geertgoossens&gt;</li> <li>Elie De Brauwer: elie@de-brauwer.be, http://www.de-brauwer.be</li> <li>Christophe Vandeplas: christophe@vandeplas.com, http://christophe.vandeplas.com</li> <li>Bert Desmet: bert@devnox.be, http://blog.bdesmet.be</li> <li>Rich Yonts: richyonts@gmail.com,</li> </ul> <p>Copyright 2007-2024 Netsec BVBA, Paul Cobbaut</p> <p>This copy was generated on \\today.</p> <p>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled 'GNU Free Documentation License'.</p>"},{"location":"#abstract","title":"Abstract","text":"<p>This book is meant to be used in an instructor-led training. For self-study, the intent is to read this book next to a working Linux computer so you can immediately do every subject, practicing each command.</p> <p>This book is aimed at novice Linux system administrators (and might be interesting and useful for home users that want to know a bit more about their Linux system). However, this book is not meant as an introduction to Linux desktop applications like text editors, browsers, mail clients, multimedia or office applications.</p> <p>More information and free .pdf available at https://hogenttin.github.io/linux-training-hogent/.</p>"},{"location":"acls/","title":"access control lists","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>Standard Unix permissions might not be enough for some organisations. This chapter introduces <code>access control lists</code> or <code>acl's</code> to further protect files and directories.</p>"},{"location":"acls/#acl-in-etcfstab","title":"acl in /etc/fstab","text":"<p>File systems that support <code>access control lists</code>, or <code>acls</code>, have to be mounted with the <code>acl</code> option listed in <code>/etc/fstab</code>. In the example below, you can see that the root file system has <code>acl</code> support, whereas /home/data does not.</p> <pre><code>root@laika:~# tail -4 /etc/fstab\n/dev/sda1        /              ext3     acl,relatime    0  1\n/dev/sdb2        /home/data     auto     noacl,defaults  0  0\npasha:/home/r    /home/pasha    nfs      defaults        0  0\nwolf:/srv/data   /home/wolf     nfs      defaults        0  0\n</code></pre>"},{"location":"acls/#getfacl","title":"getfacl","text":"<p>Reading <code>acls</code> can be done with <code>/usr/bin/getfacl</code>. This screenshot shows how to read the <code>acl</code> of <code>file33</code> with <code>getfacl</code>.</p> <pre><code>paul@laika:~/test$ getfacl file33\n# file: file33\n# owner: paul\n# group: paul\nuser::rw-\ngroup::r--\nmask::rwx\nother::r--\n</code></pre>"},{"location":"acls/#setfacl","title":"setfacl","text":"<p>Writing or changing <code>acls</code> can be done with <code>/usr/bin/setfacl</code>. These screenshots show how to change the <code>acl</code> of <code>file33</code> with <code>setfacl</code>.</p> <p>First we add <code>u</code>ser <code>sandra</code> with octal permission <code>7</code> to the <code>acl</code>.</p> <pre><code>paul@laika:~/test$ setfacl -m u:sandra:7 file33\n</code></pre> <p>Then we add the <code>g</code>roup tennis with octal permission <code>6</code> to the <code>acl</code> of the same file.</p> <pre><code>paul@laika:~/test$ setfacl -m g:tennis:6 file33\n</code></pre> <p>The result is visible with <code>getfacl</code>.</p> <pre><code>paul@laika:~/test$ getfacl file33 \n# file: file33\n# owner: paul\n# group: paul\nuser::rw-\nuser:sandra:rwx\ngroup::r--\ngroup:tennis:rw-\nmask::rwx\nother::r--\n</code></pre>"},{"location":"acls/#remove-an-acl-entry","title":"remove an acl entry","text":"<p>The <code>-x</code> option of the <code>setfacl</code> command will remove an <code>acl</code> entry from the targeted file.</p> <pre><code>paul@laika:~/test$ setfacl -m u:sandra:7 file33 \npaul@laika:~/test$ getfacl file33 | grep sandra\nuser:sandra:rwx\npaul@laika:~/test$ setfacl -x sandra file33\npaul@laika:~/test$ getfacl file33 | grep sandra\n</code></pre> <p>Note that omitting the <code>u</code> or <code>g</code> when defining the <code>acl</code> for an account will default it to a user account.</p>"},{"location":"acls/#remove-the-complete-acl","title":"remove the complete acl","text":"<p>The <code>-b</code> option of the <code>setfacl</code> command will remove the <code>acl</code> from the targeted file.</p> <pre><code>paul@laika:~/test$ setfacl -b file33 \npaul@laika:~/test$ getfacl file33 \n# file: file33\n# owner: paul\n# group: paul\nuser::rw-\ngroup::r--\nother::r--\n</code></pre>"},{"location":"acls/#the-acl-mask","title":"the acl mask","text":"<p>The <code>acl mask</code> defines the maximum effective permissions for any entry in the <code>acl</code>. This <code>mask</code> is calculated every time you execute the <code>setfacl</code> or <code>chmod</code> commands.</p> <p>You can prevent the calculation by using the <code>--no-mask</code> switch.</p> <pre><code>paul@laika:~/test$ setfacl --no-mask -m u:sandra:7 file33\npaul@laika:~/test$ getfacl file33\n# file: file33\n# owner: paul\n# group: paul\nuser::rw-\nuser:sandra:rwx         #effective:rw-\ngroup::r--\nmask::rw-\nother::r--\n</code></pre>"},{"location":"acls/#eiciel","title":"eiciel","text":"<p>Desktop users might want to use <code>eiciel</code> to manage <code>acls</code> with a graphical tool.</p> <p></p> <p>You will need to install <code>eiciel</code> and <code>nautilus-actions</code> to have an extra tab in <code>nautilus</code> to manage <code>acls</code>.</p> <pre><code>paul@laika:~$ sudo aptitude install eiciel nautilus-actions\n</code></pre>"},{"location":"advanced_permissions/","title":"advanced file permissions","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p>"},{"location":"advanced_permissions/#sticky-bit-on-directory","title":"sticky bit on directory","text":"<p>You can set the <code>sticky bit</code> on a directory to prevent users from removing files that they do not own as a user owner. The sticky bit is displayed at the same location as the x permission for others. The sticky bit is represented by a <code>t</code> (meaning x is also there) or a <code>T</code> (when there is no x for others).</p> <pre><code>root@RHELv8u4:~# mkdir /project55\nroot@RHELv8u4:~# ls -ld /project55\ndrwxr-xr-x  2 root root 4096 Feb  7 17:38 /project55\nroot@RHELv8u4:~# chmod +t /project55/\nroot@RHELv8u4:~# ls -ld /project55\ndrwxr-xr-t  2 root root 4096 Feb  7 17:38 /project55\nroot@RHELv8u4:~#\n</code></pre> <p>The <code>sticky bit</code> can also be set with octal permissions, it is binary 1 in the first of four triplets.</p> <pre><code>root@RHELv8u4:~# chmod 1775 /project55/\nroot@RHELv8u4:~# ls -ld /project55\ndrwxrwxr-t  2 root root 4096 Feb  7 17:38 /project55\nroot@RHELv8u4:~#\n</code></pre> <p>You will typically find the <code>sticky bit</code> on the <code>/tmp</code> directory.</p> <pre><code>root@barry:~# ls -ld /tmp\ndrwxrwxrwt 6 root root 4096 2009-06-04 19:02 /tmp\n</code></pre>"},{"location":"advanced_permissions/#setgid-bit-on-directory","title":"setgid bit on directory","text":"<p><code>setgid</code> can be used on directories to make sure that all files inside the directory are owned by the group owner of the directory. The <code>setgid</code> bit is displayed at the same location as the x permission for group owner. The <code>setgid</code> bit is represented by an <code>s</code> (meaning x is also there) or a <code>S</code> (when there is no x for the group owner). As this example shows, even though <code>root</code> does not belong to the group proj55, the files created by root in /project55 will belong to proj55 since the <code>setgid</code> is set.</p> <pre><code>root@RHELv8u4:~# groupadd proj55\nroot@RHELv8u4:~# chown root:proj55 /project55/\nroot@RHELv8u4:~# chmod 2775 /project55/\nroot@RHELv8u4:~# touch /project55/fromroot.txt\nroot@RHELv8u4:~# ls -ld /project55/\ndrwxrwsr-x  2 root proj55 4096 Feb  7 17:45 /project55/\nroot@RHELv8u4:~# ls -l /project55/\ntotal 4\n-rw-r--r--  1 root proj55 0 Feb  7 17:45 fromroot.txt\nroot@RHELv8u4:~#\n</code></pre> <p>You can use the <code>find</code> command to find all <code>setgid</code> directories.</p> <pre><code>paul@laika:~$ find / -type d -perm -2000 2&gt; /dev/null\n/var/log/mysql\n/var/log/news\n/var/local\n...\n</code></pre>"},{"location":"advanced_permissions/#setgid-and-setuid-on-regular-files","title":"setgid and setuid on regular files","text":"<p>These two permissions cause an executable file to be executed with the permissions of the <code>file owner</code> instead of the <code>executing owner</code>. This means that if any user executes a program that belongs to the <code>root user</code>, and the <code>setuid</code> bit is set on that program, then the program runs as <code>root</code>. This can be dangerous, but sometimes this is good for security.</p> <p>Take the example of passwords; they are stored in <code>/etc/shadow</code> which is only readable by <code>root</code>. (The <code>root</code> user never needs permissions anyway.)</p> <pre><code>root@RHELv8u4:~# ls -l /etc/shadow\n-r--------  1 root root 1260 Jan 21 07:49 /etc/shadow\n</code></pre> <p>Changing your password requires an update of this file, so how can normal non-root users do this? Let\\'s take a look at the permissions on the <code>/usr/bin/passwd</code>.</p> <pre><code>root@RHELv8u4:~# ls -l /usr/bin/passwd \n-r-s--x--x  1 root root 21200 Jun 17  2005 /usr/bin/passwd\n</code></pre> <p>When running the <code>passwd</code> program, you are executing it with <code>root</code> credentials.</p> <p>You can use the <code>find</code> command to find all <code>setuid</code> programs.</p> <pre><code>paul@laika:~$ find /usr/bin -type f -perm -04000\n/usr/bin/arping\n/usr/bin/kgrantpty\n/usr/bin/newgrp\n/usr/bin/chfn\n/usr/bin/sudo\n/usr/bin/fping6\n/usr/bin/passwd\n/usr/bin/gpasswd\n...\n</code></pre> <p>In most cases, setting the <code>setuid</code> bit on executables is sufficient. Setting the <code>setgid</code> bit will result in these programs to run with the credentials of their group owner.</p>"},{"location":"advanced_permissions/#setuid-on-sudo","title":"setuid on sudo","text":"<p>The <code>sudo</code> binary has the <code>setuid</code> bit set, so any user can run it with the effective userid of root.</p> <pre><code>paul@rhel65:~$ ls -l $(which sudo)\n---s--x--x. 1 root root 123832 Oct  7  2013 /usr/bin/sudo\npaul@rhel65:~$\n</code></pre>"},{"location":"advanced_permissions/#practice-sticky-setuid-and-setgid-bits","title":"practice: sticky, setuid and setgid bits","text":"<p>1a. Set up a directory, owned by the group sports.</p> <p>1b. Members of the sports group should be able to create files in this directory.</p> <p>1c. All files created in this directory should be group-owned by the sports group.</p> <p>1d. Users should be able to delete only their own user-owned files.</p> <p>1e. Test that this works!</p> <p>2. Verify the permissions on <code>/usr/bin/passwd</code>. Remove the <code>setuid</code>, then try changing your password as a normal user. Reset the permissions back and try again.</p> <p>3. If time permits (or if you are waiting for other students to finish this practice), read about file attributes in the man page of chattr and lsattr. Try setting the i attribute on a file and test that it works.</p>"},{"location":"advanced_permissions/#solution-sticky-setuid-and-setgid-bits","title":"solution: sticky, setuid and setgid bits","text":"<p>1a. Set up a directory, owned by the group sports.</p> <pre><code>groupadd sports\n\nmkdir /home/sports\n\nchown root:sports /home/sports\n</code></pre> <p>1b. Members of the sports group should be able to create files in this directory.</p> <pre><code>chmod 770 /home/sports\n</code></pre> <p>1c. All files created in this directory should be group-owned by the sports group.</p> <pre><code>chmod 2770 /home/sports\n</code></pre> <p>1d. Users should be able to delete only their own user-owned files.</p> <pre><code>chmod +t /home/sports\n</code></pre> <p>1e. Test that this works!</p> <p>Log in with different users (group members and others and root), create files and watch the permissions. Try changing and deleting files...</p> <p>2. Verify the permissions on <code>/usr/bin/passwd</code>. Remove the <code>setuid</code>, then try changing your password as a normal user. Reset the permissions back and try again.</p> <pre><code>root@deb106:~# ls -l /usr/bin/passwd \n-rwsr-xr-x 1 root root 31704 2009-11-14 15:41 /usr/bin/passwd\nroot@deb106:~# chmod 755 /usr/bin/passwd \nroot@deb106:~# ls -l /usr/bin/passwd \n-rwxr-xr-x 1 root root 31704 2009-11-14 15:41 /usr/bin/passwd\n</code></pre> <p>A normal user cannot change password now.</p> <pre><code>root@deb106:~# chmod 4755 /usr/bin/passwd \nroot@deb106:~# ls -l /usr/bin/passwd \n-rwsr-xr-x 1 root root 31704 2009-11-14 15:41 /usr/bin/passwd\n</code></pre> <p>3. If time permits (or if you are waiting for other students to finish this practice), read about file attributes in the man page of chattr and lsattr. Try setting the i attribute on a file and test that it works.</p> <pre><code>paul@laika:~$ sudo su -\n[sudo] password for paul: \nroot@laika:~# mkdir attr\nroot@laika:~# cd attr/\nroot@laika:~/attr# touch file42\nroot@laika:~/attr# lsattr\n------------------ ./file42\nroot@laika:~/attr# chattr +i file42 \nroot@laika:~/attr# lsattr\n----i------------- ./file42\nroot@laika:~/attr# rm -rf file42 \nrm: cannot remove `file42': Operation not permitted\nroot@laika:~/attr# chattr -i file42 \nroot@laika:~/attr# rm -rf file42 \nroot@laika:~/attr#\n</code></pre>"},{"location":"basic_tools/","title":"basic Unix tools","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This chapter introduces commands to <code>find</code> or <code>locate</code> files and to <code>compress</code> files, together with other common tools that were not discussed before. While the tools discussed here are technically not considered <code>filters</code>, they can be used in <code>pipes</code>.</p>"},{"location":"basic_tools/#find","title":"find","text":"<p>The <code>find</code> command can be very useful at the start of a pipe to search for files. Here are some examples. You might want to add <code>2&gt;/dev/null</code> to the command lines to avoid cluttering your screen with error messages.</p> <p>Find all files in <code>/etc</code> and put the list in etcfiles.txt</p> <pre><code>find /etc &gt; etcfiles.txt\n</code></pre> <p>Find all files of the entire system and put the list in allfiles.txt</p> <pre><code>find / &gt; allfiles.txt\n</code></pre> <p>Find files that end in .conf in the current directory (and all subdirs).</p> <pre><code>find . -name \"*.conf\"\n</code></pre> <p>Find files of type file (not directory, pipe or etc.) that end in .conf.</p> <pre><code>find . -type f -name \"*.conf\"\n</code></pre> <p>Find files of type directory that end in .bak .</p> <pre><code>find /data -type d -name \"*.bak\"\n</code></pre> <p>Find files that are newer than file42.txt</p> <pre><code>find . -newer file42.txt\n</code></pre> <p>Find can also execute another command on every file found. This example will look for *.odf files and copy them to /backup/.</p> <pre><code>find /data -name \"*.odf\" -exec cp {} /backup/ \\;\n</code></pre> <p>Find can also execute, after your confirmation, another command on every file found. This example will remove *.odf files if you approve of it for every file found.</p> <pre><code>find /data -name \"*.odf\" -ok rm {} \\;\n</code></pre>"},{"location":"basic_tools/#locate","title":"locate","text":"<p>The <code>locate</code> tool is very different from <code>find</code> in that it uses an index to locate files. This is a lot faster than traversing all the directories, but it also means that it is always outdated. If the index does not exist yet, then you have to create it (as root on Red Hat Enterprise Linux) with the <code>updatedb</code> command.</p> <pre><code>[paul@RHEL8b ~]$ locate Samba\nwarning: locate: could not open database: /var/lib/slocate/slocate.db:...\nwarning: You need to run the 'updatedb' command (as root) to create th...\nPlease have a look at /etc/updatedb.conf to enable the daily cron job.\n[paul@RHEL8b ~]$ updatedb \nfatal error: updatedb: You are not authorized to create a default sloc...\n[paul@RHEL8b ~]$ su -\nPassword: \n[root@RHEL8b ~]# updatedb\n[root@RHEL8b ~]#\n</code></pre> <p>Most Linux distributions will schedule the <code>updatedb</code> to run once every day.</p>"},{"location":"basic_tools/#date","title":"date","text":"<p>The <code>date</code> command can display the date, time, time zone and more.</p> <pre><code>paul@rhel55 ~$ date\nSat Apr 17 12:44:30 CEST 2010\n</code></pre> <p>A date string can be customised to display the format of your choice. Check the man page for more options.</p> <pre><code>paul@rhel55 ~$ date +'%A %d-%m-%Y'\nSaturday 17-04-2010\n</code></pre> <p>Time on any Unix is calculated in number of seconds since 1969 (the first second being the first second of the first of January 1970). Use <code>date +%s</code> to display Unix time in seconds.</p> <pre><code>paul@rhel55 ~$ date +%s\n1271501080\n</code></pre> <p>When will this seconds counter reach two thousand million ?</p> <pre><code>paul@rhel55 ~$ date -d '1970-01-01 + 2000000000 seconds'\nWed May 18 04:33:20 CEST 2033\n</code></pre>"},{"location":"basic_tools/#cal","title":"cal","text":"<p>The <code>cal</code> command displays the current month, with the current day highlighted.</p> <pre><code>paul@rhel55 ~$ cal\n     April 2010     \nSu Mo Tu We Th Fr Sa\n             1  2  3\n 4  5  6  7  8  9 10\n11 12 13 14 15 16 17\n18 19 20 21 22 23 24\n25 26 27 28 29 30\n</code></pre> <p>You can select any month in the past or the future.</p> <pre><code>paul@rhel55 ~$ cal 2 1970\n   February 1970    \nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n</code></pre>"},{"location":"basic_tools/#sleep","title":"sleep","text":"<p>The <code>sleep</code> command is sometimes used in scripts to wait a number of seconds. This example shows a five second <code>sleep</code>.</p> <pre><code>paul@rhel55 ~$ sleep 5\npaul@rhel55 ~$\n</code></pre>"},{"location":"basic_tools/#time","title":"time","text":"<p>The <code>time</code> command can display how long it takes to execute a command. The <code>date</code> command takes only a little time.</p> <pre><code>paul@rhel55 ~$ time date\nSat Apr 17 13:08:27 CEST 2010\n\nreal    0m0.014s\nuser    0m0.008s\nsys     0m0.006s\n</code></pre> <p>The <code>sleep 5</code> command takes five <code>real</code> seconds to execute, but consumes little <code>cpu time</code>.</p> <pre><code>paul@rhel55 ~$ time sleep 5\n\nreal    0m5.018s\nuser    0m0.005s\nsys     0m0.011s\n</code></pre> <p>This <code>bzip2</code> command compresses a file and uses a lot of <code>cpu time</code>.</p> <pre><code>paul@rhel55 ~$ time bzip2 text.txt\n\nreal    0m2.368s\nuser    0m0.847s\nsys     0m0.539s\n</code></pre>"},{"location":"basic_tools/#gzip-gunzip","title":"gzip - gunzip","text":"<p>Users never have enough disk space, so compression comes in handy. The <code>gzip</code> command can make files take up less space.</p> <pre><code>paul@rhel55 ~$ ls -lh text.txt \n-rw-rw-r-- 1 paul paul 6.4M Apr 17 13:11 text.txt\npaul@rhel55 ~$ gzip text.txt \npaul@rhel55 ~$ ls -lh text.txt.gz \n-rw-rw-r-- 1 paul paul 760K Apr 17 13:11 text.txt.gz\n</code></pre> <p>You can get the original back with <code>gunzip</code>.</p> <pre><code>paul@rhel55 ~$ gunzip text.txt.gz \npaul@rhel55 ~$ ls -lh text.txt\n-rw-rw-r-- 1 paul paul 6.4M Apr 17 13:11 text.txt\n</code></pre>"},{"location":"basic_tools/#zcat-zmore","title":"zcat - zmore","text":"<p>Text files that are compressed with <code>gzip</code> can be viewed with <code>zcat</code> and <code>zmore</code>.</p> <pre><code>paul@rhel55 ~$ head -4 text.txt \n/\n/opt\n/opt/VBoxGuestAdditions-3.1.6\n/opt/VBoxGuestAdditions-3.1.6/routines.sh\npaul@rhel55 ~$ gzip text.txt \npaul@rhel55 ~$ zcat text.txt.gz | head -4\n/\n/opt\n/opt/VBoxGuestAdditions-3.1.6\n/opt/VBoxGuestAdditions-3.1.6/routines.sh\n</code></pre>"},{"location":"basic_tools/#bzip2-bunzip2","title":"bzip2 - bunzip2","text":"<p>Files can also be compressed with <code>bzip2</code> which takes a little more time than <code>gzip</code>, but compresses better.</p> <pre><code>paul@rhel55 ~$ bzip2 text.txt \npaul@rhel55 ~$ ls -lh text.txt.bz2 \n-rw-rw-r-- 1 paul paul 569K Apr 17 13:11 text.txt.bz2\n</code></pre> <p>Files can be uncompressed again with <code>bunzip2</code>.</p> <pre><code>paul@rhel55 ~$ bunzip2 text.txt.bz2 \npaul@rhel55 ~$ ls -lh text.txt \n-rw-rw-r-- 1 paul paul 6.4M Apr 17 13:11 text.txt\n</code></pre>"},{"location":"basic_tools/#bzcat-bzmore","title":"bzcat - bzmore","text":"<p>And in the same way <code>bzcat</code> and <code>bzmore</code> can display files compressed with <code>bzip2</code>.</p> <pre><code>paul@rhel55 ~$ bzip2 text.txt \npaul@rhel55 ~$ bzcat text.txt.bz2 | head -4\n/\n/opt\n/opt/VBoxGuestAdditions-3.1.6\n/opt/VBoxGuestAdditions-3.1.6/routines.sh\n</code></pre>"},{"location":"basic_tools/#practice-basic-unix-tools","title":"practice: basic Unix tools","text":"<p>1. Explain the difference between these two commands. This question is very important. If you don\\'t know the answer, then look back at the <code>shell</code> chapter.</p> <pre><code>find /data -name \"*.txt\"\n\nfind /data -name *.txt\n</code></pre> <p>2. Explain the difference between these two statements. Will they both work when there are 200 <code>.odf</code> files in <code>/data</code> ? How about when there are 2 million .odf files ?</p> <pre><code>find /data -name \"*.odf\" &gt; data_odf.txt\n\nfind /data/*.odf &gt; data_odf.txt\n</code></pre> <p>3. Write a find command that finds all files created after January 30th 2010.</p> <p>4. Write a find command that finds all *.odf files created in September 2009.</p> <p>5. Count the number of *.conf files in /etc and all its subdirs.</p> <p>6. Here are two commands that do the same thing: copy *.odf files to /backup/ . What would be a reason to replace the first command with the second ? Again, this is an important question.</p> <pre><code>cp -r /data/*.odf /backup/\n\nfind /data -name \"*.odf\" -exec cp {} /backup/ \\;\n</code></pre> <p>7. Create a file called <code>loctest.txt</code>. Can you find this file with <code>locate</code> ? Why not ? How do you make locate find this file ?</p> <p>8. Use find and -exec to rename all .htm files to .html.</p> <p>9. Issue the <code>date</code> command. Now display the date in YYYY/MM/DD format.</p> <p>10. Issue the <code>cal</code> command. Display a calendar of 1582 and 1752. Notice anything special ?</p>"},{"location":"basic_tools/#solution-basic-unix-tools","title":"solution: basic Unix tools","text":"<p>1. Explain the difference between these two commands. This question is very important. If you don\\'t know the answer, then look back at the <code>shell</code> chapter.</p> <pre><code>find /data -name \"*.txt\"\n\nfind /data -name *.txt\n</code></pre> <p>When <code>*.txt</code> is quoted then the shell will not touch it. The <code>find</code> tool will look in the <code>/data</code> for all files ending in <code>.txt</code>.</p> <p>When <code>*.txt</code> is not quoted then the shell might expand this (when one or more files that ends in <code>.txt</code> exist in the current directory). The <code>find</code> might show a different result, or can result in a syntax error.</p> <p>2. Explain the difference between these two statements. Will they both work when there are 200 <code>.odf</code> files in <code>/data</code> ? How about when there are 2 million .odf files ?</p> <pre><code>find /data -name \"*.odf\" &gt; data_odf.txt\n\nfind /data/*.odf &gt; data_odf.txt\n</code></pre> <p>The first <code>find</code> will output all <code>.odf</code> filenames in <code>/data</code> and all subdirectories. The shell will redirect this to a file.</p> <p>The second find will output all files named <code>.odf</code> in <code>/data</code> and will also output all files that exist in directories named <code>*.odf</code> (in <code>/data</code>).</p> <p>With two million files the command line would be expanded beyond the maximum that the shell can accept. The last part of the command line would be lost.</p> <p>3. Write a find command that finds all files created after January 30th 2010.</p> <pre><code>touch -t 201001302359 marker_date\nfind . -type f -newer marker_date\n\nThere is another solution :\nfind . -type f -newerat \"20100130 23:59:59\"\n</code></pre> <p>4. Write a find command that finds all *.odf files created in September 2009.</p> <pre><code>touch -t 200908312359 marker_start\ntouch -t 200910010000 marker_end\nfind . -type f -name \"*.odf\" -newer marker_start ! -newer marker_end\n</code></pre> <p>The exclamation mark <code>! -newer</code> can be read as <code>not newer</code>.</p> <p>5. Count the number of *.conf files in /etc and all its subdirs.</p> <pre><code>find /etc -type f -name '*.conf' | wc -l\n</code></pre> <p>6. Here are two commands that do the same thing: copy *.odf files to /backup/ . What would be a reason to replace the first command with the second ? Again, this is an important question.</p> <pre><code>cp -r /data/*.odf /backup/\n\nfind /data -name \"*.odf\" -exec cp {} /backup/ \\;\n</code></pre> <p>The first might fail when there are too many files to fit on one command line.</p> <p>7. Create a file called <code>loctest.txt</code>. Can you find this file with <code>locate</code> ? Why not ? How do you make locate find this file ?</p> <p>You cannot locate this with <code>locate</code> because it is not yet in the index.</p> <pre><code>updatedb\n</code></pre> <p>8. Use find and -exec to rename all .htm files to .html.</p> <pre><code>paul@rhel55 ~$ find . -name '*.htm'\n./one.htm\n./two.htm\npaul@rhel55 ~$ find . -name '*.htm' -exec mv {} {}l \\;\npaul@rhel55 ~$ find . -name '*.htm*'\n./one.html\n./two.html\n</code></pre> <p>9. Issue the <code>date</code> command. Now display the date in YYYY/MM/DD format.</p> <pre><code>date +%Y/%m/%d\n</code></pre> <p>10. Issue the <code>cal</code> command. Display a calendar of 1582 and 1752. Notice anything special ?</p> <pre><code>cal 1582\n</code></pre> <p>The calendars are different depending on the country. Check http://linux-training.be/files/studentfiles/dates.txt</p>"},{"location":"file_permissions/","title":"standard file permissions","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This chapter contains details about basic file security through <code>file ownership</code> and <code>file permissions</code>.</p>"},{"location":"file_permissions/#file-ownership","title":"file ownership","text":""},{"location":"file_permissions/#user-owner-and-group-owner","title":"user owner and group owner","text":"<p>The <code>users</code> and <code>groups</code> of a system can be locally managed in <code>/etc/passwd</code> and <code>/etc/group</code>, or they can be in a NIS, LDAP, or Samba domain. These users and groups can <code>own</code> files. Actually, every file has a <code>user owner</code> and a <code>group owner</code>, as can be seen in the following screenshot.</p> <pre><code>paul@rhel65:~/owners$ ls -lh\ntotal 636K\n-rw-r--r--. 1 paul snooker 1.1K Apr  8 18:47 data.odt\n-rw-r--r--. 1 paul paul    626K Apr  8 18:46 file1\n-rw-r--r--. 1 root tennis   185 Apr  8 18:46 file2\n-rw-rw-r--. 1 root root       0 Apr  8 18:47 stuff.txt\npaul@rhel65:~/owners$\n</code></pre> <p>User paul owns three files; file1 has paul as <code>user owner</code> and has the group paul as <code>group owner</code>, data.odt is <code>group owned</code> by the group snooker, file2 by the group tennis.</p> <p>The last file is called stuff.txt and is owned by the root user and the root group.</p>"},{"location":"file_permissions/#listing-user-accounts","title":"listing user accounts","text":"<p>You can use the following command to list all local user accounts.</p> <pre><code>paul@debian10~$ cut -d: -f1 /etc/passwd | column \nroot            ntp             sam             bert            naomi\ndaemon          mysql           tom             rino            matthias2\nbin             paul            wouter          antonio         bram\nsys             maarten         robrecht        simon           fabrice\nsync            kevin           bilal           sven            chimene\ngames           yuri            dimitri         wouter2         messagebus\nman             william         ahmed           tarik           roger\nlp              yves            dylan           jan             frank\nmail            kris            robin           ian             toon\nnews            hamid           matthias        ivan            rinus\nuucp            vladimir        ben             azeddine        eddy\nproxy           abiy            mike            eric            bram2\nwww-data        david           kevin2          kamel           keith\nbackup          chahid          kenzo           ischa           jesse\nlist            stef            aaron           bart            frederick\nirc             joeri           lorenzo         omer            hans\ngnats           glenn           jens            kurt            dries\nnobody          yannick         ruben           steve           steve2\nlibuuid         christof        jelle           constantin      tomas\nDebian-exim     george          stefaan         sam2            johan\nstatd           joost           marc            bjorn           tom2\nsshd            arno            thomas          ronald\n</code></pre>"},{"location":"file_permissions/#chgrp","title":"chgrp","text":"<p>You can change the group owner of a file using the <code>chgrp</code> command.</p> <pre><code>root@rhel65:/home/paul/owners# ls -l file2\n-rw-r--r--. 1 root tennis 185 Apr  8 18:46 file2\nroot@rhel65:/home/paul/owners# chgrp snooker file2\nroot@rhel65:/home/paul/owners# ls -l file2\n-rw-r--r--. 1 root snooker 185 Apr  8 18:46 file2\nroot@rhel65:/home/paul/owners#\n</code></pre>"},{"location":"file_permissions/#chown","title":"chown","text":"<p>The user owner of a file can be changed with <code>chown</code> command.</p> <pre><code>root@laika:/home/paul# ls -l FileForPaul \n-rw-r--r-- 1 root paul 0 2008-08-06 14:11 FileForPaul\nroot@laika:/home/paul# chown paul FileForPaul \nroot@laika:/home/paul# ls -l FileForPaul \n-rw-r--r-- 1 paul paul 0 2008-08-06 14:11 FileForPaul\n</code></pre> <p>You can also use <code>chown</code> to change both the user owner and the group owner.</p> <pre><code>root@laika:/home/paul# ls -l FileForPaul \n-rw-r--r-- 1 paul paul 0 2008-08-06 14:11 FileForPaul\nroot@laika:/home/paul# chown root:project42 FileForPaul \nroot@laika:/home/paul# ls -l FileForPaul \n-rw-r--r-- 1 root project42 0 2008-08-06 14:11 FileForPaul\n</code></pre>"},{"location":"file_permissions/#list-of-special-files","title":"list of special files","text":"<p>When you use <code>ls -l</code>, for each file you can see ten characters before the user and group owner. The first character tells us the type of file. Regular files get a <code>-</code>, directories get a <code>d</code>, symbolic links are shown with an <code>l</code>, pipes get a <code>p</code>, character devices a <code>c</code>, block devices a <code>b</code>, and sockets an <code>s</code>.</p> <pre><code> first           file type\n</code></pre> <p>character  </p> <pre><code>  \\-            normal file\n\n   d             directory\n\n   l           symbolic link\n\n   p            named pipe\n\n   b           block device\n\n   c         character device\n\n   s              socket\n</code></pre> <p>: Unix special files</p> <p>Below a screenshot of a character device (the console) and a block device (the hard disk).</p> <pre><code>paul@debian6lt~$ ls -ld /dev/console /dev/sda\ncrw-------   1 root root  5, 1 Mar 15 12:45 /dev/console\nbrw-rw----   1 root disk  8, 0 Mar 15 12:45 /dev/sda\n</code></pre> <p>And here you can see a directory, a regular file and a symbolic link.</p> <pre><code>paul@debian6lt~$ ls -ld /etc /etc/hosts /etc/motd\ndrwxr-xr-x 128 root root 12288 Mar 15 18:34 /etc\n-rw-r--r--   1 root root   372 Dec 10 17:36 /etc/hosts\nlrwxrwxrwx   1 root root    13 Dec  5 10:36 /etc/motd -&gt; /var/run/motd\n</code></pre>"},{"location":"file_permissions/#permissions","title":"permissions","text":""},{"location":"file_permissions/#rwx","title":"rwx","text":"<p>The nine characters following the file type denote the permissions in three triplets. A permission can be <code>r</code> for read access, <code>w</code> for write access, and <code>x</code> for execute. You need the <code>r</code> permission to list (ls) the contents of a directory. You need the <code>x</code> permission to enter (cd) a directory. You need the <code>w</code> permission to create files in or remove files from a directory.</p> <p>permission          on a file              on a directory</p> <pre><code>r (read)   read file contents (cat)   read directory contents\n                                               (ls)\n</code></pre> <p>w (write)   change file contents (vi)  create files in (touch)</p> <p>x (execute)      execute the file      enter the directory (cd)</p> <p>: standard Unix file permissions</p>"},{"location":"file_permissions/#three-sets-of-rwx","title":"three sets of rwx","text":"<p>We already know that the output of <code>ls -l</code> starts with ten characters for each file. This screenshot shows a regular file (because the first character is a - ).</p> <pre><code>paul@RHELv8u4:~/test$ ls -l proc42.bash\n-rwxr-xr--  1 paul proj 984 Feb  6 12:01 proc42.bash\n</code></pre> <p>Below is a table describing the function of all ten characters.</p> <pre><code>position    characters                function\n</code></pre> <pre><code>   1            \\-             this is a regular file\n\n  2-4          rwx        permissions for the `user owner`\n\n  5-7          r-x       permissions for the `group owner`\n\n  8-10         r\\--           permissions for `others`\n</code></pre> <p>: Unix file permissions position</p> <p>When you are the <code>user owner</code> of a file, then the <code>user owner permissions</code> apply to you. The rest of the permissions have no influence on your access to the file.</p> <p>When you belong to the <code>group</code> that is the <code>group owner</code> of a file, then the <code>group owner permissions</code> apply to you. The rest of the permissions have no influence on your access to the file.</p> <p>When you are not the <code>user owner</code> of a file and you do not belong to the <code>group owner</code>, then the <code>others permissions</code> apply to you. The rest of the permissions have no influence on your access to the file.</p>"},{"location":"file_permissions/#permission-examples","title":"permission examples","text":"<p>Some example combinations on files and directories are seen in this screenshot. The name of the file explains the permissions.</p> <pre><code>paul@laika:~/perms$ ls -lh\ntotal 12K\ndrwxr-xr-x 2 paul paul 4.0K 2007-02-07 22:26 AllEnter_UserCreateDelete\n-rwxrwxrwx 1 paul paul    0 2007-02-07 22:21 EveryoneFullControl.txt\n-r--r----- 1 paul paul    0 2007-02-07 22:21 OnlyOwnersRead.txt\n-rwxrwx--- 1 paul paul    0 2007-02-07 22:21 OwnersAll_RestNothing.txt\ndr-xr-x--- 2 paul paul 4.0K 2007-02-07 22:25 UserAndGroupEnter\ndr-x------ 2 paul paul 4.0K 2007-02-07 22:25 OnlyUserEnter\npaul@laika:~/perms$\n</code></pre> <p>To summarise, the first <code>rwx</code> triplet represents the permissions for the <code>user owner</code>. The second triplet corresponds to the <code>group owner</code>; it specifies permissions for all members of that group. The third triplet defines permissions for all <code>other</code> users that are not the user owner and are not a member of the group owner.</p>"},{"location":"file_permissions/#setting-permissions-chmod","title":"setting permissions (chmod)","text":"<p>Permissions can be changed with <code>chmod</code>. The first example gives the user owner execute permissions.</p> <pre><code>paul@laika:~/perms$ ls -l permissions.txt \n-rw-r--r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt\npaul@laika:~/perms$ chmod u+x permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwxr--r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre> <p>This example removes the group owners read permission.</p> <pre><code>paul@laika:~/perms$ chmod g-r permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwx---r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre> <p>This example removes the others read permission.</p> <pre><code>paul@laika:~/perms$ chmod o-r permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwx------ 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre> <p>This example gives all of them the write permission.</p> <pre><code>paul@laika:~/perms$ chmod a+w permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwx-w--w- 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre> <p>You don\\'t even have to type the a.</p> <pre><code>paul@laika:~/perms$ chmod +x permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwx-wx-wx 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre> <p>You can also set explicit permissions.</p> <pre><code>paul@laika:~/perms$ chmod u=rw permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rw--wx-wx 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre> <p>Feel free to make any kind of combination.</p> <pre><code>paul@laika:~/perms$ chmod u=rw,g=rw,o=r permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rw-rw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre> <p>Even fishy combinations are accepted by chmod.</p> <pre><code>paul@laika:~/perms$ chmod u=rwx,ug+rw,o=r permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwxrw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre>"},{"location":"file_permissions/#setting-octal-permissions","title":"setting octal permissions","text":"<p>Most Unix administrators will use the <code>old school</code> octal system to talk about and set permissions. Look at the triplet bitwise, equating r to 4, w to 2, and x to 1.</p> <pre><code>binary       octal     permission\n</code></pre> <pre><code>  000          0         \\-\\--\n\n  001          1          \\--x\n\n  010          2          -w-\n\n  011          3          -wx\n\n  100          4          r\\--\n\n  101          5          r-x\n\n  110          6          rw-\n\n  111          7          rwx\n</code></pre> <p>: Octal permissions</p> <p>This makes <code>777</code> equal to rwxrwxrwx and by the same logic, 654 mean rw-r-xr-- . The <code>chmod</code> command will accept these numbers.</p> <pre><code>paul@laika:~/perms$ chmod 777 permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwxrwxrwx 1 paul paul 0 2007-02-07 22:34 permissions.txt\npaul@laika:~/perms$ chmod 664 permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rw-rw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt\npaul@laika:~/perms$ chmod 750 permissions.txt \npaul@laika:~/perms$ ls -l permissions.txt \n-rwxr-x--- 1 paul paul 0 2007-02-07 22:34 permissions.txt\n</code></pre>"},{"location":"file_permissions/#umask","title":"umask","text":"<p>When creating a file or directory, a set of default permissions are applied. These default permissions are determined by the <code>umask</code>. The <code>umask</code> specifies permissions that you do not want set on by default. You can display the <code>umask</code> with the <code>umask</code> command.</p> <pre><code>[Harry@RHEL8b ~]$ umask\n0002\n[Harry@RHEL8b ~]$ touch test\n[Harry@RHEL8b ~]$ ls -l test\n-rw-rw-r--  1 Harry Harry 0 Jul 24 06:03 test\n[Harry@RHEL8b ~]$\n</code></pre> <p>As you can also see, the file is also not executable by default. This is a general security feature among Unixes; newly created files are never executable by default. You have to explicitly do a <code>chmod +x</code> to make a file executable. This also means that the 1 bit in the <code>umask</code> has no meaning--a <code>umask</code> of 0022 is the same as 0033.</p>"},{"location":"file_permissions/#mkdir-m","title":"mkdir -m","text":"<p>When creating directories with <code>mkdir</code> you can use the <code>-m</code> option to set the <code>mode</code>. This screenshot explains.</p> <pre><code>paul@debian10~$ mkdir -m 700 MyDir\npaul@debian10~$ mkdir -m 777 Public\npaul@debian10~$ ls -dl MyDir/ Public/\ndrwx------ 2 paul paul 4096 2011-10-16 19:16 MyDir/\ndrwxrwxrwx 2 paul paul 4096 2011-10-16 19:16 Public/\n</code></pre>"},{"location":"file_permissions/#cp-p","title":"cp -p","text":"<p>To preserve permissions and time stamps from source files, use <code>cp -p</code>.</p> <pre><code>paul@laika:~/perms$ cp file* cp\npaul@laika:~/perms$ cp -p file* cpp\npaul@laika:~/perms$ ll *\n-rwx------ 1 paul paul    0 2008-08-25 13:26 file33\n-rwxr-x--- 1 paul paul    0 2008-08-25 13:26 file42\n\ncp:\ntotal 0\n-rwx------ 1 paul paul 0 2008-08-25 13:34 file33\n-rwxr-x--- 1 paul paul 0 2008-08-25 13:34 file42\n\ncpp:\ntotal 0\n-rwx------ 1 paul paul 0 2008-08-25 13:26 file33\n-rwxr-x--- 1 paul paul 0 2008-08-25 13:26 file42\n</code></pre>"},{"location":"file_permissions/#practice-standard-file-permissions","title":"practice: standard file permissions","text":"<p>1. As normal user, create a directory \\~/permissions. Create a file owned by yourself in there.</p> <p>2. Copy a file owned by root from /etc/ to your permissions dir, who owns this file now ?</p> <p>3. As root, create a file in the users \\~/permissions directory.</p> <p>4. As normal user, look at who owns this file created by root.</p> <p>5. Change the ownership of all files in \\~/permissions to yourself.</p> <p>6. Make sure you have all rights to these files, and others can only read.</p> <p>7. With chmod, is 770 the same as rwxrwx--- ?</p> <p>8. With chmod, is 664 the same as r-xr-xr-- ?</p> <p>9. With chmod, is 400 the same as r-------- ?</p> <p>10. With chmod, is 734 the same as rwxr-xr-- ?</p> <p>11a. Display the umask in octal and in symbolic form.</p> <p>11b. Set the umask to 077, but use the symbolic format to set it. Verify that this works.</p> <p>12. Create a file as root, give only read to others. Can a normal user read this file ? Test writing to this file with vi.</p> <p>13a. Create a file as normal user, give only read to others. Can another normal user read this file ? Test writing to this file with vi.</p> <p>13b. Can root read this file ? Can root write to this file with vi ?</p> <p>14. Create a directory that belongs to a group, where every member of that group can read and write to files, and create files. Make sure that people can only delete their own files.</p>"},{"location":"file_permissions/#solution-standard-file-permissions","title":"solution: standard file permissions","text":"<p>1. As normal user, create a directory \\~/permissions. Create a file owned by yourself in there.</p> <pre><code>mkdir ~/permissions ; touch ~/permissions/myfile.txt\n</code></pre> <p>2. Copy a file owned by root from /etc/ to your permissions dir, who owns this file now ?</p> <pre><code>cp /etc/hosts ~/permissions/\n</code></pre> <p>The copy is owned by you.</p> <p>3. As root, create a file in the users \\~/permissions directory.</p> <pre><code>(become root)# touch /home/username/permissions/rootfile\n</code></pre> <p>4. As normal user, look at who owns this file created by root.</p> <pre><code>ls -l ~/permissions\n</code></pre> <p>The file created by root is owned by root.</p> <p>5. Change the ownership of all files in \\~/permissions to yourself.</p> <pre><code>chown user ~/permissions/*\n</code></pre> <p>You cannot become owner of the file that belongs to root.</p> <p>6. Make sure you have all rights to these files, and others can only read.</p> <pre><code>chmod 644 (on files)\n\nchmod 755 (on directories)\n</code></pre> <p>7. With chmod, is 770 the same as rwxrwx--- ?</p> <p>yes</p> <p>8. With chmod, is 664 the same as r-xr-xr-- ?</p> <p>No</p> <p>9. With chmod, is 400 the same as r-------- ?</p> <p>yes</p> <p>10. With chmod, is 734 the same as rwxr-xr-- ?</p> <p>no</p> <p>11a. Display the umask in octal and in symbolic form.</p> <pre><code>umask ; umask -S\n</code></pre> <p>11b. Set the umask to 077, but use the symbolic format to set it. Verify that this works.</p> <pre><code>umask -S u=rwx,go=\n</code></pre> <p>12. Create a file as root, give only read to others. Can a normal user read this file ? Test writing to this file with vi.</p> <pre><code>(become root)\n\n# echo hello &gt; /home/username/root.txt\n\n# chmod 744 /home/username/root.txt\n\n(become user)\n\nvi ~/root.txt\n</code></pre> <p>13a. Create a file as normal user, give only read to others. Can another normal user read this file ? Test writing to this file with vi.</p> <pre><code>echo hello &gt; file ; chmod 744 file\n</code></pre> <p>Yes, others can read this file</p> <p>13b. Can root read this file ? Can root write to this file with vi ?</p> <p>Yes, root can read and write to this file. Permissions do not apply to root.</p> <p>14. Create a directory that belongs to a group, where every member of that group can read and write to files, and create files. Make sure that people can only delete their own files.</p> <pre><code>mkdir /home/project42 ; groupadd project42\n\nchgrp project42 /home/project42 ; chmod 775 /home/project42\n</code></pre> <p>You can not yet do the last part of this exercise...</p>"},{"location":"file_system_tree/","title":"the Linux file tree","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/, Serge Van Ginderachter, https://github.com/srgvg/)</p> <p>This chapter takes a look at the most common directories in the <code>Linux file tree</code>. It also shows that on Unix everything is a file.</p>"},{"location":"file_system_tree/#filesystem-hierarchy-standard","title":"filesystem hierarchy standard","text":"<p>Many Linux distributions partially follow the <code>Filesystem Hierarchy Standard</code>. The <code>FHS</code> may help make more Unix/Linux file system trees conform better in the future. The <code>FHS</code> is available online at <code>http://www.pathname.com/fhs/</code> where we read: \\\"The filesystem hierarchy standard has been designed to be used by Unix distribution developers, package developers, and system implementers. However, it is primarily intended to be a reference and is not a tutorial on how to manage a Unix filesystem or directory hierarchy.\\\"</p>"},{"location":"file_system_tree/#man-hier","title":"man hier","text":"<p>There are some differences in the filesystems between <code>Linux distributions</code>. For help about your machine, enter <code>man hier</code> to find information about the file system hierarchy. This manual will explain the directory structure on your computer.</p>"},{"location":"file_system_tree/#the-root-directory","title":"the root directory /","text":"<p>All Linux systems have a directory structure that starts at the <code>root directory</code>. The root directory is represented by a <code>forward slash</code>, like this: <code>/</code>. Everything that exists on your Linux system can be found below this root directory. Let\\'s take a brief look at the contents of the root directory.</p> <pre><code>[paul@RHELv8u3 ~]$ ls /\nbin   dev  home  media  mnt  proc  sbin     srv  tftpboot  usr\nboot  etc  lib   misc   opt  root  selinux  sys  tmp       var\n</code></pre>"},{"location":"file_system_tree/#binary-directories","title":"binary directories","text":"<p><code>Binaries</code> are files that contain compiled source code (or machine code). Binaries can be <code>executed</code> on the computer. Sometimes binaries are called <code>executables</code>.</p>"},{"location":"file_system_tree/#bin","title":"/bin","text":"<p>The <code>/bin</code> directory contains <code>binaries</code> for use by all users. According to the FHS the <code>/bin</code> directory should contain <code>/bin/cat</code> and <code>/bin/date</code> (among others).</p> <p>In the screenshot below you see common Unix/Linux commands like cat, cp, cpio, date, dd, echo, grep, and so on. Many of these will be covered in this book.</p> <pre><code>paul@laika:~$ ls /bin\narchdetect       egrep             mt               setupcon\nautopartition    false             mt-gnu           sh\nbash             fgconsole         mv               sh.distrib\nbunzip2          fgrep             nano             sleep\nbzcat            fuser             nc               stralign\nbzcmp            fusermount        nc.traditional   stty\nbzdiff           get_mountoptions  netcat           su\nbzegrep          grep              netstat          sync\nbzexe            gunzip            ntfs-3g          sysfs\nbzfgrep          gzexe             ntfs-3g.probe    tailf\nbzgrep           gzip              parted_devices   tar\nbzip2            hostname          parted_server    tempfile\nbzip2recover     hw-detect         partman          touch\nbzless           ip                partman-commit   true\nbzmore           kbd_mode          perform_recipe   ulockmgr\ncat              kill              pidof            umount\n...\n</code></pre>"},{"location":"file_system_tree/#other-bin-directories","title":"other /bin directories","text":"<p>You can find a <code>/bin subdirectory</code> in many other directories. A user named <code>serena</code> could put her own programs in <code>/home/serena/bin</code>.</p> <p>Some applications, often when installed directly from source will put themselves in <code>/opt</code>. A <code>samba server</code> installation can use <code>/opt/samba/bin</code> to store its binaries.</p>"},{"location":"file_system_tree/#sbin","title":"/sbin","text":"<p><code>/sbin</code> contains binaries to configure the operating system. Many of the <code>system binaries</code> require <code>root</code> privilege to perform certain tasks.</p> <p>Below a screenshot containing <code>system binaries</code> to change the ip address, partition a disk and create an ext4 file system.</p> <pre><code>paul@ubu1010:~$ ls -l /sbin/ifconfig /sbin/fdisk /sbin/mkfs.ext4\n-rwxr-xr-x 1 root root 97172 2011-02-02 09:56 /sbin/fdisk\n-rwxr-xr-x 1 root root 65708 2010-07-02 09:27 /sbin/ifconfig\n-rwxr-xr-x 5 root root 55140 2010-08-18 18:01 /sbin/mkfs.ext4\n</code></pre>"},{"location":"file_system_tree/#lib","title":"/lib","text":"<p>Binaries found in <code>/bin</code> and <code>/sbin</code> often use <code>shared libraries</code> located in <code>/lib</code>. Below is a screenshot of the partial contents of <code>/lib</code>.</p> <pre><code>paul@laika:~$ ls /lib/libc*\n/lib/libc-2.5.so     /lib/libcfont.so.0.0.0  /lib/libcom_err.so.2.1    \n/lib/libcap.so.1     /lib/libcidn-2.5.so     /lib/libconsole.so.0      \n/lib/libcap.so.1.10  /lib/libcidn.so.1       /lib/libconsole.so.0.0.0  \n/lib/libcfont.so.0   /lib/libcom_err.so.2    /lib/libcrypt-2.5.so\n</code></pre>"},{"location":"file_system_tree/#libmodules","title":"/lib/modules","text":"<p>Typically, the <code>Linux kernel</code> loads kernel modules from <code>/lib/modules/$kernel-version/</code>. This directory is discussed in detail in the Linux kernel chapter.</p>"},{"location":"file_system_tree/#lib32-and-lib64","title":"/lib32 and /lib64","text":"<p>We currently are in a transition between <code>32-bit</code> and <code>64-bit</code> systems. Therefore, you may encounter directories named <code>/lib32</code> and <code>/lib64</code> which clarify the register size used during compilation time of the libraries. A 64-bit computer may have some 32-bit binaries and libraries for compatibility with legacy applications. This screenshot uses the <code>file</code> utility to demonstrate the difference.</p> <pre><code>paul@laika:~$ file /lib32/libc-2.5.so \n/lib32/libc-2.5.so: ELF 32-bit LSB shared object, Intel 80386, \\\nversion 1 (SYSV), for GNU/Linux 2.6.0, stripped\npaul@laika:~$ file /lib64/libcap.so.1.10 \n/lib64/libcap.so.1.10: ELF 64-bit LSB shared object, AMD x86-64, \\\nversion 1 (SYSV), stripped\n</code></pre> <p>The ELF <code>(Executable and Linkable Format)</code> is used in almost every Unix-like operating system since <code>System V</code>.</p>"},{"location":"file_system_tree/#opt","title":"/opt","text":"<p>The purpose of <code>/opt</code> is to store <code>optional</code> software. In many cases this is software from outside the distribution repository. You may find an empty <code>/opt</code> directory on many systems.</p> <p>A large package can install all its files in <code>/bin</code>, <code>/lib</code>, <code>/etc</code> subdirectories within <code>/opt/$packagename/</code>. If for example the package is called wp, then it installs in <code>/opt/wp</code>, putting binaries in <code>/opt/wp/bin</code> and manpages in <code>/opt/wp/man</code>.</p>"},{"location":"file_system_tree/#configuration-directories","title":"configuration directories","text":""},{"location":"file_system_tree/#boot","title":"/boot","text":"<p>The <code>/boot</code> directory contains all files needed to boot the computer. These files don\\'t change very often. On Linux systems you typically find the <code>/boot/grub</code> directory here. <code>/boot/grub</code> contains <code>/boot/grub/grub.cfg</code> (older systems may still have <code>/boot/grub/grub.conf</code>) which defines the boot menu that is displayed before the kernel starts.</p>"},{"location":"file_system_tree/#etc","title":"/etc","text":"<p>All of the machine-specific <code>configuration files</code> should be located in <code>/etc</code>. Historically <code>/etc</code> stood for <code>etcetera</code>, today people often use the <code>Editable Text Configuration</code> backronym.</p> <p>Many times the name of a configuration files is the same as the application, daemon, or protocol with <code>.conf</code> added as the extension.</p> <pre><code>paul@laika:~$ ls /etc/*.conf\n/etc/adduser.conf        /etc/ld.so.conf       /etc/scrollkeeper.conf\n/etc/brltty.conf         /etc/lftp.conf        /etc/sysctl.conf\n/etc/ccertificates.conf  /etc/libao.conf       /etc/syslog.conf\n/etc/cvs-cron.conf       /etc/logrotate.conf   /etc/ucf.conf\n/etc/ddclient.conf       /etc/ltrace.conf      /etc/uniconf.conf\n/etc/debconf.conf        /etc/mke2fs.conf      /etc/updatedb.conf\n/etc/deluser.conf        /etc/netscsid.conf    /etc/usplash.conf\n/etc/fdmount.conf        /etc/nsswitch.conf    /etc/uswsusp.conf\n/etc/hdparm.conf         /etc/pam.conf         /etc/vnc.conf\n/etc/host.conf           /etc/pnm2ppa.conf     /etc/wodim.conf\n/etc/inetd.conf          /etc/povray.conf      /etc/wvdial.conf\n/etc/kernel-img.conf     /etc/resolv.conf\npaul@laika:~$\n</code></pre> <p>There is much more to be found in <code>/etc</code>.</p>"},{"location":"file_system_tree/#etcinitd","title":"/etc/init.d/","text":"<p>A lot of Unix/Linux distributions have an <code>/etc/init.d</code> directory that contains scripts to start and stop <code>daemons</code>. This directory could disappear as Linux migrates to systems that replace the old <code>init</code> way of starting all <code>daemons</code>.</p>"},{"location":"file_system_tree/#etcx11","title":"/etc/X11/","text":"<p>The graphical display (aka <code>X Window System</code> or just <code>X</code>) is driven by software from the X.org foundation. The configuration file for your graphical display is <code>/etc/X11/xorg.conf</code>.</p>"},{"location":"file_system_tree/#etcskel","title":"/etc/skel/","text":"<p>The <code>skeleton</code> directory <code>/etc/skel</code> is copied to the home directory of a newly created user. It usually contains hidden files like a <code>.bashrc</code> script.</p>"},{"location":"file_system_tree/#etcsysconfig","title":"/etc/sysconfig/","text":"<p>This directory, which is not mentioned in the FHS, contains a lot of <code>Red Hat Enterprise Linux</code> configuration files. We will discuss some of them in greater detail. The screenshot below is the <code>/etc/sysconfig</code> directory from RHELv8u4 with everything installed.</p> <pre><code>paul@RHELv8u4:~$ ls /etc/sysconfig/\napmd         firstboot     irda              network      saslauthd\napm-scripts  grub          irqbalance        networking   selinux\nauthconfig   hidd          keyboard          ntpd         spamassassin\nautofs       httpd         kudzu             openib.conf  squid\nbluetooth    hwconf        lm_sensors        pand         syslog\nclock        i18n          mouse             pcmcia       sys-config-sec\nconsole      init          mouse.B           pgsql        sys-config-users\ncrond        installinfo   named             prelink      sys-logviewer\ndesktop      ipmi          netdump           rawdevices   tux\ndiskdump     iptables      netdump_id_dsa    rhn          vncservers\ndund         iptables-cfg  netdump_id_dsa.p  samba        xinetd\npaul@RHELv8u4:~$\n</code></pre> <p>The file <code>/etc/sysconfig/firstboot</code> tells the Red Hat Setup Agent not to run at boot time. If you want to run the Red Hat Setup Agent at the next reboot, then simply remove this file, and run <code>chkconfig --level 5 firstboot on</code>. The Red Hat Setup Agent allows you to install the latest updates, create a user account, join the Red Hat Network and more. It will then create the /etc/sysconfig/firstboot file again.</p> <pre><code>paul@RHELv8u4:~$ cat /etc/sysconfig/firstboot \nRUN_FIRSTBOOT=NO\n</code></pre> <p>The <code>/etc/sysconfig/harddisks</code> file contains some parameters to tune the hard disks. The file explains itself.</p> <p>You can see hardware detected by <code>kudzu</code> in <code>/etc/sysconfig/hwconf</code>. Kudzu is software from Red Hat for automatic discovery and configuration of hardware.</p> <p>The keyboard type and keymap table are set in the <code>/etc/sysconfig/keyboard</code> file. For more console keyboard information, check the manual pages of <code>keymaps(5)</code>, <code>dumpkeys(1)</code>, <code>loadkeys(1)</code> and the directory <code>/lib/kbd/keymaps/</code>.</p> <pre><code>root@RHELv8u4:/etc/sysconfig# cat keyboard \nKEYBOARDTYPE=\"pc\"\nKEYTABLE=\"us\"\n</code></pre> <p>We will discuss networking files in this directory in the networking chapter.</p>"},{"location":"file_system_tree/#data-directories","title":"data directories","text":""},{"location":"file_system_tree/#home","title":"/home","text":"<p>Users can store personal or project data under <code>/home</code>. It is common (but not mandatory by the fhs) practice to name the users home directory after the user name in the format <code>/home/$USERNAME</code>. For example:</p> <pre><code>paul@ubu606:~$ ls /home \ngeert  annik  sandra  paul  tom\n</code></pre> <p>Besides giving every user (or every project or group) a location to store personal files, the home directory of a user also serves as a location to store the user profile. A typical Unix user profile contains many hidden files (files whose file name starts with a dot). The hidden files of the Unix user profiles contain settings specific for that user.</p> <pre><code>paul@ubu606:~$ ls -d /home/paul/.*\n/home/paul/.              /home/paul/.bash_profile  /home/paul/.ssh\n/home/paul/..             /home/paul/.bashrc        /home/paul/.viminfo\n/home/paul/.bash_history  /home/paul/.lesshst\n</code></pre>"},{"location":"file_system_tree/#root","title":"/root","text":"<p>On many systems <code>/root</code> is the default location for personal data and profile of the <code>root user</code>. If it does not exist by default, then some administrators create it.</p>"},{"location":"file_system_tree/#srv","title":"/srv","text":"<p>You may use <code>/srv</code> for data that is <code>served by your system</code>. The FHS allows locating cvs, rsync, ftp and www data in this location. The FHS also approves administrative naming in /srv, like /srv/project55/ftp and /srv/sales/www.</p> <p>On Sun Solaris (or Oracle Solaris) <code>/export</code> is used for this purpose.</p>"},{"location":"file_system_tree/#media","title":"/media","text":"<p>The <code>/media</code> directory serves as a mount point for <code>removable media devices</code> such as CD-ROM\\'s, digital cameras, and various usb-attached devices. Since <code>/media</code> is rather new in the Unix world, you could very well encounter systems running without this directory. Solaris 9 does not have it, Solaris 10 does. Most Linux distributions today mount all removable media in <code>/media</code>.</p> <pre><code>paul@debian10:~$ ls /media/\ncdrom  cdrom0  usbdisk\n</code></pre>"},{"location":"file_system_tree/#mnt","title":"/mnt","text":"<p>The <code>/mnt</code> directory should be empty and should only be used for temporary mount points (according to the FHS).</p> <p>Unix and Linux administrators used to create many directories here, like /mnt/something/. You likely will encounter many systems with more than one directory created and/or mounted inside <code>/mnt</code> to be used for various local and remote filesystems.</p>"},{"location":"file_system_tree/#tmp","title":"/tmp","text":"<p>Applications and users should use <code>/tmp</code> to store temporary data when needed. Data stored in <code>/tmp</code> may use either disk space or RAM. Both of which are managed by the operating system. Never use <code>/tmp</code> to store data that is important or which you wish to archive.</p>"},{"location":"file_system_tree/#in-memory-directories","title":"in memory directories","text":""},{"location":"file_system_tree/#dev","title":"/dev","text":"<p>Device files in <code>/dev</code> appear to be ordinary files, but are not actually located on the hard disk. The <code>/dev</code> directory is populated with files as the kernel is recognising hardware.</p>"},{"location":"file_system_tree/#common-physical-devices","title":"common physical devices","text":"<p>Common hardware such as hard disk devices are represented by device files in <code>/dev</code>. Below a screenshot of SATA device files on a laptop and then IDE attached drives on a desktop. (The detailed meaning of these devices will be discussed later.)</p> <pre><code>#\n# SATA or SCSI or USB\n#\npaul@laika:~$ ls /dev/sd*\n/dev/sda  /dev/sda1  /dev/sda2  /dev/sda3  /dev/sdb  /dev/sdb1  /dev/sdb2\n\n#\n# IDE or ATAPI\n#\npaul@barry:~$ ls /dev/hd*\n/dev/hda  /dev/hda1  /dev/hda2  /dev/hdb  /dev/hdb1  /dev/hdb2  /dev/hdc\n</code></pre> <p>Besides representing physical hardware, some device files are special. These special devices can be very useful.</p>"},{"location":"file_system_tree/#devtty-and-devpts","title":"/dev/tty and /dev/pts","text":"<p>For example, <code>/dev/tty1</code> represents a terminal or console attached to the system. (Don\\'t break your head on the exact terminology of \\'terminal\\' or \\'console\\', what we mean here is a command line interface.) When typing commands in a terminal that is part of a graphical interface like Gnome or KDE, then your terminal will be represented as <code>/dev/pts/1</code> (1 can be another number).</p>"},{"location":"file_system_tree/#devnull","title":"/dev/null","text":"<p>On Linux you will find other special devices such as <code>/dev/null</code> which can be considered a black hole; it has unlimited storage, but nothing can be retrieved from it. Technically speaking, anything written to /dev/null will be discarded. /dev/null can be useful to discard unwanted output from commands. /dev/null is not a good location to store your backups ;-).</p>"},{"location":"file_system_tree/#proc-conversation-with-the-kernel","title":"/proc conversation with the kernel","text":"<p><code>/proc</code> is another special directory, appearing to be ordinary files, but not taking up disk space. It is actually a view of the kernel, or better, what the kernel manages, and is a means to interact with it directly. <code>/proc</code> is a proc filesystem.</p> <pre><code>paul@RHELv8u4:~$ mount -t proc\nnone on /proc type proc (rw)\n</code></pre> <p>When listing the /proc directory you will see many numbers (on any Unix) and some interesting files (on Linux)</p> <pre><code>mul@laika:~$ ls /proc\n1      2339   4724  5418  6587  7201       cmdline      mounts\n10175  2523   4729  5421  6596  7204       cpuinfo      mtrr\n10211  2783   4741  5658  6599  7206       crypto       net\n10239  2975   4873  5661  6638  7214       devices      pagetypeinfo\n141    29775  4874  5665  6652  7216       diskstats    partitions\n15045  29792  4878  5927  6719  7218       dma          sched_debug\n1519   2997   4879  6     6736  7223       driver       scsi\n1548   3      4881  6032  6737  7224       execdomains  self\n1551   30228  4882  6033  6755  7227       fb           slabinfo\n1554   3069   5     6145  6762  7260       filesystems  stat\n1557   31422  5073  6298  6774  7267       fs           swaps\n1606   3149   5147  6414  6816  7275       ide          sys\n180    31507  5203  6418  6991  7282       interrupts   sysrq-trigger\n181    3189   5206  6419  6993  7298       iomem        sysvipc\n182    3193   5228  6420  6996  7319       ioports      timer_list\n18898  3246   5272  6421  7157  7330       irq          timer_stats\n19799  3248   5291  6422  7163  7345       kallsyms     tty\n19803  3253   5294  6423  7164  7513       kcore        uptime\n19804  3372   5356  6424  7171  7525       key-users    version\n1987   4      5370  6425  7175  7529       kmsg         version_signature\n1989   42     5379  6426  7188  9964       loadavg      vmcore\n2      45     5380  6430  7189  acpi       locks        vmnet\n20845  4542   5412  6450  7191  asound     meminfo      vmstat\n221    46     5414  6551  7192  buddyinfo  misc         zoneinfo\n2338   4704   5416  6568  7199  bus        modules\n</code></pre> <p>Let\\'s investigate the file properties inside <code>/proc</code>. Looking at the date and time will display the current date and time showing the files are constantly updated (a view on the kernel).</p> <pre><code>paul@RHELv8u4:~$ date\nMon Jan 29 18:06:32 EST 2007\npaul@RHELv8u4:~$ ls -al /proc/cpuinfo \n-r--r--r--  1 root root 0 Jan 29 18:06 /proc/cpuinfo\npaul@RHELv8u4:~$ \npaul@RHELv8u4:~$  ...time passes...\npaul@RHELv8u4:~$ \npaul@RHELv8u4:~$ date\nMon Jan 29 18:10:00 EST 2007\npaul@RHELv8u4:~$ ls -al /proc/cpuinfo \n-r--r--r--  1 root root 0 Jan 29 18:10 /proc/cpuinfo\n</code></pre> <p>Most files in /proc are 0 bytes, yet they contain data--sometimes a lot of data. You can see this by executing cat on files like <code>/proc/cpuinfo</code>, which contains information about the CPU.</p> <pre><code>paul@RHELv8u4:~$ file /proc/cpuinfo \n/proc/cpuinfo: empty\npaul@RHELv8u4:~$ cat /proc/cpuinfo \nprocessor       : 0\nvendor_id       : AuthenticAMD\ncpu family      : 15\nmodel           : 43\nmodel name      : AMD Athlon(tm) 64 X2 Dual Core Processor 4600+\nstepping        : 1\ncpu MHz         : 2398.628\ncache size      : 512 KB\nfdiv_bug        : no\nhlt_bug         : no\nf00f_bug        : no\ncoma_bug        : no\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 1\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge...\nbogomips        : 4803.54\n</code></pre> <p>Just for fun, here is /proc/cpuinfo on a Sun Sunblade 1000...</p> <pre><code>paul@pasha:~$ cat /proc/cpuinfo\ncpu : TI UltraSparc III (Cheetah)\nfpu : UltraSparc III integrated FPU\npromlib : Version 3 Revision 2\nprom : 4.2.2\ntype : sun4u\nncpus probed : 2\nncpus active : 2\nCpu0Bogo : 498.68\nCpu0ClkTck : 000000002cb41780\nCpu1Bogo : 498.68\nCpu1ClkTck : 000000002cb41780\nMMU Type : Cheetah\nState:\nCPU0: online\nCPU1: online\n</code></pre> <p>Most of the files in /proc are read only, some require root privileges, some files are writable, and many files in <code>/proc/sys</code> are writable. Let\\'s discuss some of the files in /proc.</p>"},{"location":"file_system_tree/#procinterrupts","title":"/proc/interrupts","text":"<p>On the x86 architecture, <code>/proc/interrupts</code> displays the interrupts.</p> <pre><code>paul@RHELv8u4:~$ cat /proc/interrupts \n           CPU0       \n  0:   13876877    IO-APIC-edge  timer\n  1:         15    IO-APIC-edge  i8042\n  8:          1    IO-APIC-edge  rtc\n  9:          0   IO-APIC-level  acpi\n 12:         67    IO-APIC-edge  i8042\n 14:        128    IO-APIC-edge  ide0\n 15:     124320    IO-APIC-edge  ide1\n169:     111993   IO-APIC-level  ioc0\n177:       2428   IO-APIC-level  eth0\nNMI:          0 \nLOC:   13878037 \nERR:          0\nMIS:          0\n</code></pre> <p>On a machine with two CPU\\'s, the file looks like this.</p> <pre><code>paul@laika:~$ cat /proc/interrupts \n          CPU0      CPU1       \n  0:    860013        0  IO-APIC-edge     timer\n  1:      4533        0  IO-APIC-edge     i8042\n  7:         0        0  IO-APIC-edge     parport0\n  8:   6588227        0  IO-APIC-edge     rtc\n 10:      2314        0  IO-APIC-fasteoi  acpi\n 12:       133        0  IO-APIC-edge     i8042\n 14:         0        0  IO-APIC-edge     libata\n 15:     72269        0  IO-APIC-edge     libata\n 18:         1        0  IO-APIC-fasteoi  yenta\n 19:    115036        0  IO-APIC-fasteoi  eth0\n 20:    126871        0  IO-APIC-fasteoi  libata, ohci1394\n 21:     30204        0  IO-APIC-fasteoi  ehci_hcd:usb1, uhci_hcd:usb2\n 22:      1334        0  IO-APIC-fasteoi  saa7133[0], saa7133[0]\n 24:    234739        0  IO-APIC-fasteoi  nvidia\nNMI:        72       42 \nLOC:    860000   859994 \nERR:         0\n</code></pre>"},{"location":"file_system_tree/#prockcore","title":"/proc/kcore","text":"<p>The physical memory is represented in <code>/proc/kcore</code>. Do not try to cat this file, instead use a debugger. The size of /proc/kcore is the same as your physical memory, plus four bytes.</p> <pre><code>paul@laika:~$ ls -lh /proc/kcore \n-r-------- 1 root root 2.0G 2007-01-30 08:57 /proc/kcore\npaul@laika:~$\n</code></pre>"},{"location":"file_system_tree/#sys-linux-26-hot-plugging","title":"/sys Linux 2.6 hot plugging","text":"<p>The <code>/sys</code> directory was created for the Linux 2.6 kernel. Since 2.6, Linux uses <code>sysfs</code> to support <code>usb</code> and <code>IEEE 1394</code> (<code>FireWire</code>) hot plug devices. See the manual pages of udev(8) (the successor of <code>devfs</code>) and hotplug(8) for more info (or visit http://linux-hotplug.sourceforge.net/ ).</p> <p>Basically the <code>/sys</code> directory contains kernel information about hardware.</p>"},{"location":"file_system_tree/#usr-unix-system-resources","title":"/usr Unix System Resources","text":"<p>Although <code>/usr</code> is pronounced like user, remember that it stands for <code>Unix System Resources</code>. The <code>/usr</code> hierarchy should contain <code>shareable, read only</code> data. Some people choose to mount <code>/usr</code> as read only. This can be done from its own partition or from a read only NFS share (NFS is discussed later).</p>"},{"location":"file_system_tree/#usrbin","title":"/usr/bin","text":"<p>The <code>/usr/bin</code> directory contains a lot of commands.</p> <pre><code>paul@deb508:~$ ls /usr/bin | wc -l\n1395\n</code></pre> <p>(On Solaris the <code>/bin</code> directory is a symbolic link to <code>/usr/bin</code>.)</p>"},{"location":"file_system_tree/#usrinclude","title":"/usr/include","text":"<p>The <code>/usr/include</code> directory contains general use include files for C.</p> <pre><code>paul@ubu1010:~$ ls /usr/include/\naalib.h        expat_config.h      math.h           search.h\naf_vfs.h       expat_external.h    mcheck.h         semaphore.h\naio.h          expat.h             memory.h         setjmp.h\nAL             fcntl.h             menu.h           sgtty.h\naliases.h      features.h          mntent.h         shadow.h\n...\n</code></pre>"},{"location":"file_system_tree/#usrlib","title":"/usr/lib","text":"<p>The <code>/usr/lib</code> directory contains libraries that are not directly executed by users or scripts.</p> <pre><code>paul@deb508:~$ ls /usr/lib | head -7\n4Suite\nao\napt\narj\naspell\navahi\nbonobo\n</code></pre>"},{"location":"file_system_tree/#usrlocal","title":"/usr/local","text":"<p>The <code>/usr/local</code> directory can be used by an administrator to install software locally.</p> <pre><code>paul@deb508:~$ ls /usr/local/\nbin  etc  games  include  lib  man  sbin  share  src\npaul@deb508:~$ du -sh /usr/local/\n128K    /usr/local/\n</code></pre>"},{"location":"file_system_tree/#usrshare","title":"/usr/share","text":"<p>The <code>/usr/share</code> directory contains architecture independent data. As you can see, this is a fairly large directory.</p> <pre><code>paul@deb508:~$ ls /usr/share/ | wc -l\n263\npaul@deb508:~$ du -sh /usr/share/\n1.3G    /usr/share/\n</code></pre> <p>This directory typically contains <code>/usr/share/man</code> for manual pages.</p> <pre><code>paul@deb508:~$ ls /usr/share/man\ncs  fr        hu        it.UTF-8  man2  man6  pl.ISO8859-2  sv\nde  fr.ISO8859-1  id        ja    man3  man7  pl.UTF-8      tr\nes  fr.UTF-8      it        ko    man4  man8  pt_BR     zh_CN\nfi  gl        it.ISO8859-1  man1      man5  pl    ru        zh_TW\n</code></pre> <p>And it contains <code>/usr/share/games</code> for all static game data (so no high-scores or play logs).</p> <pre><code>paul@ubu1010:~$ ls /usr/share/games/\nopenttd  wesnoth\n</code></pre>"},{"location":"file_system_tree/#usrsrc","title":"/usr/src","text":"<p>The <code>/usr/src</code> directory is the recommended location for kernel source files.</p> <pre><code>paul@deb508:~$ ls -l /usr/src/\ntotal 12\ndrwxr-xr-x  4 root root 4096 2011-02-01 14:43 linux-headers-2.6.26-2-686\ndrwxr-xr-x 18 root root 4096 2011-02-01 14:43 linux-headers-2.6.26-2-common\ndrwxr-xr-x  3 root root 4096 2009-10-28 16:01 linux-kbuild-2.6.26\n</code></pre>"},{"location":"file_system_tree/#var-variable-data","title":"/var variable data","text":"<p>Files that are unpredictable in size, such as log, cache and spool files, should be located in <code>/var</code>.</p>"},{"location":"file_system_tree/#varlog","title":"/var/log","text":"<p>The <code>/var/log</code> directory serves as a central point to contain all log files.</p> <pre><code>[paul@RHEL8b ~]$ ls /var/log\nacpid           cron.2    maillog.2   quagga           secure.4\namanda          cron.3    maillog.3   radius           spooler\nanaconda.log    cron.4    maillog.4   rpmpkgs          spooler.1\nanaconda.syslog cups      mailman     rpmpkgs.1        spooler.2\nanaconda.xlog   dmesg     messages    rpmpkgs.2        spooler.3\naudit           exim      messages.1  rpmpkgs.3        spooler.4\nboot.log        gdm       messages.2  rpmpkgs.4        squid\nboot.log.1      httpd     messages.3  sa               uucp\nboot.log.2      iiim      messages.4  samba            vbox\nboot.log.3      iptraf    mysqld.log  scrollkeeper.log vmware-tools-guestd\nboot.log.4      lastlog   news        secure           wtmp\ncanna           mail      pgsql       secure.1         wtmp.1\ncron            maillog   ppp         secure.2         Xorg.0.log\ncron.1          maillog.1 prelink.log secure.3         Xorg.0.log.old\n</code></pre>"},{"location":"file_system_tree/#varlogmessages","title":"/var/log/messages","text":"<p>A typical first file to check when troubleshooting on Red Hat (and derivatives) is the <code>/var/log/messages</code> file. By default this file will contain information on what just happened to the system. The file is called <code>/var/log/syslog</code> on Debian and Ubuntu.</p> <pre><code>[root@RHEL8b ~]# tail /var/log/messages\nJul 30 05:13:56 anacron: anacron startup succeeded\nJul 30 05:13:56 atd: atd startup succeeded\nJul 30 05:13:57 messagebus: messagebus startup succeeded\nJul 30 05:13:57 cups-config-daemon: cups-config-daemon startup succeeded\nJul 30 05:13:58 haldaemon: haldaemon startup succeeded\nJul 30 05:14:00 fstab-sync[3560]: removed all generated mount points\nJul 30 05:14:01 fstab-sync[3628]: added mount point /media/cdrom for...\nJul 30 05:14:01 fstab-sync[3646]: added mount point /media/floppy for...\nJul 30 05:16:46 sshd(pam_unix)[3662]: session opened for user paul by... \nJul 30 06:06:37 su(pam_unix)[3904]: session opened for user root by paul\n</code></pre>"},{"location":"file_system_tree/#varcache","title":"/var/cache","text":"<p>The <code>/var/cache</code> directory can contain <code>cache data</code> for several applications.</p> <pre><code>paul@ubu1010:~$ ls /var/cache/\napt      dictionaries-common    gdm       man        software-center\nbinfmts  flashplugin-installer  hald      pm-utils\ncups     fontconfig             jockey    pppconfig\ndebconf  fonts                  ldconfig  samba\n</code></pre>"},{"location":"file_system_tree/#varspool","title":"/var/spool","text":"<p>The <code>/var/spool</code> directory typically contains spool directories for <code>mail</code> and <code>cron</code>, but also serves as a parent directory for other spool files (for example print spool files).</p>"},{"location":"file_system_tree/#varlib","title":"/var/lib","text":"<p>The <code>/var/lib</code> directory contains application state information.</p> <p>Red Hat Enterprise Linux for example keeps files pertaining to <code>rpm</code> in <code>/var/lib/rpm/</code>.</p>"},{"location":"file_system_tree/#var","title":"/var/...","text":"<p><code>/var</code> also contains Process ID files in <code>/var/run</code> (soon to be replaced with <code>/run</code>) and temporary files that survive a reboot in <code>/var/tmp</code> and information about file locks in <code>/var/lock</code>. There will be more examples of <code>/var</code> usage further in this book.</p>"},{"location":"file_system_tree/#practice-file-system-tree","title":"practice: file system tree","text":"<p>1. Does the file <code>/bin/cat</code> exist ? What about <code>/bin/dd</code> and <code>/bin/echo</code>. What is the type of these files ?</p> <p>2. What is the size of the Linux kernel file(s) (vmlinu*) in <code>/boot</code> ?</p> <p>3. Create a directory \\~/test. Then issue the following commands:</p> <pre><code>cd ~/test\n\ndd if=/dev/zero of=zeroes.txt count=1 bs=100\n\nod zeroes.txt\n</code></pre> <p><code>dd</code> will copy one times (count=1) a block of size 100 bytes (bs=100) from the file <code>/dev/zero</code> to \\~/test/zeroes.txt. Can you describe the functionality of <code>/dev/zero</code> ?</p> <p>4. Now issue the following command:</p> <pre><code>dd if=/dev/random of=random.txt count=1 bs=100 ; od random.txt\n</code></pre> <p><code>dd</code> will copy one times (count=1) a block of size 100 bytes (bs=100) from the file <code>/dev/random</code> to \\~/test/random.txt. Can you describe the functionality of <code>/dev/random</code> ?</p> <p>5. Issue the following two commands, and look at the first character of each output line.</p> <pre><code>ls -l /dev/sd* /dev/hd*\n\nls -l /dev/tty* /dev/input/mou*\n</code></pre> <p>The first ls will show block(b) devices, the second ls shows character(c) devices. Can you tell the difference between block and character devices ?</p> <p>6. Use cat to display <code>/etc/hosts</code> and <code>/etc/resolv.conf</code>. What is your idea about the purpose of these files ?</p> <p>7. Are there any files in <code>/etc/skel/</code> ? Check also for hidden files.</p> <p>8. Display <code>/proc/cpuinfo</code>. On what architecture is your Linux running ?</p> <p>9. Display <code>/proc/interrupts</code>. What is the size of this file ? Where is this file stored ?</p> <p>10. Can you enter the <code>/root</code> directory ? Are there (hidden) files ?</p> <p>11. Are ifconfig, fdisk, parted, shutdown and grub-install present in <code>/sbin</code> ? Why are these binaries in <code>/sbin</code> and not in <code>/bin</code> ?</p> <p>12. Is <code>/var/log</code> a file or a directory ? What about <code>/var/spool</code> ?</p> <p>13. Open two command prompts (Ctrl-Shift-T in gnome-terminal) or terminals (Ctrl-Alt-F1, Ctrl-Alt-F2, ...) and issue the <code>who am i</code> in both. Then try to echo a word from one terminal to the other.</p> <p>14. Read the man page of <code>random</code> and explain the difference between <code>/dev/random</code> and <code>/dev/urandom</code>.</p>"},{"location":"file_system_tree/#solution-file-system-tree","title":"solution: file system tree","text":"<p>1. Does the file <code>/bin/cat</code> exist ? What about <code>/bin/dd</code> and <code>/bin/echo</code>. What is the type of these files ?</p> <pre><code>ls /bin/cat ; file /bin/cat\n\nls /bin/dd ; file /bin/dd\n\nls /bin/echo ; file /bin/echo\n</code></pre> <p>2. What is the size of the Linux kernel file(s) (vmlinu*) in <code>/boot</code> ?</p> <pre><code>ls -lh /boot/vm*\n</code></pre> <p>3. Create a directory \\~/test. Then issue the following commands:</p> <pre><code>cd ~/test\n\ndd if=/dev/zero of=zeroes.txt count=1 bs=100\n\nod zeroes.txt\n</code></pre> <p><code>dd</code> will copy one times (count=1) a block of size 100 bytes (bs=100) from the file <code>/dev/zero</code> to \\~/test/zeroes.txt. Can you describe the functionality of <code>/dev/zero</code> ?</p> <p><code>/dev/zero</code> is a Linux special device. It can be considered a source of zeroes. You cannot send something to <code>/dev/zero</code>, but you can read zeroes from it.</p> <p>4. Now issue the following command:</p> <pre><code>dd if=/dev/random of=random.txt count=1 bs=100 ; od random.txt\n</code></pre> <p><code>dd</code> will copy one times (count=1) a block of size 100 bytes (bs=100) from the file <code>/dev/random</code> to \\~/test/random.txt. Can you describe the functionality of <code>/dev/random</code> ?</p> <p><code>/dev/random</code> acts as a <code>random number generator</code> on your Linux machine.</p> <p>5. Issue the following two commands, and look at the first character of each output line.</p> <pre><code>ls -l /dev/sd* /dev/hd*\n\nls -l /dev/tty* /dev/input/mou*\n</code></pre> <p>The first ls will show block(b) devices, the second ls shows character(c) devices. Can you tell the difference between block and character devices ?</p> <p>Block devices are always written to (or read from) in blocks. For hard disks, blocks of 512 bytes are common. Character devices act as a stream of characters (or bytes). Mouse and keyboard are typical character devices.</p> <p>6. Use cat to display <code>/etc/hosts</code> and <code>/etc/resolv.conf</code>. What is your idea about the purpose of these files ?</p> <pre><code>/etc/hosts/etc/hosts contains hostnames with their ip address\n\n/etc/resolv.conf/etc/resolv.conf should contain the ip address of a DNS name server.\n</code></pre> <p>7. Are there any files in <code>/etc/skel/</code> ? Check also for hidden files.</p> <pre><code>Issue \"ls -al /etc/skel/\". Yes, there should be hidden files there.\n</code></pre> <p>8. Display <code>/proc/cpuinfo</code>. On what architecture is your Linux running ?</p> <pre><code>The file should contain at least one line with Intel or other cpu.\n</code></pre> <p>9. Display <code>/proc/interrupts</code>. What is the size of this file ? Where is this file stored ?</p> <p>The size is zero, yet the file contains data. It is not stored anywhere because /proc is a virtual file system that allows you to talk with the kernel. (If you answered \\\"stored in RAM-memory, that is also correct...).</p> <p>10. Can you enter the <code>/root</code> directory ? Are there (hidden) files ?</p> <pre><code>Try \"cd /root\". The /root directory is not accessible for normal users on most modern Linux systems.\n</code></pre> <p>11. Are ifconfig, fdisk, parted, shutdown and grub-install present in <code>/sbin</code> ? Why are these binaries in <code>/sbin</code> and not in /bin ?</p> <pre><code>Because those files are only meant for system administrators.\n</code></pre> <p>12. Is <code>/var/log</code> a file or a directory ? What about <code>/var/spool</code> ?</p> <pre><code>Both are directories.\n</code></pre> <p>13. Open two command prompts (Ctrl-Shift-T in gnome-terminal) or terminals (Ctrl-Alt-F1, Ctrl-Alt-F2, ...) and issue the <code>who am i</code> in both. Then try to echo a word from one terminal to the other.</p> <pre><code>tty-terminal: echo Hello &gt; /dev/tty1\n\npts-terminal: echo Hello &gt; /dev/pts/1\n</code></pre> <p>14. Read the man page of <code>random</code> and explain the difference between <code>/dev/random</code> and <code>/dev/urandom</code>.</p> <pre><code>man 4 random\n</code></pre>"},{"location":"filters/","title":"filters","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>Commands that are created to be used with a <code>pipe</code> are often called <code>filters</code>. These <code>filters</code> are very small programs that do one specific thing very efficiently. They can be used as <code>building blocks</code>.</p> <p>This chapter will introduce you to the most common <code>filters</code>. The combination of simple commands and filters in a long <code>pipe</code> allows you to design elegant solutions.</p>"},{"location":"filters/#cat","title":"cat","text":"<p>When between two <code>pipes</code>, the <code>cat</code> command does nothing (except putting <code>stdin</code> on <code>stdout</code>).</p> <pre><code>[paul@RHEL8b pipes]$ tac count.txt | cat | cat | cat | cat | cat\nfive\nfour\nthree\ntwo\none\n[paul@RHEL8b pipes]$\n</code></pre>"},{"location":"filters/#tee","title":"tee","text":"<p>Writing long <code>pipes</code> in Unix is fun, but sometimes you may want intermediate results. This is were <code>tee</code> comes in handy. The <code>tee</code> filter puts <code>stdin</code> on <code>stdout</code> and also into a file. So <code>tee</code> is almost the same as <code>cat</code>, except that it has two identical outputs.</p> <pre><code>[paul@RHEL8b pipes]$ tac count.txt | tee temp.txt | tac\none\ntwo\nthree\nfour\nfive\n[paul@RHEL8b pipes]$ cat temp.txt \nfive\nfour\nthree\ntwo\none\n[paul@RHEL8b pipes]$\n</code></pre>"},{"location":"filters/#grep","title":"grep","text":"<p>The <code>grep</code> filter is famous among Unix users. The most common use of <code>grep</code> is to filter lines of text containing (or not containing) a certain string.</p> <pre><code>[paul@RHEL8b pipes]$ cat tennis.txt \nAmelie Mauresmo, Fra\nKim Clijsters, BEL\nJustine Henin, Bel\nSerena Williams, usa\nVenus Williams, USA\n[paul@RHEL8b pipes]$ cat tennis.txt | grep Williams\nSerena Williams, usa\nVenus Williams, USA\n</code></pre> <p>You can write this without the cat.</p> <pre><code>[paul@RHEL8b pipes]$ grep Williams tennis.txt \nSerena Williams, usa\nVenus Williams, USA\n</code></pre> <p>One of the most useful options of grep is <code>grep -i</code> which filters in a case insensitive way.</p> <pre><code>[paul@RHEL8b pipes]$ grep Bel tennis.txt \nJustine Henin, Bel\n[paul@RHEL8b pipes]$ grep -i Bel tennis.txt \nKim Clijsters, BEL\nJustine Henin, Bel\n[paul@RHEL8b pipes]$\n</code></pre> <p>Another very useful option is <code>grep -v</code> which outputs lines not matching the string.</p> <pre><code>[paul@RHEL8b pipes]$ grep -v Fra tennis.txt \nKim Clijsters, BEL\nJustine Henin, Bel\nSerena Williams, usa\nVenus Williams, USA\n[paul@RHEL8b pipes]$\n</code></pre> <p>And of course, both options can be combined to filter all lines not containing a case insensitive string.</p> <pre><code>[paul@RHEL8b pipes]$ grep -vi usa tennis.txt \nAmelie Mauresmo, Fra\nKim Clijsters, BEL\nJustine Henin, Bel\n[paul@RHEL8b pipes]$\n</code></pre> <p>With <code>grep -A1</code> one line <code>after</code> the result is also displayed.</p> <pre><code>paul@debian10:~/pipes$ grep -A1 Henin tennis.txt \nJustine Henin, Bel\nSerena Williams, usa\n</code></pre> <p>With <code>grep -B1</code> one line <code>before</code> the result is also displayed.</p> <pre><code>paul@debian10:~/pipes$ grep -B1 Henin tennis.txt \nKim Clijsters, BEL\nJustine Henin, Bel\n</code></pre> <p>With <code>grep -C1</code> (context) one line <code>before</code> and one <code>after</code> are also displayed. All three options (A,B, and C) can display any number of lines (using e.g. A2, B4 or C20).</p> <pre><code>paul@debian10:~/pipes$ grep -C1 Henin tennis.txt \nKim Clijsters, BEL\nJustine Henin, Bel\nSerena Williams, usa\n</code></pre>"},{"location":"filters/#cut","title":"cut","text":"<p>The <code>cut</code> filter can select columns from files, depending on a delimiter or a count of bytes. The screenshot below uses <code>cut</code> to filter for the username and userid in the <code>/etc/passwd</code> file. It uses the colon as a delimiter, and selects fields 1 and 3.</p> <pre><code>[[paul@RHEL8b pipes]$ cut -d: -f1,3 /etc/passwd | tail -4 \nFigo:510\nPfaff:511\nHarry:516\nHermione:517\n[paul@RHEL8b pipes]$\n</code></pre> <p>When using a space as the delimiter for <code>cut</code>, you have to quote the space.</p> <pre><code>[paul@RHEL8b pipes]$ cut -d\" \" -f1 tennis.txt \nAmelie\nKim\nJustine\nSerena\nVenus\n[paul@RHEL8b pipes]$\n</code></pre> <p>This example uses <code>cut</code> to display the second to the seventh character of <code>/etc/passwd</code>.</p> <pre><code>[paul@RHEL8b pipes]$ cut -c2-7 /etc/passwd | tail -4\nigo:x:\nfaff:x\narry:x\nermion\n[paul@RHEL8b pipes]$\n</code></pre>"},{"location":"filters/#tr","title":"tr","text":"<p>You can translate characters with <code>tr</code>. The screenshot shows the translation of all occurrences of e to E.</p> <pre><code>[paul@RHEL8b pipes]$ cat tennis.txt | tr 'e' 'E'\nAmEliE MaurEsmo, Fra\nKim ClijstErs, BEL\nJustinE HEnin, BEl\nSErEna Williams, usa\nVEnus Williams, USA\n</code></pre> <p>Here we set all letters to uppercase by defining two ranges.</p> <pre><code>[paul@RHEL8b pipes]$ cat tennis.txt | tr 'a-z' 'A-Z'\nAMELIE MAURESMO, FRA\nKIM CLIJSTERS, BEL\nJUSTINE HENIN, BEL\nSERENA WILLIAMS, USA\nVENUS WILLIAMS, USA\n[paul@RHEL8b pipes]$\n</code></pre> <p>Here we translate all newlines to spaces.</p> <pre><code>[paul@RHEL8b pipes]$ cat count.txt \none\ntwo\nthree\nfour\nfive\n[paul@RHEL8b pipes]$ cat count.txt | tr '\\n' ' '\none two three four five [paul@RHEL8b pipes]$\n</code></pre> <p>The <code>tr -s</code> filter can also be used to squeeze multiple occurrences of a character to one.</p> <pre><code>[paul@RHEL8b pipes]$ cat spaces.txt \none    two        three\n     four   five  six\n[paul@RHEL8b pipes]$ cat spaces.txt | tr -s ' '\none two three\n four five six\n[paul@RHEL8b pipes]$\n</code></pre> <p>You can also use <code>tr</code> to \\'encrypt\\' texts with <code>rot13</code>.</p> <pre><code>[paul@RHEL8b pipes]$ cat count.txt | tr 'a-z' 'nopqrstuvwxyzabcdefghijklm'\nbar\ngjb\nguerr\nsbhe\nsvir\n[paul@RHEL8b pipes]$ cat count.txt | tr 'a-z' 'n-za-m'\nbar\ngjb\nguerr\nsbhe\nsvir\n[paul@RHEL8b pipes]$\n</code></pre> <p>This last example uses <code>tr -d</code> to delete characters.</p> <pre><code>paul@debian10:~/pipes$ cat tennis.txt | tr -d e\nAmli Maursmo, Fra\nKim Clijstrs, BEL\nJustin Hnin, Bl\nSrna Williams, usa\nVnus Williams, USA\n</code></pre>"},{"location":"filters/#wc","title":"wc","text":"<p>Counting words, lines and characters is easy with <code>wc</code>.</p> <pre><code>[paul@RHEL8b pipes]$ wc tennis.txt \n  5  15 100 tennis.txt\n[paul@RHEL8b pipes]$ wc -l tennis.txt \n5 tennis.txt\n[paul@RHEL8b pipes]$ wc -w tennis.txt \n15 tennis.txt\n[paul@RHEL8b pipes]$ wc -c tennis.txt \n100 tennis.txt\n[paul@RHEL8b pipes]$\n</code></pre>"},{"location":"filters/#sort","title":"sort","text":"<p>The <code>sort</code> filter will default to an alphabetical sort.</p> <pre><code>paul@debian10:~/pipes$ cat music.txt \nQueen\nBrel\nLed Zeppelin\nAbba\npaul@debian10:~/pipes$ sort music.txt \nAbba\nBrel\nLed Zeppelin\nQueen\n</code></pre> <p>But the <code>sort</code> filter has many options to tweak its usage. This example shows sorting different columns (column 1 or column 2).</p> <pre><code>[paul@RHEL8b pipes]$ sort -k1 country.txt \nBelgium, Brussels, 10\nFrance, Paris, 60\nGermany, Berlin, 100\nIran, Teheran, 70\nItaly, Rome, 50\n[paul@RHEL8b pipes]$ sort -k2 country.txt \nGermany, Berlin, 100\nBelgium, Brussels, 10\nFrance, Paris, 60\nItaly, Rome, 50\nIran, Teheran, 70\n</code></pre> <p>The screenshot below shows the difference between an alphabetical sort and a numerical sort (both on the third column).</p> <pre><code>[paul@RHEL8b pipes]$ sort -k3 country.txt \nBelgium, Brussels, 10\nGermany, Berlin, 100\nItaly, Rome, 50\nFrance, Paris, 60\nIran, Teheran, 70\n[paul@RHEL8b pipes]$ sort -n -k3 country.txt \nBelgium, Brussels, 10\nItaly, Rome, 50\nFrance, Paris, 60\nIran, Teheran, 70\nGermany, Berlin, 100\n</code></pre>"},{"location":"filters/#uniq","title":"uniq","text":"<p>With <code>uniq</code> you can remove duplicates from a <code>sorted list</code>.</p> <pre><code>paul@debian10:~/pipes$ cat music.txt \nQueen\nBrel\nQueen\nAbba\npaul@debian10:~/pipes$ sort music.txt \nAbba\nBrel\nQueen\nQueen\npaul@debian10:~/pipes$ sort music.txt |uniq\nAbba\nBrel\nQueen\n</code></pre> <p><code>uniq</code> can also count occurrences with the <code>-c</code> option.</p> <pre><code>paul@debian10:~/pipes$ sort music.txt |uniq -c\n      1 Abba\n      1 Brel\n      2 Queen\n</code></pre>"},{"location":"filters/#comm","title":"comm","text":"<p>Comparing streams (or files) can be done with the <code>comm</code>. By default <code>comm</code> will output three columns. In this example, Abba, Cure and Queen are in both lists, Bowie and Sweet are only in the first file, Turner is only in the second.</p> <pre><code>paul@debian10:~/pipes$ cat &gt; list1.txt\nAbba\nBowie\nCure\nQueen\nSweet\npaul@debian10:~/pipes$ cat &gt; list2.txt\nAbba\nCure\nQueen\nTurner\npaul@debian10:~/pipes$ comm list1.txt list2.txt \n                Abba\nBowie\n                Cure\n                Queen\nSweet\n        Turner\n</code></pre> <p>The output of <code>comm</code> can be easier to read when outputting only a single column. The digits point out which output columns should not be displayed.</p> <pre><code>paul@debian10:~/pipes$ comm -12 list1.txt list2.txt \nAbba\nCure\nQueen\npaul@debian10:~/pipes$ comm -13 list1.txt list2.txt \nTurner\npaul@debian10:~/pipes$ comm -23 list1.txt list2.txt \nBowie\nSweet\n</code></pre>"},{"location":"filters/#od","title":"od","text":"<p>European humans like to work with ascii characters, but computers store files in bytes. The example below creates a simple file, and then uses <code>od</code> to show the contents of the file in hexadecimal bytes</p> <pre><code>paul@laika:~/test$ cat &gt; text.txt\nabcdefg\n1234567\npaul@laika:~/test$ od -t x1 text.txt \n0000000 61 62 63 64 65 66 67 0a 31 32 33 34 35 36 37 0a\n0000020\n</code></pre> <p>The same file can also be displayed in octal bytes.</p> <pre><code>paul@laika:~/test$ od -b text.txt \n0000000 141 142 143 144 145 146 147 012 061 062 063 064 065 066 067 012\n0000020\n</code></pre> <p>And here is the file in ascii (or backslashed) characters.</p> <pre><code>paul@laika:~/test$ od -c text.txt \n0000000   a   b   c   d   e   f   g  \\n   1   2   3   4   5   6   7  \\n\n0000020\n</code></pre>"},{"location":"filters/#sed","title":"sed","text":"<p>The <code>s</code>tream <code>ed</code>itor <code>sed</code> can perform editing functions in the stream, using <code>regular expressions</code>.</p> <pre><code>paul@debian10:~/pipes$ echo level5 | sed 's/5/42/'\nlevel42\npaul@debian10:~/pipes$ echo level5 | sed 's/level/jump/'\njump5\n</code></pre> <p>Add <code>g</code> for global replacements (all occurrences of the string per line).</p> <pre><code>paul@debian10:~/pipes$ echo level5 level7 | sed 's/level/jump/'\njump5 level7\npaul@debian10:~/pipes$ echo level5 level7 | sed 's/level/jump/g'\njump5 jump7\n</code></pre> <p>With <code>d</code> you can remove lines from a stream containing a character.</p> <pre><code>paul@debian10:~/test42$ cat tennis.txt \nVenus Williams, USA\nMartina Hingis, SUI\nJustine Henin, BE\nSerena williams, USA\nKim Clijsters, BE\nYanina Wickmayer, BE\npaul@debian10:~/test42$ cat tennis.txt | sed '/BE/d'\nVenus Williams, USA\nMartina Hingis, SUI\nSerena williams, USA\n</code></pre>"},{"location":"filters/#pipe-examples","title":"pipe examples","text":""},{"location":"filters/#who-wc","title":"who | wc","text":"<p>How many users are logged  on to this system ?</p> <pre><code>[paul@RHEL8b pipes]$ who\nroot     tty1         Jul 25 10:50\npaul     pts/0        Jul 25 09:29 (laika)\nHarry    pts/1        Jul 25 12:26 (barry)\npaul     pts/2        Jul 25 12:26 (pasha)\n[paul@RHEL8b pipes]$ who | wc -l\n4\n</code></pre>"},{"location":"filters/#who-cut-sort","title":"who | cut | sort","text":"<p>Display a sorted  list of logged on users.</p> <pre><code>[paul@RHEL8b pipes]$ who | cut -d' ' -f1 | sort\nHarry\npaul\npaul\nroot\n</code></pre> <p>Display a sorted list of logged on users, but every user only once .</p> <pre><code>[paul@RHEL8b pipes]$ who | cut -d' ' -f1 | sort | uniq\nHarry\npaul\nroot\n</code></pre>"},{"location":"filters/#grep-cut","title":"grep | cut","text":"<p>Display a list of all bash <code>user accounts</code> on this computer. Users accounts are explained in detail later.</p> <pre><code>paul@debian10:~$ grep bash /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\npaul:x:1000:1000:paul,,,:/home/paul:/bin/bash\nserena:x:1001:1001::/home/serena:/bin/bash\npaul@debian10:~$ grep bash /etc/passwd | cut -d: -f1\nroot\npaul\nserena\n</code></pre>"},{"location":"filters/#practice-filters","title":"practice: filters","text":"<p>1. Put a sorted list of all bash users in bashusers.txt.</p> <p>2. Put a sorted list of all logged on users in onlineusers.txt.</p> <p>3. Make a list of all filenames in <code>/etc</code> that contain the string <code>conf</code> in their filename.</p> <p>4. Make a sorted list of all files in <code>/etc</code> that contain the case insensitive string <code>conf</code> in their filename.</p> <p>5. Look at the output of <code>/sbin/ifconfig</code>. Write a line that displays only ip address and the subnet mask.</p> <p>6. Write a line that removes all non-letters from a stream.</p> <p>7. Write a line that receives a text file, and outputs all words on a separate line.</p> <p>8. Write a spell checker on the command line. (There may be a dictionary in <code>/usr/share/dict/</code> .)</p>"},{"location":"filters/#solution-filters","title":"solution: filters","text":"<p>1. Put a sorted list of all bash users in bashusers.txt.</p> <pre><code>grep bash /etc/passwd | cut -d: -f1 | sort &gt; bashusers.txt\n</code></pre> <p>2. Put a sorted list of all logged on users in onlineusers.txt.</p> <pre><code>who | cut -d' ' -f1 | sort &gt; onlineusers.txt\n</code></pre> <p>3. Make a list of all filenames in <code>/etc</code> that contain the string <code>conf</code> in their filename.</p> <pre><code>ls /etc | grep conf\n</code></pre> <p>4. Make a sorted list of all files in <code>/etc</code> that contain the case insensitive string <code>conf</code> in their filename.</p> <pre><code>ls /etc | grep -i conf | sort\n</code></pre> <p>5. Look at the output of <code>/sbin/ifconfig</code>. Write a line that displays only ip address and the subnet mask.</p> <pre><code>/sbin/ifconfig | head -2 | grep 'inet ' | tr -s ' ' | cut -d' ' -f3,5\n</code></pre> <p>6. Write a line that removes all non-letters from a stream.</p> <pre><code>paul@deb106:~$ cat text\nThis is, yes really! , a text with ?&amp;* too many str$ange# characters ;-)\npaul@deb106:~$ cat text | tr -d ',!$?.*&amp;^%#@;()-'\nThis is yes really  a text with  too many strange characters\n</code></pre> <p>7. Write a line that receives a text file, and outputs all words on a separate line.</p> <pre><code>paul@deb106:~$ cat text2 \nit is very cold today without the sun\n\npaul@deb106:~$ cat text2 | tr ' ' '\\n'\nit\nis\nvery\ncold\ntoday\nwithout\nthe\nsun\n</code></pre> <p>8. Write a spell checker on the command line. (There may be a dictionary in <code>/usr/share/dict/</code> .)</p> <pre><code>paul@rhel ~$ echo \"The zun is shining today\" &gt; text\n\npaul@rhel ~$ cat &gt; DICT\nis\nshining\nsun\nthe\ntoday\n\npaul@rhel ~$ cat text | tr 'A-Z ' 'a-z\\n' | sort | uniq | comm -23 - DICT\nzun\n</code></pre> <p>You could also add the solution from question number 6 to remove non-letters, and <code>tr -s ' '</code> to remove redundant spaces.</p>"},{"location":"groups/","title":"groups","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>Users can be listed in <code>groups</code>. Groups allow you to set permissions on the group level instead of having to set permissions for every individual user.</p> <p>Every Unix or Linux distribution will have a graphical tool to manage groups. Novice users are advised to use this graphical tool. More experienced users can use command line tools to manage users, but be careful: Some distributions do not allow the mixed use of GUI and CLI tools to manage groups (YaST in Novell Suse). Senior administrators can edit the relevant files directly with <code>vi</code> or <code>vigr</code>.</p>"},{"location":"groups/#groupadd","title":"groupadd","text":"<p>Groups can be created with the <code>groupadd</code> command. The example below shows the creation of five (empty) groups.</p> <pre><code>root@laika:~# groupadd tennis\nroot@laika:~# groupadd football\nroot@laika:~# groupadd snooker\nroot@laika:~# groupadd formula1\nroot@laika:~# groupadd salsa\n</code></pre>"},{"location":"groups/#group-file","title":"group file","text":"<p>Users can be a member of several groups. Group membership is defined by the <code>/etc/group</code> file.</p> <pre><code>root@laika:~# tail -5 /etc/group\ntennis:x:1006:\nfootball:x:1007:\nsnooker:x:1008:\nformula1:x:1009:\nsalsa:x:1010:\nroot@laika:~#\n</code></pre> <p>The first field is the group\\'s name. The second field is the group\\'s (encrypted) password (can be empty). The third field is the group identification or <code>GID</code>. The fourth field is the list of members, these groups have no members.</p>"},{"location":"groups/#groups_1","title":"groups","text":"<p>A user can type the <code>groups</code> command to see a list of groups where the user belongs to.</p> <pre><code>[harry@RHEL8b ~]$ groups\nharry sports\n[harry@RHEL8b ~]$\n</code></pre>"},{"location":"groups/#usermod","title":"usermod","text":"<p>Group membership can be modified with the useradd or <code>usermod</code> command.</p> <pre><code>root@laika:~# usermod -a -G tennis inge\nroot@laika:~# usermod -a -G tennis katrien\nroot@laika:~# usermod -a -G salsa katrien\nroot@laika:~# usermod -a -G snooker sandra\nroot@laika:~# usermod -a -G formula1 annelies\nroot@laika:~# tail -5 /etc/group\ntennis:x:1006:inge,katrien\nfootball:x:1007:\nsnooker:x:1008:sandra\nformula1:x:1009:annelies\nsalsa:x:1010:katrien\nroot@laika:~#\n</code></pre> <p>Be careful when using <code>usermod</code> to add users to groups. By default, the <code>usermod</code> command will <code>remove</code> the user from every group of which he is a member if the group is not listed in the command! Using the <code>-a</code> (append) switch prevents this behaviour.</p>"},{"location":"groups/#groupmod","title":"groupmod","text":"<p>You can change the group name with the <code>groupmod</code> command.</p> <pre><code>root@laika:~# groupmod -n darts snooker \nroot@laika:~# tail -5 /etc/group\ntennis:x:1006:inge,katrien\nfootball:x:1007:\nformula1:x:1009:annelies\nsalsa:x:1010:katrien\ndarts:x:1008:sandra\n</code></pre>"},{"location":"groups/#groupdel","title":"groupdel","text":"<p>You can permanently remove a group with the <code>groupdel</code> command.</p> <pre><code>root@laika:~# groupdel tennis\nroot@laika:~#\n</code></pre>"},{"location":"groups/#gpasswd","title":"gpasswd","text":"<p>You can delegate control of group membership to another user with the <code>gpasswd</code> command. In the example below we delegate permissions to add and remove group members to serena for the sports group. Then we <code>su</code> to serena and add harry to the sports group.</p> <pre><code>[root@RHEL8b ~]# gpasswd -A serena sports\n[root@RHEL8b ~]# su - serena\n[serena@RHEL8b ~]$ id harry\nuid=516(harry) gid=520(harry) groups=520(harry)\n[serena@RHEL8b ~]$ gpasswd -a harry sports\nAdding user harry to group sports\n[serena@RHEL8b ~]$ id harry\nuid=516(harry) gid=520(harry) groups=520(harry),522(sports)\n[serena@RHEL8b ~]$ tail -1 /etc/group\nsports:x:522:serena,venus,harry\n[serena@RHEL8b ~]$\n</code></pre> <p>Group administrators do not have to be a member of the group. They can remove themselves from a group, but this does not influence their ability to add or remove members.</p> <pre><code>[serena@RHEL8b ~]$ gpasswd -d serena sports\nRemoving user serena from group sports\n[serena@RHEL8b ~]$ exit\n</code></pre> <p>Information about group administrators is kept in the <code>/etc/gshadow</code> file.</p> <pre><code>[root@RHEL8b ~]# tail -1 /etc/gshadow\nsports:!:serena:venus,harry\n[root@RHEL8b ~]#\n</code></pre> <p>To remove all group administrators from a group, use the <code>gpasswd</code> command to set an empty administrators list.</p> <pre><code>[root@RHEL8b ~]# gpasswd -A \"\" sports\n</code></pre>"},{"location":"groups/#newgrp","title":"newgrp","text":"<p>You can start a <code>child shell</code> with a new temporary <code>primary group</code> using the <code>newgrp</code> command.</p> <pre><code>root@rhel65:~# mkdir prigroup\nroot@rhel65:~# cd prigroup/\nroot@rhel65:~/prigroup# touch standard.txt\nroot@rhel65:~/prigroup# ls -l\ntotal 0\n-rw-r--r--. 1 root root 0 Apr 13 17:49 standard.txt\nroot@rhel65:~/prigroup# echo $SHLVL\n1\nroot@rhel65:~/prigroup# newgrp tennis\nroot@rhel65:~/prigroup# echo $SHLVL\n2\nroot@rhel65:~/prigroup# touch newgrp.txt\nroot@rhel65:~/prigroup# ls -l\ntotal 0\n-rw-r--r--. 1 root tennis 0 Apr 13 17:49 newgrp.txt\n-rw-r--r--. 1 root root   0 Apr 13 17:49 standard.txt\nroot@rhel65:~/prigroup# exit\nexit\nroot@rhel65:~/prigroup#\n</code></pre>"},{"location":"groups/#vigr","title":"vigr","text":"<p>Similar to vipw, the <code>vigr</code> command can be used to manually edit the <code>/etc/group</code> file, since it will do proper locking of the file. Only experienced senior administrators should use <code>vi</code> or <code>vigr</code> to manage groups.</p>"},{"location":"groups/#practice-groups","title":"practice: groups","text":"<p>1. Create the groups tennis, football and sports.</p> <p>2. In one command, make venus a member of tennis and sports.</p> <p>3. Rename the football group to foot.</p> <p>4. Use vi to add serena to the tennis group.</p> <p>5. Use the id command to verify that serena is a member of tennis.</p> <p>6. Make someone responsible for managing group membership of foot and sports. Test that it works.</p>"},{"location":"groups/#solution-groups","title":"solution: groups","text":"<p>1. Create the groups tennis, football and sports.</p> <pre><code>groupadd tennis ; groupadd football ; groupadd sports\n</code></pre> <p>2. In one command, make venus a member of tennis and sports.</p> <pre><code>usermod -a -G tennis,sports venus\n</code></pre> <p>3. Rename the football group to foot.</p> <pre><code>groupmod -n foot football\n</code></pre> <p>4. Use vi to add serena to the tennis group.</p> <pre><code>vi /etc/group\n</code></pre> <p>5. Use the id command to verify that serena is a member of tennis.</p> <pre><code>id (and after logoff logon serena should be member)\n</code></pre> <p>6. Make someone responsible for managing group membership of foot and sports. Test that it works.</p> <pre><code>gpasswd -A (to make manager)\n\ngpasswd -a (to add member)\n</code></pre>"},{"location":"hardware/","title":"hardware","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p>"},{"location":"hardware/#buses","title":"buses","text":""},{"location":"hardware/#about-buses","title":"about buses","text":"<p>Hardware components communicate with the <code>Central Processing Unit</code> or <code>cpu</code> over a <code>bus</code>. The most common buses today are <code>usb</code>, <code>pci</code>, <code>agp</code>, <code>pci-express</code> and <code>pcmcia</code> aka <code>pc-card</code>. These are all <code>Plag and Play</code> buses.</p> <p>Older <code>x86</code> computers often had <code>isa</code> buses, which can be configured using <code>jumpers</code> or <code>dip switches</code>.</p>"},{"location":"hardware/#procbus","title":"/proc/bus","text":"<p>To list the buses recognised by the Linux kernel on your computer, look at the contents of the <code>/proc/bus/</code> directory (screenshot from Ubuntu 7.04 and RHEL4u4 below).</p> <pre><code>root@laika:~# ls /proc/bus/\ninput  pccard  pci  usb\n\n\n[root@RHEL8b ~]# ls /proc/bus/\ninput  pci  usb\n</code></pre> <p>Can you guess which of these two screenshots was taken on a laptop ?</p>"},{"location":"hardware/#usrsbinlsusb","title":"/usr/sbin/lsusb","text":"<p>To list all the usb devices connected to your system, you could read the contents of <code>/proc/bus/usb/devices</code> (if it exists) or you could use the more readable output of <code>lsusb</code>, which is executed here on a SPARC system with Ubuntu.</p> <pre><code>root@shaka:~# lsusb\nBus 001 Device 002: ID 0430:0100 Sun Microsystems, Inc. 3-button Mouse\nBus 001 Device 003: ID 0430:0005 Sun Microsystems, Inc. Type 6 Keyboard\nBus 001 Device 001: ID 04b0:0136 Nikon Corp. Coolpix 7900 (storage)\nroot@shaka:~#\n</code></pre>"},{"location":"hardware/#varlibusbutilsusbids","title":"/var/lib/usbutils/usb.ids","text":"<p>The <code>/var/lib/usbutils/usb.ids</code> file contains a gzipped list of all known usb devices.</p> <pre><code>paul@barry:~$ zmore /var/lib/usbutils/usb.ids | head\n------&gt; /var/lib/usbutils/usb.ids &lt;------\n#\n#   List of USB ID's\n#\n#   Maintained by Vojtech Pavlik &lt;vojtech@suse.cz&gt;\n#   If you have any new entries, send them to the maintainer.\n#   The latest version can be obtained from\n#       http://www.linux-usb.org/usb.ids\n#\n# $Id: usb.ids,v 1.225 2006/07/13 04:18:02 dbrownell Exp $\n</code></pre>"},{"location":"hardware/#usrsbinlspci","title":"/usr/sbin/lspci","text":"<p>To get a list of all pci devices connected, you could take a look at <code>/proc/bus/pci</code> or run <code>lspci</code> (partial output below).</p> <pre><code>paul@laika:~$ lspci\n...\n00:06.0 FireWire (IEEE 1394): Texas Instruments TSB43AB22/A IEEE-139...\n00:08.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL-816...\n00:09.0 Multimedia controller: Philips Semiconductors SAA7133/SAA713...\n00:0a.0 Network controller: RaLink RT2500 802.11g Cardbus/mini-PCI \n00:0f.0 RAID bus controller: VIA Technologies, Inc. VIA VT6420 SATA ...\n00:0f.1 IDE interface: VIA Technologies, Inc. VT82C586A/B/VT82C686/A...\n00:10.0 USB Controller: VIA Technologies, Inc. VT82xxxxx UHCI USB 1....\n00:10.1 USB Controller: VIA Technologies, Inc. VT82xxxxx UHCI USB 1....\n...\n</code></pre>"},{"location":"hardware/#interrupts","title":"interrupts","text":""},{"location":"hardware/#about-interrupts","title":"about interrupts","text":"<p>An <code>interrupt request</code> or <code>IRQ</code> is a request from a device to the CPU. A device raises an interrupt when it requires the attention of the CPU (could be because the device has data ready to be read by the CPU).</p> <p>Since the introduction of pci, irq\\'s can be shared among devices.</p> <p>Interrupt 0 is always reserved for the timer, interrupt 1 for the keyboard. IRQ 2 is used as a channel for IRQ\\'s 8 to 15, and thus is the same as IRQ 9.</p>"},{"location":"hardware/#procinterrupts","title":"/proc/interrupts","text":"<p>You can see a listing of interrupts on your system in <code>/proc/interrupts</code>.</p> <pre><code>paul@laika:~$ cat /proc/interrupts \n      CPU0     CPU1       \n0:  1320048     555  IO-APIC-edge      timer\n1:    10224       7  IO-APIC-edge      i8042\n7:        0       0  IO-APIC-edge      parport0\n8:        2       1  IO-APIC-edge      rtc\n10:     3062     21  IO-APIC-fasteoi   acpi\n12:      131      2  IO-APIC-edge      i8042\n15:    47073      0  IO-APIC-edge      ide1\n18:        0      1  IO-APIC-fasteoi   yenta\n19:    31056      1  IO-APIC-fasteoi   libata, ohci1394\n20:    19042      1  IO-APIC-fasteoi   eth0\n21:    44052      1  IO-APIC-fasteoi   uhci_hcd:usb1, uhci_hcd:usb2,...\n22:   188352      1  IO-APIC-fasteoi   ra0\n23:   632444      1  IO-APIC-fasteoi   nvidia\n24:     1585      1  IO-APIC-fasteoi   VIA82XX-MODEM, VIA8237\n</code></pre>"},{"location":"hardware/#dmesg","title":"dmesg","text":"<p>You can also use <code>dmesg</code> to find irq\\'s allocated at boot time.</p> <pre><code>paul@laika:~$ dmesg | grep \"irq 1[45]\"\n[ 28.930069] ata3: PATA max UDMA/133 cmd 0x1f0 ctl 0x3f6 bmdma 0x2090 irq 14\n[ 28.930071] ata4: PATA max UDMA/133 cmd 0x170 ctl 0x376 bmdma 0x2098 irq 15\n</code></pre>"},{"location":"hardware/#io-ports","title":"io ports","text":""},{"location":"hardware/#about-io-ports","title":"about io ports","text":"<p>Communication in the other direction, from CPU to device, happens through <code>IO ports</code>. The CPU writes data or control codes to the IO port of the device. But this is not only a one way communication, the CPU can also use a device\\'s IO port to read status information about the device. Unlike interrupts, ports cannot be shared!</p>"},{"location":"hardware/#procioports","title":"/proc/ioports","text":"<p>You can see a listing of your system\\'s IO ports via <code>/proc/ioports</code>.</p> <pre><code>[root@RHEL8b ~]# cat /proc/ioports \n0000-001f : dma1\n0020-0021 : pic1\n0040-0043 : timer0\n0050-0053 : timer1\n0060-006f : keyboard\n0070-0077 : rtc\n0080-008f : dma page reg\n00a0-00a1 : pic2\n00c0-00df : dma2\n00f0-00ff : fpu\n0170-0177 : ide1\n02f8-02ff : serial\n...\n</code></pre>"},{"location":"hardware/#dma","title":"dma","text":""},{"location":"hardware/#about-dma","title":"about dma","text":"<p>A device that needs a lot of data, interrupts and ports can pose a heavy load on the cpu. With <code>dma</code> or <code>Direct Memory Access</code> a device can gain (temporary) access to a specific range of the <code>ram</code> memory.</p>"},{"location":"hardware/#procdma","title":"/proc/dma","text":"<p>Looking at <code>/proc/dma</code> might not give you the information that you want, since it only contains currently assigned <code>dma</code> channels for <code>isa</code> devices.</p> <pre><code>root@laika:~# cat /proc/dma \n1: parport0\n4: cascade\n</code></pre> <p><code>pci</code> devices that are using dma are not listed in <code>/proc/dma</code>, in this case <code>dmesg</code> can be useful. The screenshot below shows that during boot the parallel port received dma channel 1, and the Infrared port received dma channel 3.</p> <pre><code>root@laika:~# dmesg | egrep -C 1 'dma 1|dma 3'\n[   20.576000] parport: PnPBIOS parport detected.\n[   20.580000] parport0: PC-style at 0x378 (0x778), irq 7, dma 1...\n[   20.764000] irda_init()\n--\n[   21.204000] pnp: Device 00:0b activated.\n[   21.204000] nsc_ircc_pnp_probe() : From PnP, found firbase 0x2F8...\n[   21.204000] nsc-ircc, chip-&gt;init\n</code></pre>"},{"location":"installing_centos7/","title":"installing CentOS 8","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This module is a step by step demonstration of an actual installation of <code>CentOS 8</code>.</p> <p>We start by downloading an image from the internet and install <code>CentOS 8</code> as a virtual machine in <code>Virtualbox</code>. We will also do some basic configuration of this new machine like setting an <code>ip address</code> and fixing a <code>hostname</code>.</p> <p>This procedure should be very similar for other versions of <code>CentOS</code>, and also for distributions like <code>RHEL</code> (Red Hat Enterprise Linux) or <code>Fedora</code>. This procedure can also be helpful if you are using another virtualization solution.</p>"},{"location":"installing_centos7/#download-a-centos-7-image","title":"download a CentOS 7 image","text":"<p>This demonstration uses a laptop computer with <code>Virtualbox</code> to install <code>CentOS 7</code> as a virtual machine. The first task is to download an <code>.iso</code> image of <code>CentOS 7</code>.</p> <p>The <code>CentOS 7</code> website looks like this today (November 2014). They change the look regularly, so it may look different when you visit it.</p> <p></p> <p>You can download a full DVD, which allows for an off line installation of a graphical <code>CentOS 7</code> desktop. You can select this because it should be easy and complete, and should get you started with a working <code>CentOS 7</code> virtual machine.</p> <p>But I clicked instead on \\'alternative downloads\\', selected <code>CentOS 7</code> and <code>x86_64</code> and ended up on a <code>mirror list</code>. Each mirror is a server that contains copies of <code>CentOS 7</code> media. I selected a Belgian mirror because I currently am in Belgium.</p> <p></p> <p>There is again the option for full DVD\\'s and more. This demonstration will use the <code>minimal</code> .iso file, because it is much smaller in size. The download takes a couple of minutes.</p> <p></p> <p>Verify the size of the file after download to make sure it is complete. Probably a right click on the file and selecting \\'properties\\' (if you use Windows or Mac OSX).</p> <p>I use Linux on the laptop already:</p> <pre><code>paul@debian8:~$ ls -lh CentOS-7.0-1406-x86_64-Minimal.iso\n-rw-r--r-- 1 paul paul 566M Nov  1 14:45 CentOS-7.0-1406-x86_64-Minimal.iso\n</code></pre> <p>Do not worry if you do no understand the above command. Just try to make sure that the size of this file is the same as the size that is mentioned on the <code>CentOS 7</code> website.</p>"},{"location":"installing_centos7/#virtualbox","title":"Virtualbox","text":"<p>This screenshot shows up when I start Virtualbox. I already have four virtual machines, you might have none.</p> <p></p> <p>Below are the steps for creating a new virtual machine. Start by clicking <code>New</code> and give your machine a name (I chose <code>server33</code>). Click <code>Next</code>.</p> <p></p> <p>A Linux computer without graphical interface will run fine on <code>half a gigabyte</code> of RAM.</p> <p></p> <p>A Linux virtual machine will need a <code>virtual hard drive</code>.</p> <p></p> <p>Any format will do for our purpose, so I left the default <code>vdi</code>.</p> <p></p> <p>The default <code>dynamically allocated</code> type will save disk space (until we fill the virtual disk up to 100 percent). It makes the virtual machine a bit slower than <code>fixed size</code>, but the <code>fixed size</code> speed improvement is not worth it for our purpose.</p> <p></p> <p>The name of the virtual disk file on the host computer will be <code>server33.vdi</code> in my case (I left it default and it uses the vm name). Also 16 GB should be enough to practice Linux. The file will stay much smaller than 16GB, unless you copy a lot of files to the virtual machine.</p> <p></p> <p>You should now be back to the start screen of <code>Virtualbox</code>. If all went well, then you should see the machine you just created in the list.</p> <p></p> <p>After finishing the setup, we go into the <code>Settings</code> of our virtual machine and attach the <code>.iso</code> file we downloaded before. Below is the default screenshot.</p> <p></p> <p>This is a screenshot with the <code>.iso</code> file properly attached.</p> <p></p>"},{"location":"installing_centos7/#centos-7-installing","title":"CentOS 7 installing","text":"<p>The screenshots below will show every step from starting the virtual machine for the first time (with the .iso file attached) until the first logon.</p> <p>You should see this when booting, otherwise verify the attachment of the .iso file form the previous steps. Select <code>Test this media and install CentOS 7</code>.</p> <p></p> <p>Carefully select the language in which you want your <code>CentOS</code>. I always install operating systems in English, even though my native language is not English.</p> <p>Also select the right keyboard, mine is a US qwerty, but yours may be different.</p> <p></p> <p>You should arrive at a summary page (with one or more warnings).</p> <p></p> <p>Start by configuring the network. During this demonstration I had a DHCP server running at 192.168.1.42, yours is probably different. Ask someone (a network administator ?) for help if this step fails.</p> <p></p> <p>Select your time zone, and activate <code>ntp</code>.</p> <p></p> <p>Choose a mirror that is close to you. If you can\\'t find a local mirror, then you can copy the one from this screenshot (it is a general <code>CentOS</code> mirror).</p> <p></p> <p>It can take a couple of seconds before the mirror is verified.</p> <p></p> <p>I did not select any software here (because I want to show it all in this training).</p> <p></p> <p>After configuring network, location, software and all, you should be back on this page. Make sure there are no warnings anymore (and that you made the correct choice everywhere).</p> <p></p> <p>You can enter a <code>root password</code> and create a <code>user account</code> while the installation is downloading from the internet. This is the longest step, it can take several minutes (or up to an hour if you have a slow internet connection).</p> <p></p> <p>If you see this, then the installation was successful.</p> <p>Time to reboot the computer and start <code>CentOS 7</code> for the first time.</p> <p></p> <p>This screen will appear briefly when the virtual machines starts. You don\\'t have to do anything.</p> <p></p> <p>After a couple of seconds, you should see a logon screen. This is called a <code>tty</code> or a <code>getty</code>. Here you can type <code>root</code> as username. The <code>login process</code> will then ask your password (nothing will appear on screen when you type your password).</p> <p></p> <p>And this is what it looks like after logon. You are logged on to your own Linux machine, very good.</p> <p></p> <p>All subsequent screenshots will be text only, no images anymore.</p> <p>For example this screenshot shows three commands being typed on my new CentOS 7 install.</p> <pre><code>[root@localhost ~]# who am i\nroot     pts/0        2014-11-01 22:14\n[root@localhost ~]# hostname\nlocalhost.localdomain\n[root@localhost ~]# date\nSat Nov  1 22:14:37 CET 2014\n</code></pre> <p>When using <code>ssh</code> the same commands will give this screenshot:</p> <pre><code>[root@localhost ~]# who am i\nroot     pts/0        2014-11-01 21:00 (192.168.1.35)\n[root@localhost ~]# hostname\nlocalhost.localdomain\n[root@localhost ~]# date\nSat Nov  1 22:10:04 CET 2014\n[root@localhost ~]#\n</code></pre> <p>If the last part is a bit too fast, take a look at the next topic <code>CentOS 7 first logon</code>.</p>"},{"location":"installing_centos7/#centos-7-first-logon","title":"CentOS 7 first logon","text":"<p>All you have to log on, after finishing the installation, is this screen in Virtualbox.</p> <p></p> <p>This is workable to learn Linux, and you will be able to practice a lot. But there are more ways to access your virtual machine, the next chapters discuss some of these and will also introduce some basic system configuration.</p>"},{"location":"installing_centos7/#setting-the-hostname","title":"setting the hostname","text":"<p>Setting the hostname is a simple as changing the <code>/etc/hostname</code> file. As you can see here, it is set to <code>localhost.localdomain</code> by default.</p> <pre><code>[root@localhost ~]# cat /etc/hostname\nlocalhost.localdomain\n</code></pre> <p>You could do <code>echo server33.netsec.local &gt; /etc/hostname</code> followed by a <code>reboot</code>. But there is also the new <code>CentOS 7</code> way of setting a new hostname.</p> <pre><code>[root@localhost ~]# nmtui\n</code></pre> <p>The above command will give you a menu to choose from with a <code>set system hostname</code> option. Using this <code>nmtui</code> option will edit the <code>/etc/hostname</code> file for you.</p> <pre><code>[root@localhost ~]# cat /etc/hostname\nserver33.netsec.local\n[root@localhost ~]# hostname\nserver33.netsec.local\n[root@localhost ~]# dnsdomainname\nnetsec.local\n</code></pre> <p>For some reason the documentation on the <code>centos.org</code> and <code>docs.redhat.com</code> websites tell you to also execute this command:</p> <pre><code>[root@localhost ~]# systemctl restart systemd-hostnamed\n</code></pre>"},{"location":"installing_centos7/#virtualbox-network-interface","title":"Virtualbox network interface","text":"<p>By default <code>Virtualbox</code> will connect your virtual machine over a <code>nat</code> interface. This will show up as a 10.0.2.15 (or similar).</p> <pre><code>[root@server33 ~]# ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast s\\\ntate UP qlen 1000\n    link/ether 08:00:27:1c:f5:ab brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic enp0s3\n       valid_lft 86399sec preferred_lft 86399sec\n    inet6 fe80::a00:27ff:fe1c:f5ab/64 scope link\n       valid_lft forever preferred_lft forever\n</code></pre> <p>You can change this to <code>bridge</code> (over your wi-fi or over the ethernet cable) and thus make it appear as if your virtual machine is directly on your local network (receiving an ip address from your real dhcp server).</p> <p></p> <p>You can make this change while the vm is running, provided that you execute this command:</p> <pre><code>[root@server33 ~]# systemctl restart network\n[root@server33 ~]# ip a s dev enp0s3\n2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast s\\\ntate UP qlen 1000\n    link/ether 08:00:27:1c:f5:ab brd ff:ff:ff:ff:ff:ff\n    inet 192.168.1.110/24 brd 192.168.1.255 scope global dynamic enp0s3\n       valid_lft 7199sec preferred_lft 7199sec\n    inet6 fe80::a00:27ff:fe1c:f5ab/64 scope link\n       valid_lft forever preferred_lft forever\n[root@server33 ~]#\n</code></pre>"},{"location":"installing_centos7/#configuring-the-network","title":"configuring the network","text":"<p>The new way of changing network configuration is through the <code>nmtui</code> tool. If you want to manually play with the files in <code>/etc/sysconfig/network-scripts</code> then you will first need to verify (and disable) <code>NetworkManager</code> on that interface.</p> <p>Verify whether an interface is controlled by <code>NetworkManager</code> using the <code>nmcli</code> command (connected means managed bu NM).</p> <pre><code>[root@server33 ~]# nmcli dev status\nDEVICE  TYPE      STATE      CONNECTION\nenp0s3  ethernet  connected  enp0s3\nlo      loopback  unmanaged  --\n</code></pre> <p>Disable <code>NetworkManager</code> on an interface (enp0s3 in this case):</p> <pre><code>echo 'NM_CONTROLLED=no' &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-enp0s3\n</code></pre> <p>You can restart the network without a reboot like this:</p> <pre><code>[root@server33 ~]# systemctl restart network\n</code></pre> <p>Also, forget <code>ifconfig</code> and instead use <code>ip a</code>.</p> <pre><code>[root@server33 ~]# ip a s dev enp0s3 | grep inet\n    inet 192.168.1.110/24 brd 192.168.1.255 scope global dynamic enp0s3\n    inet6 fe80::a00:27ff:fe1c:f5ab/64 scope link\n[root@server33 ~]#\n</code></pre>"},{"location":"installing_centos7/#adding-one-static-ip-address","title":"adding one static ip address","text":"<p>This example shows how to add one static ip address to your computer.</p> <pre><code>[root@server33 ~]# nmtui edit enp0s3\n</code></pre> <p>In this interface leave the IPv4 configuration to automatic, and add an ip address just below.</p> <pre><code>          IPv4 CONFIGURATION &lt;Automatic&gt;                         &lt;Hide&gt;\n          Addresses 10.104.33.32/16__________ &lt;Remove&gt;\n</code></pre> <p>Execute this command after exiting <code>nmtui</code>.</p> <pre><code>[root@server33 ~]# systemctl restart network\n</code></pre> <p>And verify with <code>ip</code> (not with <code>ifconfig</code>):</p> <pre><code>[root@server33 ~]# ip a s dev enp0s3 | grep inet\n    inet 192.168.1.110/24 brd 192.168.1.255 scope global dynamic enp0s3\n    inet 10.104.33.32/16 brd 10.104.255.255 scope global enp0s3\n    inet6 fe80::a00:27ff:fe1c:f5ab/64 scope link\n[root@server33 ~]#\n</code></pre>"},{"location":"installing_centos7/#package-management","title":"package management","text":"<p>Even with a network install, <code>CentOS 7</code> did not install the latest version of some packages. Luckily there is only one command to run (as root). This can take a while.</p> <pre><code>[root@server33 ~]# yum update\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: centos.weepeetelecom.be\n * extras: centos.weepeetelecom.be\n * updates: centos.weepeetelecom.be\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package NetworkManager.x86_64 1:0.9.9.1-13.git20140326.4dba720.el7 \\\nwill be updated\n... (output truncated)\n</code></pre> <p>You can also use <code>yum</code> to install one or more packages. Do not forget to run <code>yum update</code> from time to time.</p> <pre><code>[root@server33 ~]# yum update -y &amp;&amp; yum install vim -y\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: centos.weepeetelecom.be\n... (output truncated)\n</code></pre> <p>Refer to the package management chapter for more information on installing and removing packages.</p>"},{"location":"installing_centos7/#logon-from-linux-and-macosx","title":"logon from Linux and MacOSX","text":"<p>You can now open a terminal on Linux or MacOSX and use <code>ssh</code> to log on to your virtual machine.</p> <pre><code>paul@debian8:~$ ssh root@192.168.1.110\nroot@192.168.1.110's password:\nLast login: Sun Nov  2 11:53:57 2014\n[root@server33 ~]# hostname\nserver33.netsec.local\n[root@server33 ~]#\n</code></pre>"},{"location":"installing_centos7/#logon-from-ms-windows","title":"logon from MS Windows","text":"<p>There is no <code>ssh</code> installed on MS Windows, but you can download <code>putty.exe</code> from <code>http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html</code> (just Google it).</p> <p>Use <code>putty.exe</code> as shown in this screenshot (I saved the ip address by giving it a name \\'server33\\' and presing the \\'save\\' button).</p> <p></p> <p>The first time you will get a message about keys, accept this (this is explained in the ssh chapter).</p> <p></p> <p>Enter your userid (or root) and the correct password (nothing will appear on the screen when typing a password).</p> <p></p>"},{"location":"installing_debian8/","title":"installing Debian 8","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This module is a step by step demonstration of an actual installation of <code>Debian 8</code> (also known as <code>Jessie</code>).</p> <p>We start by downloading an image from the internet and install <code>Debian 8</code> as a virtual machine in <code>Virtualbox</code>. We will also do some basic configuration of this new machine like setting an <code>ip address</code> and fixing a <code>hostname</code>.</p> <p>This procedure should be very similar for other versions of <code>Debian</code>, and also for distributions like <code>Linux Mint</code>, <code>xubuntu/ubuntu/kubuntu</code> or <code>Mepis</code>. This procedure can also be helpful if you are using another virtualization solution.</p> <p>Go to the next chapter if you want to install <code>CentOS, Fedora, Red Hat Enterprise Linux, ...</code>.</p>"},{"location":"installing_debian8/#debian","title":"Debian","text":"<p>Debian is one of the oldest Linux distributions. I use Debian myself on almost every computer that I own (including <code>raspbian</code> on the <code>Raspberry Pi</code>).</p> <p>Debian comes in <code>releases</code> named after characters in the movie <code>Toy Story</code>. The <code>Jessie</code> release contains about 36000 packages.</p> <pre><code> name       number       year\n</code></pre> <pre><code> Woody        3.0        2002\n\n Sarge        3.1        2005\n\n Etch         4.0        2007\n\n Lenny        5.0        2009\n\nSqueeze       6.0        2011\n\nWheezy         7         2013\n\nJessie         8         2015\n</code></pre> <p>: Debian releases</p> <p>There is never a fixed date for the next <code>Debian</code> release. The next version is released when it is ready.</p>"},{"location":"installing_debian8/#downloading","title":"Downloading","text":"<p>All these screenshots were made in November 2014, which means <code>Debian 8</code> was still in \\'testing\\' (but in \\'freeze\\', so there will be no major changes when it is released).</p> <p>Download Debian here:</p> <p></p> <p>After a couple of clicks on that website, I ended up downloading <code>Debian 8</code> (testing) here. It should be only one click once <code>Debian 8</code> is released (somewhere in 2015).</p> <p></p> <p>You have many other options to download and install <code>Debian</code>. We will discuss them much later.</p> <p>This small screenshot shows the downloading of a <code>netinst</code> .iso file. Most of the software will be downloaded during the installation. This also means that you will have the most recent version of all packages when the install is finished.</p> <p></p> <p>I already have Debian 8 installed on my laptop (hence the <code>paul@debian8</code> prompt). Anyway, this is the downloaded file just before starting the installation.</p> <pre><code>paul@debian8:~$ ls -hl debian-testing-amd64-netinst.iso\n-rw-r--r-- 1 paul paul 231M Nov 10 17:59 debian-testing-amd64-netinst.iso\n</code></pre> <p>Create a new virtualbox machine (I already have five, you might have zero for now). Click the <code>New</code> button to start a wizard that will help you create a virtual machine.</p> <p></p> <p>The machine needs a name, this screenshot shows that I named it <code>server42</code>.</p> <p></p> <p>Most of the defaults in Virtualbox are ok.</p> <p>512MB of RAM is enough to practice all the topics in this book.</p> <p></p> <p>We do not care about the virtual disk format.</p> <p></p> <p>Choosing <code>dynamically allocated</code> will save you some disk space (for a small performance hit).</p> <p></p> <p>8GB should be plenty for learning about Linux servers.</p> <p></p> <p>This finishes the wizard. You virtual machine is almost ready to begin the installation.</p> <p>First, make sure that you attach the downloaded .iso image to the virtual CD drive. (by opening <code>Settings</code>, <code>Storage</code> followed by a mouse click on the round CD icon)</p> <p></p> <p>Personally I also disable sound and usb, because I never use these features. I also remove the floppy disk and use a PS/2 mouse pointer. This is probably not very important, but I like the idea that it saves some resources.</p> <p>Now boot the virtual machine and begin the actual installation. After a couple of seconds you should see a screen similar to this. Choose <code>Install</code> to begin the installation of Debian.</p> <p></p> <p>First select the language you want to use.</p> <p></p> <p>Choose your country. This information will be used to suggest a download mirror.</p> <p></p> <p>Choose the correct keyboard. On servers this is of no importance since most servers are remotely managed via <code>ssh</code>.</p> <p></p> <p>Enter a <code>hostname</code> (with <code>fqdn</code> to set a <code>dnsdomainname</code>).</p> <p></p> <p>Give the <code>root</code> user a password. Remember this password (or use <code>hunter2</code>).</p> <p></p> <p>It is adviced to also create a normal user account. I don\\'t give my full name, Debian 8 accepts an identical username and full name <code>paul</code>.</p> <p></p> <p>The <code>use entire disk</code> refers to the <code>virtual disk</code> that you created before in <code>Virtualbox</code>..</p> <p></p> <p>Again the default is probably what you want. Only change partitioning if you really know what you are doing.</p> <p></p> <p>Accept the partition layout (again only change if you really know what you are doing).</p> <p></p> <p>This is the point of no return, the magical moment where pressing <code>yes</code> will forever erase data on the (virtual) computer.</p> <p></p> <p>Software is downloaded from a mirror repository, preferably choose one that is close by (as in the same country).</p> <p></p> <p>This setup was done in Belgium.</p> <p></p> <p>Leave the proxy field empty (unless you are sure that you are behind a proxy server).</p> <p></p> <p>Choose whether you want to send anonymous statistics to the Debian project (it gathers data about installed packages). You can view the statistics here <code>http://popcon.debian.org/</code>.</p> <p></p> <p>Choose what software to install, we do not need any graphical stuff for this training.</p> <p></p> <p>The latest versions are being downloaded.</p> <p></p> <p>Say yes to install the bootloader on the virtual machine.</p> <p></p> <p>Booting for the first time shows the grub screen</p> <p></p> <p>A couple seconds later you should see a lot of text scrolling of the screen (<code>dmesg</code>). After which you are presented with this <code>getty</code> and are allowed your first logon.</p> <p></p> <p>You should now be able to log on to your virtual machine with the <code>root</code> account. Do you remember the password ? Was it <code>hunter2</code> ?</p> <p></p> <p>The screenshots in this book will look like this from now on. You can just type those commands in the terminal (after you logged on).</p> <pre><code>root@server42:~# who am i\nroot     tty1         2014-11-10 18:21\nroot@server42:~# hostname\nserver42\nroot@server42:~# date\nMon Nov 10 18:21:56 CET 2014\n</code></pre>"},{"location":"installing_debian8/#virtualbox-networking","title":"virtualbox networking","text":"<p>You can also log on from remote (or from your Windows/Mac/Linux host computer) using <code>ssh</code> or <code>putty</code>. Change the <code>network</code> settings in the virtual machine to <code>bridge</code>. This will enable your virtual machine to receive an ip address from your local dhcp server.</p> <p>The default virtualbox networking is to attach virtual network cards to <code>nat</code>. This screenshiot shows the ip address <code>10.0.2.15</code> when on <code>nat</code>:</p> <pre><code>root@server42:~# ifconfig\neth0      Link encap:Ethernet  HWaddr 08:00:27:f5:74:cf\n          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fef5:74cf/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:11 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:19 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:2352 (2.2 KiB)  TX bytes:1988 (1.9 KiB)\n\nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n</code></pre> <p></p> <p>By shutting down the network interface and enabling it again, we force Debian to renew an ip address from the bridged network.</p> <pre><code>root@server42:~# # do not run ifdown while connected over ssh!\nroot@server42:~# ifdown eth0\nKilled old client process\nInternet Systems Consortium DHCP Client 4.3.1\nCopyright 2004-2014 Internet Systems Consortium.\nAll rights reserved.\nFor info, please visit https://www.isc.org/software/dhcp/\n\nListening on LPF/eth0/08:00:27:f5:74:cf\nSending on   LPF/eth0/08:00:27:f5:74:cf\nSending on   Socket/fallback\nDHCPRELEASE on eth0 to 10.0.2.2 port 67\nroot@server42:~# # now enable bridge in virtualbox settings\nroot@server42:~# ifup eth0\nInternet Systems Consortium DHCP Client 4.3.1\nCopyright 2004-2014 Internet Systems Consortium.\nAll rights reserved.\nFor info, please visit https://www.isc.org/software/dhcp/\n\nListening on LPF/eth0/08:00:27:f5:74:cf\nSending on   LPF/eth0/08:00:27:f5:74:cf\nSending on   Socket/fallback\nDHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 8\nDHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 8\nDHCPREQUEST on eth0 to 255.255.255.255 port 67\nDHCPOFFER from 192.168.1.42\nDHCPACK from 192.168.1.42\nbound to 192.168.1.111 -- renewal in 2938 seconds.\nroot@server42:~# ifconfig eth0\neth0      Link encap:Ethernet  HWaddr 08:00:27:f5:74:cf\n          inet addr:192.168.1.111  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fef5:74cf/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:15 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:31 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:3156 (3.0 KiB)  TX bytes:3722 (3.6 KiB)\nroot@server42:~#\n</code></pre> <p>Here is an example of <code>ssh</code> to this freshly installed computer. Note that <code>Debian 8</code> has disabled remote root access, so i need to use the normal user account.</p> <pre><code>paul@debian8:~$ ssh paul@192.168.1.111\npaul@192.168.1.111's password:\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\npaul@server42:~$\npaul@server42:~$ su -\nPassword:\nroot@server42:~#\n</code></pre> <p>TODO: putty screenshot here...</p>"},{"location":"installing_debian8/#setting-the-hostname","title":"setting the hostname","text":"<p>The hostname of the server is asked during installation, so there is no need to configure this manually.</p> <pre><code>root@server42:~# hostname\nserver42\nroot@server42:~# cat /etc/hostname\nserver42\nroot@server42:~# dnsdomainname\npaul.local\nroot@server42:~# grep server42 /etc/hosts\n127.0.1.1       server42.paul.local     server42\nroot@server42:~#\n</code></pre>"},{"location":"installing_debian8/#adding-a-static-ip-address","title":"adding a static ip address","text":"<p>This example shows how to add a static ip address to your server.</p> <p>You can use <code>ifconfig</code> to set a static address that is active until the next <code>reboot</code> (or until the next <code>ifdown</code>).</p> <p>a</p> <pre><code>root@server42:~# ifconfig eth0:0 10.104.33.39\n</code></pre> <p>Adding a couple of lines to the <code>/etc/network/interfaces</code> file to enable an extra ip address forever.</p> <pre><code>root@server42:~# vi /etc/network/interfaces\nroot@server42:~# tail -4 /etc/network/interfaces\nauto eth0:0\niface eth0:0 inet static\naddress 10.104.33.39\nnetmask 255.255.0.0\nroot@server42:~# ifconfig\neth0      Link encap:Ethernet  HWaddr 08:00:27:f5:74:cf\n          inet addr:192.168.1.111  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fef5:74cf/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:528 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:333 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:45429 (44.3 KiB)  TX bytes:48763 (47.6 KiB)\n\neth0:0    Link encap:Ethernet  HWaddr 08:00:27:f5:74:cf\n          inet addr:10.104.33.39  Bcast:10.255.255.255  Mask:255.0.0.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n\nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n\nroot@server42:~#\n</code></pre>"},{"location":"installing_debian8/#debian-package-management","title":"Debian package management","text":"<p>To get all information about the newest packages form the online repository:</p> <pre><code>root@server42:~# aptitude update\nGet: 1 http://ftp.be.debian.org jessie InRelease [191 kB]\nGet: 2 http://security.debian.org jessie/updates InRelease [84.1 kB]\nGet: 3 http://ftp.be.debian.org jessie-updates InRelease [117 kB]\nGet: 4 http://ftp.be.debian.org jessie-backports InRelease [118 kB]\nGet: 5 http://security.debian.org jessie/updates/main Sources [14 B]\nGet: 6 http://ftp.be.debian.org jessie/main Sources/DiffIndex [7,876 B]\n... (output truncated)\n</code></pre> <p>To download and apply all updates for all installed packages:</p> <pre><code>root@server42:~# aptitude upgrade\nResolving dependencies...\nThe following NEW packages will be installed:\n  firmware-linux-free{a} irqbalance{a} libnuma1{a} linux-image-3.16.0-4-amd64{a}\nThe following packages will be upgraded:\n  busybox file libc-bin libc6 libexpat1 libmagic1 libpaper-utils libpaper1 libsqlite3-0\n  linux-image-amd64 locales multiarch-support\n12 packages upgraded, 4 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 44.9 MB of archives. After unpacking 161 MB will be used.\nDo you want to continue? [Y/n/?]\n... (output truncated)\n</code></pre> <p>To install new software (<code>vim</code> and <code>tmux</code> in this example):</p> <pre><code>root@server42:~# aptitude install vim tmux\nThe following NEW packages will be installed:\n  tmux vim vim-runtime{a}\n0 packages upgraded, 3 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 6,243 kB of archives. After unpacking 29.0 MB will be used.\nDo you want to continue? [Y/n/?]\nGet: 1 http://ftp.be.debian.org/debian/ jessie/main tmux amd64 1.9-6 [245 kB]\nGet: 2 http://ftp.be.debian.org/debian/ jessie/main vim-runtime all 2:7.4.488-1 [5,046 kB]\nGet: 3 http://ftp.be.debian.org/debian/ jessie/main vim amd64 2:7.4.488-1 [952 kB]\n</code></pre> <p>Refer to the <code>package management</code> chapter in LinuxAdm.pdf for more information.</p>"},{"location":"intro_vi/","title":"Introduction to vi","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/)</p> <p>The <code>vi</code> editor is installed on almost every Unix. Linux will very often install <code>vim</code> (<code>vi improved</code>) which is similar. Every system administrator should know <code>vi(m)</code>, because it is an easy tool to solve problems.</p> <p>The <code>vi</code> editor is not intuitive, but once you get to know it, <code>vi</code> becomes a very powerful application. Most Linux distributions will include the <code>vimtutor</code> which is a 45 minute lesson in <code>vi(m)</code>.</p>"},{"location":"intro_vi/#command-mode-and-insert-mode","title":"command mode and insert mode","text":"<p>The vi editor starts in <code>command mode</code>. In command mode, you can type commands. Some commands will bring you into <code>insert mode</code>. In insert mode, you can type text. The <code>escape key</code> will return you to command mode.</p> <pre><code> key    action\n</code></pre> <pre><code> Esc    set vi(m) in command mode.\n</code></pre> <p>: getting to command mode</p>"},{"location":"intro_vi/#start-typing-a-a-i-i-o-o","title":"start typing (a A i I o O)","text":"<p>The difference between a A i I o and O is the location where you can start typing. a will append after the current character and A will append at the end of the line. i will insert before the current character and I will insert at the beginning of the line. o will put you in a new line after the current line and O will put you in a new line before the current line.</p> <p>command  action</p> <pre><code>  a     start typing after the current character\n\n  A     start typing at the end of the current line\n\n  i     start typing before the current character\n\n  I     start typing at the start of the current line\n\n  o     start typing on a new line after the current\n        line\n\n  O     start typing on a new line before the current\n        line\n</code></pre> <p>: switch to insert mode</p>"},{"location":"intro_vi/#replace-and-delete-a-character-r-x-x","title":"replace and delete a character (r x X)","text":"<p>When in command mode (it doesn\\'t hurt to hit the escape key more than once) you can use the x key to delete the current character. The big X key (or shift x) will delete the character left of the cursor. Also when in command mode, you can use the r key to replace one single character. The r key will bring you in insert mode for just one key press, and will return you immediately to command mode.</p> <pre><code>command    action\n</code></pre> <pre><code>   x       delete the character below the cursor\n\n   X       delete the character before the cursor\n\n   r       replace the character below the cursor\n\n   p       paste after the cursor (here the last deleted\n           character)\n\n   xp      switch two characters\n</code></pre> <p>: replace and delete</p>"},{"location":"intro_vi/#undo-redo-and-repeat-u","title":"undo, redo and repeat (u .)","text":"<p>When in command mode, you can undo your mistakes with u. Use <code>ctrl-r</code> to redo the undo.</p> <p>You can do your mistakes twice with . (in other words, the . will repeat your last command).</p> <p>command  action</p> <pre><code>  u     undo the last action\n</code></pre> <p>ctrl-r   redo the last undo</p> <pre><code>  .     repeat the last action\n</code></pre> <p>: undo and repeat</p>"},{"location":"intro_vi/#cut-copy-and-paste-a-line-dd-yy-p-p","title":"cut, copy and paste a line (dd yy p P)","text":"<p>When in command mode, dd will cut the current line. yy will copy the current line. You can paste the last copied or cut line after (p) or before (P) the current line.</p> <p>command  action</p> <pre><code> dd     cut the current line\n\n yy     (yank yank) copy the current line\n\n  p     paste after the current line\n\n  P     paste before the current line\n</code></pre> <p>: cut, copy and paste a line</p>"},{"location":"intro_vi/#cut-copy-and-paste-lines-3dd-2yy","title":"cut, copy and paste lines (3dd 2yy)","text":"<p>When in command mode, before typing dd or yy, you can type a number to repeat the command a number of times. Thus, 5dd will cut 5 lines and 4yy will copy (yank) 4 lines. That last one will be noted by vi in the bottom left corner as \\\"4 line yanked\\\".</p> <p>command  action</p> <pre><code> 3dd    cut three lines\n\n 4yy    copy four lines\n</code></pre> <p>: cut, copy and paste lines</p>"},{"location":"intro_vi/#start-and-end-of-a-line-0-or-and","title":"start and end of a line (0 or \\^ and $)","text":"<p>When in command mode, the 0 and the caret \\^ will bring you to the start of the current line, whereas the $ will put the cursor at the end of the current line. You can add 0 and $ to the d command, d0 will delete every character between the current character and the start of the line. Likewise d$ will delete everything from the current character till the end of the line. Similarly y0 and y$ will yank till start and end of the current line.</p> <p>command  action</p> <pre><code>  0     jump to start of current line\n\n \\^     jump to start of current line\n\n \\$     jump to end of current line\n\n d0     delete until start of line\n\n d\\$    delete until end of line\n</code></pre> <p>: start and end of line</p>"},{"location":"intro_vi/#join-two-lines-j-and-more","title":"join two lines (J) and more","text":"<p>When in command mode, pressing <code>J</code> will append the next line to the current line. With <code>yyp</code> you duplicate a line and with <code>ddp</code> you switch two lines.</p> <p>command  action</p> <pre><code>  J     join two lines\n\n yyp    duplicate a line\n\n ddp    switch two lines\n</code></pre> <p>: join two lines</p>"},{"location":"intro_vi/#words-w-b","title":"words (w b)","text":"<p>When in command mode, <code>w</code> will jump to the next word and <code>b</code> will move to the previous word. w and b can also be combined with d and y to copy and cut words (dw db yw yb).</p> <p>command  action</p> <pre><code>  w     forward one word\n\n  b     back one word\n\n 3w     forward three words\n\n dw     delete one word\n\n yw     yank (copy) one word\n\n 5yb    yank five words back\n\n 7dw    delete seven words\n</code></pre> <p>: words</p>"},{"location":"intro_vi/#save-or-not-and-exit-w-q-q","title":"save (or not) and exit (:w :q :q! )","text":"<p>Pressing the colon : will allow you to give instructions to vi (technically speaking, typing the colon will open the <code>ex</code> editor). <code>:w</code> will write (save) the file, <code>:q</code> will quit an unchanged file without saving, and <code>:q!</code> will quit vi discarding any changes. <code>:wq</code> will save and quit and is the same as typing <code>ZZ</code> in command mode.</p> <pre><code>command   action\n</code></pre> <pre><code>  :w      save (write)\n</code></pre> <p>:w fname   save as fname</p> <pre><code>  :q      quit\n\n  :wq     save and quit\n\n  ZZ      save and quit\n\n  :q!     quit (discarding your changes)\n\n  :w!     save (and write to non-writable file!)\n</code></pre> <p>: save and exit vi</p> <p>The last one is a bit special. With <code>:w!</code> <code>vi</code> will try to <code>chmod</code> the file to get write permission (this works when you are the owner) and will <code>chmod</code> it back when the write succeeds. This should always work when you are root (and the file system is writable).</p>"},{"location":"intro_vi/#searching","title":"Searching (/ ?)","text":"<p>When in command mode typing / will allow you to search in vi for strings (can be a regular expression). Typing /foo will do a forward search for the string foo and typing ?bar will do a backward search for bar.</p> <pre><code> command     action\n</code></pre> <pre><code> /string     forward search for string\n\n ?string     backward search for string\n\n    n        go to next occurrence of search string\n\n/\\^string    forward search string at beginning of line\n\n/string\\$    forward search string at end of line\n</code></pre> <p>/br[aeio]l  search for bral brel bril and brol</p> <p>/\\\\&lt;he\\&gt;   search for the word <code>he</code> (and not for <code>he</code>re or                  t<code>he</code>)</p> <p>: searching</p>"},{"location":"intro_vi/#replace-all-1-sfoobarg","title":"replace all ( :1,$ s/foo/bar/g )","text":"<p>To replace all occurrences of the string foo with bar, first switch to ex mode with : . Then tell vi which lines to use, for example 1,$ will do the replace all from the first to the last line. You can write 1,5 to only process the first five lines. The s/foo/bar/g will replace all occurrences of foo with bar.</p> <pre><code>   command       action\n</code></pre> <p>:4,8 s/foo/bar/g  replace foo with bar on lines 4 to 8</p> <p>:1,$ s/foo/bar/g  replace foo with bar on all lines</p> <p>: replace</p>"},{"location":"intro_vi/#reading-files-r-r-cmd","title":"reading files (:r :r !cmd)","text":"<p>When in command mode, :r foo will read the file named foo, :r !foo will execute the command foo. The result will be put at the current location. Thus :r !ls will put a listing of the current directory in your text file.</p> <p>command  action</p> <p>:r fname  (read) file fname and paste contents</p> <p>:r !cmd  execute cmd and paste its output</p> <p>: read files and input</p>"},{"location":"intro_vi/#text-buffers","title":"text buffers","text":"<p>There are 36 buffers in vi to store text. You can use them with the <code>\"</code> character.</p> <p>command  action</p> <pre><code>\\\"add   delete current line and put text in buffer a\n</code></pre> <p>\\\"g7yy   copy seven lines into buffer g</p> <pre><code>\\\"ap    paste from buffer a\n</code></pre> <p>: text buffers</p>"},{"location":"intro_vi/#multiple-files","title":"multiple files","text":"<p>You can edit multiple files with vi. Here are some tips.</p> <pre><code>   command       action\n</code></pre> <pre><code>vi file1 file2   start editing three files\n    file3\n\n    :args        lists files and marks active file\n\n      :n         start editing the next file\n\n      :e         toggle with last edited file\n\n     :rew        rewind file pointer to first file\n</code></pre> <p>: multiple files</p>"},{"location":"intro_vi/#abbreviations","title":"abbreviations","text":"<p>With <code>:ab</code> you can put abbreviations in vi. Use <code>:una</code> to undo the abbreviation.</p> <pre><code>    command        action\n</code></pre> <p>:ab str long string  abbreviate <code>str</code> to be \\'long                        string\\'</p> <pre><code>    :una str       un-abbreviate str\n</code></pre> <p>: abbreviations</p>"},{"location":"intro_vi/#key-mappings","title":"key mappings","text":"<p>Similarly to their abbreviations, you can use mappings with <code>:map</code> for command mode and <code>:map!</code> for insert mode.</p> <p>This example shows how to set the F6 function key to toggle between <code>set number</code> and <code>set nonumber</code>. The \\&lt;bar&gt; separates the two commands, <code>set number!</code> toggles the state and <code>set number?</code> reports the current state.</p> <pre><code>:map &lt;F6&gt; :set number!&lt;bar&gt;set number?&lt;CR&gt;\n</code></pre>"},{"location":"intro_vi/#setting-options","title":"setting options","text":"<p>Some options that you can set in vim.</p> <pre><code>:set number  ( also try :se nu )\n:set nonumber\n:syntax on\n:syntax off\n:set all  (list all options)\n:set tabstop=8\n:set tx   (CR/LF style endings)\n:set notx\n</code></pre> <p>You can set these options (and much more) in <code>~/.vimrc</code> for vim or in <code>~/.exrc</code> for standard vi.</p> <pre><code>paul@barry:~$ cat ~/.vimrc\nset number\nset tabstop=8\nset textwidth=78\nmap &lt;F6&gt; :set number!&lt;bar&gt;set number?&lt;CR&gt;\npaul@barry:~$\n</code></pre>"},{"location":"intro_vi/#practice-vim","title":"practice: vi(m)","text":"<p>1. Start the vimtutor and do some or all of the exercises. You might need to run <code>aptitude install vim</code> on xubuntu.</p> <p>2. What 3 key sequence in command mode will duplicate the current line.</p> <p>3. What 3 key sequence in command mode will switch two lines\\' place (line five becomes line six and line six becomes line five).</p> <p>4. What 2 key sequence in command mode will switch a character\\'s place with the next one.</p> <p>5. vi can understand macro\\'s. A macro can be recorded with q followed by the name of the macro. So qa will record the macro named a. Pressing q again will end the recording. You can recall the macro with @ followed by the name of the macro. Try this example: i 1 \\'Escape Key\\' qa yyp \\'Ctrl a\\' q 5@a (Ctrl a will increase the number with one).</p> <p>6. Copy /etc/passwd to your \\~/passwd. Open the last one in vi and press Ctrl v. Use the arrow keys to select a Visual Block, you can copy this with y or delete it with d. Try pasting it.</p> <p>7. What does dwwP do when you are at the beginning of a word in a sentence ?</p>"},{"location":"intro_vi/#solution-vim","title":"solution: vi(m)","text":"<p>1. Start the vimtutor and do some or all of the exercises. You might need to run <code>aptitude install vim</code> on xubuntu.</p> <pre><code>vimtutor\n</code></pre> <p>2. What 3 key sequence in command mode will duplicate the current line.</p> <pre><code>yyp\n</code></pre> <p>3. What 3 key sequence in command mode will switch two lines\\' place (line five becomes line six and line six becomes line five).</p> <pre><code>ddp\n</code></pre> <p>4. What 2 key sequence in command mode will switch a character\\'s place with the next one.</p> <pre><code>xp\n</code></pre> <p>5. vi can understand macro\\'s. A macro can be recorded with q followed by the name of the macro. So qa will record the macro named a. Pressing q again will end the recording. You can recall the macro with @ followed by the name of the macro. Try this example: i 1 \\'Escape Key\\' qa yyp \\'Ctrl a\\' q 5@a (Ctrl a will increase the number with one).</p> <p>6. Copy /etc/passwd to your \\~/passwd. Open the last one in vi and press Ctrl v. Use the arrow keys to select a Visual Block, you can copy this with y or delete it with d. Try pasting it.</p> <pre><code>cp /etc/passwd ~\nvi passwd\n(press Ctrl-V)\n</code></pre> <p>7. What does <code>dwwP</code> do when you are at the beginning of a word in a sentence ?</p> <p><code>dwwP</code> can switch the current word with the next word.</p>"},{"location":"ioredirection/","title":"I/O redirection","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>One of the powers of the Unix command line is the use of <code>input/output redirection</code> and <code>pipes</code>.</p> <p>This chapter explains <code>redirection</code> of input, output and error streams.</p>"},{"location":"ioredirection/#stdin-stdout-and-stderr","title":"stdin, stdout, and stderr","text":"<p>The bash shell has three basic streams; it takes input from <code>stdin</code> (stream <code>0</code>), it sends output to <code>stdout</code> (stream <code>1</code>)  and it sends error messages to <code>stderr</code> (stream <code>2</code>) .</p> <p>The drawing below has a graphical interpretation of these three streams.</p> <p></p> <p>The keyboard often serves as <code>stdin</code>, whereas <code>stdout</code> and <code>stderr</code> both go to the display. This can be confusing to new Linux users because there is no obvious way to recognize <code>stdout</code> from <code>stderr</code>. Experienced users know that separating output from errors can be very useful.</p> <p></p> <p>The next sections will explain how to redirect these streams.</p>"},{"location":"ioredirection/#output-redirection","title":"output redirection","text":""},{"location":"ioredirection/#stdout","title":"&gt; stdout","text":"<p><code>stdout</code> can be redirected with a <code>greater than</code> sign. While scanning the line, the shell will see the <code>&gt;</code> sign and will clear the file.</p> <p></p> <p>The <code>&gt;</code> notation is in fact the abbreviation of <code>1&gt;</code> (<code>stdout</code> being referred to as stream <code>1</code>).</p> <pre><code>[paul@RHELv8u3 ~]$ echo It is cold today!\nIt is cold today!\n[paul@RHELv8u3 ~]$ echo It is cold today! &gt; winter.txt\n[paul@RHELv8u3 ~]$ cat winter.txt \nIt is cold today!\n[paul@RHELv8u3 ~]$\n</code></pre> <p>Note that the bash shell effectively <code>removes</code> the redirection from the command line before argument 0 is executed. This means that in the case of this command:</p> <pre><code>echo hello &gt; greetings.txt\n</code></pre> <p>the shell only counts two arguments (echo = argument 0, hello = argument 1). The redirection is removed before the argument counting takes place.</p>"},{"location":"ioredirection/#output-file-is-erased","title":"output file is erased","text":"<p>While scanning the line, the shell will see the &gt; sign and <code>will clear the file</code>! Since this happens before resolving <code>argument 0</code>, this means that even when the command fails, the file will have been cleared!</p> <pre><code>[paul@RHELv8u3 ~]$ cat winter.txt \nIt is cold today!\n[paul@RHELv8u3 ~]$ zcho It is cold today! &gt; winter.txt\n-bash: zcho: command not found\n[paul@RHELv8u3 ~]$ cat winter.txt \n[paul@RHELv8u3 ~]$\n</code></pre>"},{"location":"ioredirection/#noclobber","title":"noclobber","text":"<p>Erasing a file while using &gt; can be prevented by setting the <code>noclobber</code> option.</p> <pre><code>[paul@RHELv8u3 ~]$ cat winter.txt \nIt is cold today!\n[paul@RHELv8u3 ~]$ set -o noclobber\n[paul@RHELv8u3 ~]$ echo It is cold today! &gt; winter.txt\n-bash: winter.txt: cannot overwrite existing file\n[paul@RHELv8u3 ~]$ set +o noclobber\n[paul@RHELv8u3 ~]$\n</code></pre>"},{"location":"ioredirection/#overruling-noclobber","title":"overruling noclobber","text":"<p>The <code>noclobber</code> can be overruled with <code>&gt;|</code>.</p> <pre><code>[paul@RHELv8u3 ~]$ set -o noclobber\n[paul@RHELv8u3 ~]$ echo It is cold today! &gt; winter.txt\n-bash: winter.txt: cannot overwrite existing file\n[paul@RHELv8u3 ~]$ echo It is very cold today! &gt;| winter.txt\n[paul@RHELv8u3 ~]$ cat winter.txt \nIt is very cold today!\n[paul@RHELv8u3 ~]$\n</code></pre>"},{"location":"ioredirection/#append","title":"&gt;&gt; append","text":"<p>Use <code>&gt;&gt;</code> to <code>append</code> output to a file.</p> <pre><code>[paul@RHELv8u3 ~]$ echo It is cold today! &gt; winter.txt\n[paul@RHELv8u3 ~]$ cat winter.txt \nIt is cold today!\n[paul@RHELv8u3 ~]$ echo Where is the summer ? &gt;&gt; winter.txt\n[paul@RHELv8u3 ~]$ cat winter.txt \nIt is cold today!\nWhere is the summer ?\n[paul@RHELv8u3 ~]$\n</code></pre>"},{"location":"ioredirection/#error-redirection","title":"error redirection","text":""},{"location":"ioredirection/#2-stderr","title":"2&gt; stderr","text":"<p>Redirecting <code>stderr</code> is done with <code>2&gt;</code>. This can be very useful to prevent error messages from cluttering your screen.</p> <p></p> <p>The screenshot below shows redirection of <code>stdout</code> to a file, and <code>stderr</code> to <code>/dev/null</code>. Writing <code>1&gt;</code> is the same as &gt;.</p> <pre><code>[paul@RHELv8u3 ~]$ find / &gt; allfiles.txt 2&gt; /dev/null\n[paul@RHELv8u3 ~]$\n</code></pre>"},{"location":"ioredirection/#21","title":"2&gt;&amp;1","text":"<p>To redirect both <code>stdout</code> and <code>stderr</code> to the same file, use <code>2&gt;&amp;1</code>.</p> <pre><code>[paul@RHELv8u3 ~]$ find / &gt; allfiles_and_errors.txt 2&gt;&amp;1\n[paul@RHELv8u3 ~]$\n</code></pre> <p>Note that the order of redirections is significant. For example, the command</p> <pre><code>ls &gt; dirlist 2&gt;&amp;1\n</code></pre> <p>directs both standard output (file descriptor 1) and standard error (file descriptor 2) to the file dirlist, while the command</p> <pre><code>ls 2&gt;&amp;1 &gt; dirlist\n</code></pre> <p>directs only the standard output to file dirlist, because the standard error made a copy of the standard output before the standard output was redirected to dirlist.</p>"},{"location":"ioredirection/#output-redirection-and-pipes","title":"output redirection and pipes","text":"<p>By default you cannot grep inside <code>stderr</code> when using pipes on the command line, because only <code>stdout</code> is passed.</p> <pre><code>paul@debian10:~$ rm file42 file33 file1201 | grep file42\nrm: cannot remove \u2018file42\u2019: No such file or directory\nrm: cannot remove \u2018file33\u2019: No such file or directory\nrm: cannot remove \u2018file1201\u2019: No such file or directory\n</code></pre> <p>With <code>2&gt;&amp;1</code> you can force <code>stderr</code> to go to <code>stdout</code>. This enables the next command in the pipe to act on both streams.</p> <pre><code>paul@debian10:~$ rm file42 file33 file1201 2&gt;&amp;1 | grep file42\nrm: cannot remove \u2018file42\u2019: No such file or directory\n</code></pre> <p>You cannot use both <code>1&gt;&amp;2</code> and <code>2&gt;&amp;1</code> to switch <code>stdout</code> and <code>stderr</code>.</p> <pre><code>paul@debian10:~$ rm file42 file33 file1201 2&gt;&amp;1 1&gt;&amp;2 | grep file42\nrm: cannot remove \u2018file42\u2019: No such file or directory\npaul@debian10:~$ echo file42 2&gt;&amp;1 1&gt;&amp;2 | sed 's/file42/FILE42/' \nFILE42\n</code></pre> <p>You need a third stream to switch stdout and stderr after a pipe symbol.</p> <pre><code>paul@debian10:~$ echo file42 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 | sed 's/file42/FILE42/' \nfile42\npaul@debian10:~$ rm file42 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3 | sed 's/file42/FILE42/' \nrm: cannot remove \u2018FILE42\u2019: No such file or directory\n</code></pre>"},{"location":"ioredirection/#joining-stdout-and-stderr","title":"joining stdout and stderr","text":"<p>The <code>&amp;&gt;</code> construction will put both <code>stdout</code> and <code>stderr</code> in one stream (to a file).</p> <pre><code>paul@debian10:~$ rm file42 &amp;&gt; out_and_err\npaul@debian10:~$ cat out_and_err \nrm: cannot remove \u2018file42\u2019: No such file or directory\npaul@debian10:~$ echo file42 &amp;&gt; out_and_err\npaul@debian10:~$ cat out_and_err \nfile42\npaul@debian10:~$\n</code></pre>"},{"location":"ioredirection/#input-redirection","title":"input redirection","text":""},{"location":"ioredirection/#stdin","title":"\\&lt; stdin","text":"<p>Redirecting <code>stdin</code> is done with \\&lt; (short for 0\\&lt;).</p> <pre><code>[paul@RHEL8b ~]$ cat &lt; text.txt\none\ntwo\n[paul@RHEL8b ~]$ tr 'onetw' 'ONEZZ' &lt; text.txt\nONE\nZZO\n[paul@RHEL8b ~]$\n</code></pre>"},{"location":"ioredirection/#here-document","title":"\\&lt;\\&lt; here document","text":"<p>The <code>here document</code> (sometimes called here-is-document) is a way to append input until a certain sequence (usually EOF) is encountered. The <code>EOF</code> marker can be typed literally or can be called with Ctrl-D.</p> <pre><code>[paul@RHEL8b ~]$ cat &lt;&lt;EOF &gt; text.txt\n&gt; one\n&gt; two\n&gt; EOF\n[paul@RHEL8b ~]$ cat text.txt \none\ntwo\n[paul@RHEL8b ~]$ cat &lt;&lt;brol &gt; text.txt\n&gt; brel\n&gt; brol\n[paul@RHEL8b ~]$ cat text.txt \nbrel\n[paul@RHEL8b ~]$\n</code></pre>"},{"location":"ioredirection/#here-string","title":"\\&lt;\\&lt;\\&lt; here string","text":"<p>The <code>here string</code> can be used to directly pass strings to a command. The result is the same as using <code>echo string | command</code> (but you have one less process running).</p> <pre><code>paul@ubu1110~$ base64 &lt;&lt;&lt; linux-training.be\nbGludXgtdHJhaW5pbmcuYmUK\npaul@ubu1110~$ base64 -d &lt;&lt;&lt; bGludXgtdHJhaW5pbmcuYmUK\nlinux-training.be\n</code></pre> <p>See rfc 3548 for more information about <code>base64</code>.</p>"},{"location":"ioredirection/#confusing-redirection","title":"confusing redirection","text":"<p>The shell will scan the whole line before applying redirection. The following command line is very readable and is correct.</p> <pre><code>cat winter.txt &gt; snow.txt 2&gt; errors.txt\n</code></pre> <p>But this one is also correct, but less readable.</p> <pre><code>2&gt; errors.txt cat winter.txt &gt; snow.txt\n</code></pre> <p>Even this will be understood perfectly by the shell.</p> <pre><code>&lt; winter.txt &gt; snow.txt 2&gt; errors.txt cat\n</code></pre>"},{"location":"ioredirection/#quick-file-clear","title":"quick file clear","text":"<p>So what is the quickest way to clear a file ?</p> <pre><code>&gt;foo\n</code></pre> <p>And what is the quickest way to clear a file when the <code>noclobber</code> option is set ?</p> <pre><code>&gt;|bar\n</code></pre>"},{"location":"ioredirection/#practice-inputoutput-redirection","title":"practice: input/output redirection","text":"<p>1. Activate the <code>noclobber</code> shell option.</p> <p>2. Verify that <code>noclobber</code> is active by repeating an <code>ls</code> on <code>/etc/</code> with redirected output to a file.</p> <p>3. When listing all shell options, which character represents the <code>noclobber</code> option ?</p> <p>4. Deactivate the <code>noclobber</code> option.</p> <p>5. Make sure you have two shells open on the same computer. Create an empty <code>tailing.txt</code> file. Then type <code>tail -f tailing.txt</code>. Use the second shell to <code>append</code> a line of text to that file. Verify that the first shell displays this line.</p> <p>6. Create a file that contains the names of five people. Use <code>cat</code> and output redirection to create the file and use a <code>here document</code> to end the input.</p>"},{"location":"ioredirection/#solution-inputoutput-redirection","title":"solution: input/output redirection","text":"<p>1. Activate the <code>noclobber</code> shell option.</p> <pre><code>set -o noclobber\nset -C\n</code></pre> <p>2. Verify that <code>noclobber</code> is active by repeating an <code>ls</code> on <code>/etc/</code> with redirected output to a file.</p> <pre><code>ls /etc &gt; etc.txt \nls /etc &gt; etc.txt (should not work)\n</code></pre> <p>3. When listing all shell options, which character represents the <code>noclobber</code> option ?</p> <pre><code>echo $- (noclobber is visible as C)\n</code></pre> <p>4. Deactivate the <code>noclobber</code> option.</p> <pre><code>set +o noclobber\n</code></pre> <p>5. Make sure you have two shells open on the same computer. Create an empty <code>tailing.txt</code> file. Then type <code>tail -f tailing.txt</code>. Use the second shell to <code>append</code> a line of text to that file. Verify that the first shell displays this line.</p> <pre><code>paul@deb106:~$ &gt; tailing.txt\npaul@deb106:~$ tail -f tailing.txt \nhello\nworld\n\nin the other shell:\npaul@deb106:~$ echo hello &gt;&gt; tailing.txt \npaul@deb106:~$ echo world &gt;&gt; tailing.txt\n</code></pre> <p>6. Create a file that contains the names of five people. Use <code>cat</code> and output redirection to create the file and use a <code>here document</code> to end the input.</p> <pre><code>paul@deb106:~$ cat &gt; tennis.txt &lt;&lt; ace\n&gt; Justine Henin\n&gt; Venus Williams\n&gt; Serena Williams\n&gt; Martina Hingis\n&gt; Kim Clijsters\n&gt; ace\npaul@deb106:~$ cat tennis.txt \nJustine Henin\nVenus Williams\nSerena Williams\nMartina Hingis\nKim Clijsters\npaul@deb106:~$\n</code></pre>"},{"location":"keys/","title":"keyboard settings","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Serge Van Ginderachter, https://github.com/srgvg/)</p>"},{"location":"keys/#about-keyboard-layout","title":"about keyboard layout","text":"<p>Many people (like US-Americans) prefer the default US-qwerty keyboard layout. So when you are not from the USA and want a local keyboard layout on your system, then the best practice is to select this keyboard at installation time. Then the keyboard layout will always be correct. Also, whenever you use ssh to remotely manage a Linux system, your local keyboard layout will be used, independent of the server keyboard configuration. So you will not find much information on changing keyboard layout on the fly on linux, because not many people need it. Below are some tips to help you.</p>"},{"location":"keys/#x-keyboard-layout","title":"X Keyboard Layout","text":"<p>This is the relevant portion in /etc/X11/xorg.conf, first for Belgian azerty, then for US-qwerty.</p> <pre><code>[paul@RHEL5 ~]$ grep -i xkb /etc/X11/xorg.conf \n        Option      \"XkbModel\" \"pc105\"\n        Option      \"XkbLayout\" \"be\"\n\n[paul@RHEL5 ~]$ grep -i xkb /etc/X11/xorg.conf\n        Option      \"XkbModel\" \"pc105\"\n        Option      \"XkbLayout\" \"us\"\n</code></pre> <p>When in Gnome or KDE or any other graphical environment, look in the graphical menu in preferences, there will be a keyboard section to choose your layout. Use the graphical menu instead of editing xorg.conf.</p>"},{"location":"keys/#shell-keyboard-layout","title":"shell keyboard layout","text":"<p>When in bash, take a look in the /etc/sysconfig/keyboard file. Below a sample US-qwerty configuration, followed by a Belgian azerty configuration.</p> <pre><code>[paul@RHEL5 ~]$ cat /etc/sysconfig/keyboard \nKEYBOARDTYPE=\"pc\"\nKEYTABLE=\"us\"\n\n\n[paul@RHEL5 ~]$ cat /etc/sysconfig/keyboard \nKEYBOARDTYPE=\"pc\"\nKEYTABLE=\"be-latin1\"\n</code></pre> <p>The keymaps themselves can be found in /usr/share/keymaps or /lib/kbd/keymaps.</p> <pre><code>[paul@RHEL5 ~]$ ls -l /lib/kbd/keymaps/\ntotal 52\ndrwxr-xr-x 2 root root 4096 Apr  1 00:14 amiga\ndrwxr-xr-x 2 root root 4096 Apr  1 00:14 atari\ndrwxr-xr-x 8 root root 4096 Apr  1 00:14 i386\ndrwxr-xr-x 2 root root 4096 Apr  1 00:14 include\ndrwxr-xr-x 4 root root 4096 Apr  1 00:14 mac\nlrwxrwxrwx 1 root root    3 Apr  1 00:14 ppc -&gt; mac\ndrwxr-xr-x 2 root root 4096 Apr  1 00:14 sun\n</code></pre>"},{"location":"license/","title":"GNU Free Documentation License","text":"<p>Version 1.3, 3 November 2008</p> <p>Copyright \u00a9 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"PREAMBLE","text":"<p>The purpose of this License is to make a manual, textbook, or other functional and useful document \"free\" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.</p> <p>This License is a kind of \"copyleft\", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.</p> <p>We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.</p>"},{"location":"license/#applicability-and-definitions","title":"APPLICABILITY AND DEFINITIONS","text":"<p>This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \"Document\", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \"you\". You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law.</p> <p>A \"Modified Version\" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.</p> <p>A \"Secondary Section\" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.</p> <p>The \"Invariant Sections\" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none.</p> <p>The \"Cover Texts\" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words.</p> <p>A \"Transparent\" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \"Transparent\" is called \"Opaque\".</p> <p>Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only.</p> <p>The \"Title Page\" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \"Title Page\" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.</p> <p>The \"publisher\" means any person or entity that distributes copies of the Document to the public.</p> <p>A section \"Entitled XYZ\" means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \"Acknowledgements\", \"Dedications\", \"Endorsements\", or \"History\".) To \"Preserve the Title\" of such a section when you modify the Document means that it remains a section \"Entitled XYZ\" according to this definition.</p> <p>The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.</p>"},{"location":"license/#verbatim-copying","title":"VERBATIM COPYING","text":"<p>You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.</p> <p>You may also lend copies, under the same conditions stated above, and you may publicly display copies.</p>"},{"location":"license/#copying-in-quantity","title":"COPYING IN QUANTITY","text":"<p>If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.</p> <p>If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.</p> <p>If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.</p> <p>It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.</p>"},{"location":"license/#modifications","title":"MODIFICATIONS","text":"<p>You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:</p> <ul> <li>A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.</li> <li>B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.</li> <li>C. State on the Title page the name of the publisher of the Modified Version, as the publisher.</li> <li>D. Preserve all the copyright notices of the Document.</li> <li>E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.</li> <li>F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.</li> <li>G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice.</li> <li>H. Include an unaltered copy of this License.</li> <li>I. Preserve the section Entitled \"History\", Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \"History\" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.</li> <li>J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \"History\" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.</li> <li>K. For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.</li> <li>L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.</li> <li>M. Delete any section Entitled \"Endorsements\". Such a section may not be included in the Modified Version.</li> <li>N. Do not retitle any existing section to be Entitled \"Endorsements\" or to conflict in title with any Invariant Section.</li> <li>O. Preserve any Warranty Disclaimers.</li> </ul> <p>If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles.</p> <p>You may add a section Entitled \"Endorsements\", provided it contains nothing but endorsements of your Modified Version by various parties\u2014for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.</p> <p>You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.</p> <p>The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.</p>"},{"location":"license/#combining-documents","title":"COMBINING DOCUMENTS","text":"<p>You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers.</p> <p>The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.</p> <p>In the combination, you must combine any sections Entitled \"History\" in the various original documents, forming one section Entitled \"History\"; likewise combine any sections Entitled \"Acknowledgements\", and any sections Entitled \"Dedications\". You must delete all sections Entitled \"Endorsements\".</p>"},{"location":"license/#collections-of-documents","title":"COLLECTIONS OF DOCUMENTS","text":"<p>You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.</p> <p>You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.</p>"},{"location":"license/#aggregation-with-independent-works","title":"AGGREGATION WITH INDEPENDENT WORKS","text":"<p>A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document.</p> <p>If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.</p>"},{"location":"license/#translation","title":"TRANSLATION","text":"<p>Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail.</p> <p>If a section in the Document is Entitled \"Acknowledgements\", \"Dedications\", or \"History\", the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.</p>"},{"location":"license/#termination","title":"TERMINATION","text":"<p>You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License.</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.</p>"},{"location":"license/#future-revisions-of-this-license","title":"FUTURE REVISIONS OF THIS LICENSE","text":"<p>The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/.</p> <p>Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document.</p>"},{"location":"license/#relicensing","title":"RELICENSING","text":"<p>\"Massive Multiauthor Collaboration Site\" (or \"MMC Site\") means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \"Massive Multiauthor Collaboration\" (or \"MMC\") contained in the site means any set of copyrightable works thus published on the MMC site.</p> <p>\"CC-BY-SA\" means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization.</p> <p>\"Incorporate\" means to publish or republish a Document, in whole or in part, as part of another Document.</p> <p>An MMC is \"eligible for relicensing\" if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008.</p> <p>The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing.</p>"},{"location":"licensing/","title":"licensing","text":"<p>(Written by Ywein Van den Brande, with contributions by: Paul Cobbaut, https://github.com/paulcobbaut/)</p> <p>This chapter briefly explains the different licenses used for distributing operating systems software.</p> <p>Many thanks go to <code>Ywein Van den Brande</code> for writing most of this chapter.</p> <p>Ywein is an attorney at law, co-author of <code>The International FOSS Law Book</code> and author of <code>Praktijkboek Informaticarecht</code> (in Dutch).</p> <p></p> <pre><code>http://ifosslawbook.org\nhttp://www.crealaw.eu\n</code></pre>"},{"location":"licensing/#about-software-licenses","title":"about software licenses","text":"<p>There are two predominant software paradigms: <code>Free and Open Source Software</code> (FOSS) and <code>proprietary software</code>. The criteria for differentiation between these two approaches is based on control over the software. With <code>proprietary software</code>, control tends to lie more with the vendor, while with <code>Free and Open Source Software</code> it tends to be more weighted towards the end user. But even though the paradigms differ, they use the same <code>copyright laws</code> to reach and enforce their goals. From a legal perspective, <code>Free and Open Source Software</code> can be considered as software to which users generally receive more rights via their license agreement than they would have with a <code>proprietary software license</code>, yet the underlying license mechanisms are the same.</p> <p>Legal theory states that the author of FOSS, contrary to the author of <code>public domain</code> software, has in no way whatsoever given up his rights on his work. FOSS supports on the rights of the author (the <code>copyright</code>) to impose FOSS license conditions. The FOSS license conditions need to be respected by the user in the same way as proprietary license conditions. Always check your license carefully before you use third party software.</p> <p>Examples of proprietary software are <code>AIX</code> from IBM, <code>HP-UX</code> from HP and <code>Oracle Database 11g</code>. You are not authorised to install or use this software without paying a licensing fee. You are not authorised to distribute copies and you are not authorised to modify the closed source code.</p>"},{"location":"licensing/#public-domain-software-and-freeware","title":"public domain software and freeware","text":"<p>Software that is original in the sense that it is an intellectual creation of the author benefits <code>copyright</code> protection. Non-original software does not come into consideration for <code>copyright</code> protection and can, in principle, be used freely.</p> <p>Public domain software is considered as software to which the author has given up all rights and on which nobody is able to enforce any rights. This software can be used, reproduced or executed freely, without permission or the payment of a fee. Public domain software can in certain cases even be presented by third parties as own work, and by modifying the original work, third parties can take certain versions of the public domain software out of the public domain again.</p> <p><code>Freeware</code> is not public domain software or FOSS. It is proprietary software that you can use without paying a license cost. However, the often strict license terms need to be respected.</p> <p>Examples of freeware are <code>Adobe Reader</code>, <code>Skype</code> and <code>Command and Conquer: Tiberian Sun</code> (this game was sold as proprietary in 1999 and is since 2011 available as freeware).</p>"},{"location":"licensing/#free-software-or-open-source-software","title":"Free Software or Open Source Software","text":"<p>Both the <code>Free Software</code> (translates to <code>vrije software</code> in Dutch and to <code>Logiciel Libre</code> in French) and the <code>Open Source Software</code> movement largely pursue similar goals and endorse similar software licenses. But historically, there has been some perception of differentiation due to different emphases. Where the <code>Free Software</code> movement focuses on the rights (the four freedoms) which Free Software provides to its users, the <code>Open Source Software</code> movement points to its Open Source Definition and the advantages of peer-to-peer software development.</p> <p>Recently, the term free and open source software or FOSS has arisen as a neutral alternative. A lesser-used variant is free/libre/open source software (FLOSS), which uses <code>libre</code> to clarify the meaning of free as in <code>freedom</code> rather than as in <code>at no charge</code>.</p> <p>Examples of <code>free software</code> are <code>gcc</code>, <code>MySQL</code> and <code>gimp</code>.</p> <p>Detailed information about the <code>four freedoms</code> can be found here:</p> <pre><code>http://www.gnu.org/philosophy/free-sw.html\n</code></pre> <p>The <code>open source definition</code> can be found at:</p> <pre><code>http://www.opensource.org/docs/osd\n</code></pre> <p>The above definition is based on the <code>Debian Free Software Guidelines</code> available here:</p> <pre><code>http://www.debian.org/social_contract#guidelines\n</code></pre>"},{"location":"licensing/#gnu-general-public-license","title":"GNU General Public License","text":"<p>More and more software is being released under the <code>GNU GPL</code> (in 2006 Java was released under the GPL). This license (v2 and v3) is the main license endorsed by the Free Software Foundation. It's main characteristic is the <code>copyleft</code> principle. This means that everyone in the chain of consecutive users, in return for the right of use that is assigned, needs to distribute the improvements he makes to the software and his derivative works under the same conditions to other users, if he chooses to distribute such improvements or derivative works. In other words, software which incorporates GNU GPL software, needs to be distributed in turn as GNU GPL software (or compatible, see below). It is not possible to incorporate copyright protected parts of GNU GPL software in a proprietary licensed work. The GPL has been upheld in court.</p>"},{"location":"licensing/#using-gplv3-software","title":"using GPLv3 software","text":"<p>You can use <code>GPLv3 software</code> almost without any conditions. If you solely run the software you even don't have to accept the terms of the GPLv3. However, any other use - such as modifying or distributing the software - implies acceptance.</p> <p>In case you use the software internally (including over a network), you may modify the software without being obliged to distribute your modification. You may hire third parties to work on the software exclusively for you and under your direction and control. But if you modify the software and use it otherwise than merely internally, this will be considered as distribution. You must distribute your modifications under GPLv3 (the copyleft principle). Several more obligations apply if you distribute GPLv3 software. Check the GPLv3 license carefully.</p> <p>You create output with GPLv3 software: The GPLv3 does not automatically apply to the output.</p>"},{"location":"licensing/#bsd-license","title":"BSD license","text":"<p>There are several versions of the original Berkeley Distribution License. The most common one is the 3-clause license (\\\"New BSD License\\\" or \\\"Modified BSD License\\\").</p> <p>This is a permissive free software license. The license places minimal restrictions on how the software can be redistributed. This is in contrast to copyleft licenses such as the GPLv. 3 discussed above, which have a copyleft mechanism.</p> <p>This difference is of less importance when you merely use the software, but kicks in when you start redistributing verbatim copies of the software or your own modified versions.</p>"},{"location":"licensing/#other-licenses","title":"other licenses","text":"<p>FOSS or not, there are many kind of licenses on software. You should read and understand them before using any software.</p>"},{"location":"licensing/#combination-of-software-licenses","title":"combination of software licenses","text":"<p>When you use several sources or wishes to redistribute your software under a different license, you need to verify whether all licenses are compatible. Some FOSS licenses (such as BSD) are compatible with proprietary licenses, but most are not. If you detect a license incompatibility, you must contact the author to negotiate different license conditions or refrain from using the incompatible software.</p>"},{"location":"links/","title":"file links","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>An average computer using Linux has a file system with many <code>hard links</code> and <code>symbolic links</code>.</p> <p>To understand links in a file system, you first have to understand what an <code>inode</code> is.</p>"},{"location":"links/#inodes","title":"inodes","text":""},{"location":"links/#inode-contents","title":"inode contents","text":"<p>An <code>inode</code> is a data structure that contains metadata about a file. When the file system stores a new file on the hard disk, it stores not only the contents (data) of the file, but also extra properties like the name of the file, the creation date, its permissions, the owner of the file, and more. All this information (except the name of the file and the contents of the file) is stored in the <code>inode</code> of the file.</p> <p>The <code>ls -l</code> command will display some of the inode contents, as seen in this screenshot.</p> <pre><code>root@rhel53 ~# ls -ld /home/project42/\ndrwxr-xr-x 4 root pro42 4.0K Mar 27 14:29 /home/project42/\n</code></pre>"},{"location":"links/#inode-table","title":"inode table","text":"<p>The <code>inode table</code> contains all of the <code>inodes</code> and is created when you create the file system (with <code>mkfs</code>). You can use the <code>df -i</code> command to see how many <code>inodes</code> are used and free on mounted file systems.</p> <pre><code>root@rhel53 ~# df -i\nFilesystem            Inodes   IUsed   IFree IUse% Mounted on\n/dev/mapper/VolGroup00-LogVol00\n                     4947968  115326 4832642    3% /\n/dev/hda1              26104      45   26059    1% /boot\ntmpfs                  64417       1   64416    1% /dev/shm\n/dev/sda1             262144    2207  259937    1% /home/project42\n/dev/sdb1              74400    5519   68881    8% /home/project33\n/dev/sdb5                  0       0       0    -  /home/sales\n/dev/sdb6             100744      11  100733    1% /home/research\n</code></pre> <p>In the <code>df -i</code> screenshot above you can see the <code>inode</code> usage for several mounted <code>file systems</code>. You don\\'t see numbers for <code>/dev/sdb5</code> because it is a <code>fat</code> file system.</p>"},{"location":"links/#inode-number","title":"inode number","text":"<p>Each <code>inode</code> has a unique number (the inode number). You can see the <code>inode</code> numbers with the <code>ls -li</code> command.</p> <pre><code>paul@RHELv8u4:~/test$ touch file1\npaul@RHELv8u4:~/test$ touch file2\npaul@RHELv8u4:~/test$ touch file3\npaul@RHELv8u4:~/test$ ls -li\ntotal 12\n817266 -rw-rw-r--  1 paul paul 0 Feb  5 15:38 file1\n817267 -rw-rw-r--  1 paul paul 0 Feb  5 15:38 file2\n817268 -rw-rw-r--  1 paul paul 0 Feb  5 15:38 file3\npaul@RHELv8u4:~/test$\n</code></pre> <p>These three files were created one after the other and got three different <code>inodes</code> (the first column). All the information you see with this <code>ls</code> command resides in the <code>inode</code>, except for the filename (which is contained in the directory).</p>"},{"location":"links/#inode-and-file-contents","title":"inode and file contents","text":"<p>Let\\'s put some data in one of the files.</p> <pre><code>paul@RHELv8u4:~/test$ ls -li\ntotal 16\n817266 -rw-rw-r--  1 paul paul  0 Feb  5 15:38 file1\n817270 -rw-rw-r--  1 paul paul 92 Feb  5 15:42 file2\n817268 -rw-rw-r--  1 paul paul  0 Feb  5 15:38 file3\npaul@RHELv8u4:~/test$ cat file2\nIt is winter now and it is very cold.\nWe do not like the cold, we prefer hot summer nights.\npaul@RHELv8u4:~/test$\n</code></pre> <p>The data that is displayed by the <code>cat</code> command is not in the <code>inode</code>, but somewhere else on the disk. The <code>inode</code> contains a pointer to that data.</p>"},{"location":"links/#about-directories","title":"about directories","text":""},{"location":"links/#a-directory-is-a-table","title":"a directory is a table","text":"<p>A <code>directory</code> is a special kind of file that contains a table which maps filenames to inodes. Listing our current directory with <code>ls -ali</code> will display the contents of the directory file.</p> <pre><code>paul@RHELv8u4:~/test$ ls -ali\ntotal 32\n817262 drwxrwxr-x   2 paul paul 4096 Feb  5 15:42 .\n800768 drwx------  16 paul paul 4096 Feb  5 15:42 ..\n817266 -rw-rw-r--   1 paul paul    0 Feb  5 15:38 file1\n817270 -rw-rw-r--   1 paul paul   92 Feb  5 15:42 file2\n817268 -rw-rw-r--   1 paul paul    0 Feb  5 15:38 file3\npaul@RHELv8u4:~/test$\n</code></pre>"},{"location":"links/#and","title":". and ..","text":"<p>You can see five names, and the mapping to their five inodes. The dot <code>.</code> is a mapping to itself, and the dotdot <code>..</code> is a mapping to the parent directory. The three other names are mappings to different inodes.</p>"},{"location":"links/#hard-links","title":"hard links","text":""},{"location":"links/#creating-hard-links","title":"creating hard links","text":"<p>When we create a <code>hard link</code> to a file with <code>ln</code>, an extra entry is added in the directory. A new file name is mapped to an existing inode.</p> <pre><code>paul@RHELv8u4:~/test$ ln file2 hardlink_to_file2\npaul@RHELv8u4:~/test$ ls -li\ntotal 24\n817266 -rw-rw-r--  1 paul paul  0 Feb  5 15:38 file1\n817270 -rw-rw-r--  2 paul paul 92 Feb  5 15:42 file2\n817268 -rw-rw-r--  1 paul paul  0 Feb  5 15:38 file3\n817270 -rw-rw-r--  2 paul paul 92 Feb  5 15:42 hardlink_to_file2\npaul@RHELv8u4:~/test$\n</code></pre> <p>Both files have the same inode, so they will always have the same permissions and the same owner. Both files will have the same content. Actually, both files are equal now, meaning you can safely remove the original file, the hardlinked file will remain. The inode contains a counter, counting the number of hard links to itself. When the counter drops to zero, then the inode is emptied.</p>"},{"location":"links/#finding-hard-links","title":"finding hard links","text":"<p>You can use the <code>find</code> command to look for files with a certain inode. The screenshot below shows how to search for all filenames that point to <code>inode</code> 817270. Remember that an <code>inode</code> number is unique to its partition.</p> <pre><code>paul@RHELv8u4:~/test$ find / -inum 817270 2&gt; /dev/null\n/home/paul/test/file2\n/home/paul/test/hardlink_to_file2\n</code></pre>"},{"location":"links/#symbolic-links","title":"symbolic links","text":"<p>Symbolic links (sometimes called <code>soft links</code>) do not link to inodes, but create a name to name mapping. Symbolic links are created with <code>ln -s</code>. As you can see below, the <code>symbolic link</code> gets an inode of its own.</p> <pre><code>paul@RHELv8u4:~/test$ ln -s file2 symlink_to_file2\npaul@RHELv8u4:~/test$ ls -li\ntotal 32\n817273 -rw-rw-r--  1 paul paul  13 Feb  5 17:06 file1\n817270 -rw-rw-r--  2 paul paul 106 Feb  5 17:04 file2\n817268 -rw-rw-r--  1 paul paul   0 Feb  5 15:38 file3\n817270 -rw-rw-r--  2 paul paul 106 Feb  5 17:04 hardlink_to_file2\n817267 lrwxrwxrwx  1 paul paul   5 Feb  5 16:55 symlink_to_file2 -&gt; file2\npaul@RHELv8u4:~/test$\n</code></pre> <p>Permissions on a symbolic link have no meaning, since the permissions of the target apply. Hard links are limited to their own partition (because they point to an inode), symbolic links can link anywhere (other file systems, even networked).</p>"},{"location":"links/#removing-links","title":"removing links","text":"<p>Links can be removed with <code>rm</code>.</p> <pre><code>paul@laika:~$ touch data.txt\npaul@laika:~$ ln -s data.txt sl_data.txt\npaul@laika:~$ ln data.txt hl_data.txt\npaul@laika:~$ rm sl_data.txt \npaul@laika:~$ rm hl_data.txt\n</code></pre>"},{"location":"links/#practice-links","title":"practice : links","text":"<p>1. Create two files named winter.txt and summer.txt, put some text in them.</p> <p>2. Create a hard link to winter.txt named hlwinter.txt.</p> <p>3. Display the inode numbers of these three files, the hard links should have the same inode.</p> <p>4. Use the find command to list the two hardlinked files</p> <p>5. Everything about a file is in the inode, except two things : name them!</p> <p>6. Create a symbolic link to summer.txt called slsummer.txt.</p> <p>7. Find all files with inode number 2. What does this information tell you ?</p> <p>8. Look at the directories /etc/init.d/ /etc/rc2.d/ /etc/rc3.d/ ... do you see the links ?</p> <p>9. Look in /lib with ls -l...</p> <p>10. Use <code>find</code> to look in your home directory for regular files that have more than one hard link (hint: this is identical to all regular files that do not have exactly one hard link).</p>"},{"location":"links/#solution-links","title":"solution : links","text":"<p>1. Create two files named winter.txt and summer.txt, put some text in them.</p> <pre><code>echo cold &gt; winter.txt ; echo hot &gt; summer.txt\n</code></pre> <p>2. Create a hard link to winter.txt named hlwinter.txt.</p> <pre><code>ln winter.txt hlwinter.txt\n</code></pre> <p>3. Display the inode numbers of these three files, the hard links should have the same inode.</p> <pre><code>ls -li winter.txt summer.txt hlwinter.txt\n</code></pre> <p>4. Use the find command to list the two hardlinked files</p> <pre><code>find . -inum xyz #replace xyz with the inode number\n</code></pre> <p>5. Everything about a file is in the inode, except two things : name them!</p> <p>The name of the file is in a directory, and the contents is somewhere on the disk.</p> <p>6. Create a symbolic link to summer.txt called slsummer.txt.</p> <pre><code>ln -s summer.txt slsummer.txt\n</code></pre> <p>7. Find all files with inode number 2. What does this information tell you ?</p> <p>It tells you there is more than one inode table (one for every formatted partition + virtual file systems)</p> <p>8. Look at the directories /etc/init.d/ /etc/rc.d/ /etc/rc3.d/ ... do you see the links ?</p> <pre><code>ls -l /etc/init.d\n\nls -l /etc/rc2.d\n\nls -l /etc/rc3.d\n</code></pre> <p>9. Look in /lib with ls -l...</p> <pre><code>ls -l /lib\n</code></pre> <p>10. Use <code>find</code> to look in your home directory for regular files that have more than one hard link (hint: this is identical to all regular files that do not have exactly one hard link).</p> <pre><code>find ~ ! -links 1 -type f\n</code></pre>"},{"location":"linux_distributions/","title":"distributions","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/)</p> <p>This chapter gives a short overview of current Linux distributions.</p> <p>A Linux <code>distribution</code> is a collection of (usually open source) software on top of a Linux kernel. A distribution (or short, distro) can bundle server software, system management tools, documentation and many desktop applications in a <code>central secure software repository</code>. A distro aims to provide a common look and feel, secure and easy software management and often a specific operational purpose.</p> <p>Let\\'s take a look at some popular distributions.</p>"},{"location":"linux_distributions/#red-hat","title":"Red Hat","text":"<p>Red Hat is a billion dollar commercial Linux company that puts a lot of effort in developing Linux. They have hundreds of Linux specialists and are known for their excellent support. They give their products (Red Hat Enterprise Linux and Fedora) away for free. While <code>Red Hat Enterprise Linux</code> (RHEL) is well tested before release and supported for up to seven years after release, <code>Fedora</code> is a distro with faster updates but without support.</p>"},{"location":"linux_distributions/#ubuntu","title":"Ubuntu","text":"<p>Canonical started sending out free compact discs with <code>Ubuntu</code> Linux in 2004 and quickly became popular for home users (many switching from Microsoft Windows). Canonical wants Ubuntu to be an easy to use graphical Linux desktop without need to ever see a command line. Of course they also want to make a profit by selling support for Ubuntu.</p>"},{"location":"linux_distributions/#debian","title":"Debian","text":"<p>There is no company behind <code>Debian</code>. Instead there are thousands of well organised developers that elect a <code>Debian Project Leader</code> every two years. Debian is seen as one of the most stable Linux distributions. It is also the basis of every release of Ubuntu. Debian comes in three versions: stable, testing and unstable. Every Debian release is named after a character in the movie Toy Story.</p>"},{"location":"linux_distributions/#other","title":"Other","text":"<p>Distributions like CentOS, Oracle Enterprise Linux and Scientific Linux are based on Red Hat Enterprise Linux and share many of the same principles, directories and system administration techniques. <code>Linux Mint</code>, Edubuntu and many other *buntu named distributions are based on Ubuntu and thus share a lot with Debian. There are hundreds of other Linux distributions.</p>"},{"location":"linux_distributions/#which-to-choose","title":"Which to choose ?","text":"<p>Below are some very personal opinions on some of the most popular Linux Distributions. Keep in mind that any of the below Linux distributions can be a stable server and a nice graphical desktop client.</p> <p>distribution name   reason(s) for using</p> <p>Red Hat Enterprise  You are a manager and you want a good support          (RHEL)        contract.</p> <pre><code>     CentOS        You want Red Hat without the support contract from\n                   Red Hat.\n\n     Fedora        You want Red Hat on your laptop/desktop.\n\n   Linux Mint      You want a personal graphical desktop to play\n                   movies, music and games.\n\n     Debian        My personal favorite for servers, laptops, and any\n                   other device.\n\n     Ubuntu        Very popular, based on Debian, not my favorite.\n\n      Kali         You want a pointy-clicky hacking interface.\n\n     others        Advanced users may prefer Arch, Gentoo, OpenSUSE,\n                   Scientific, \\...\n</code></pre> <p>: choosing a Linux distro</p> <p>When you are new to Linux in 2015, go for the latest Mint or Fedora. If you only want to practice the Linux command line then install one Debian server and/or one CentOS server (without graphical interface).</p> <p>Here are some links to help you choose:</p> <pre><code>distrowatch.com\nredhat.com\ncentos.org\ndebian.org\nwww.linuxmint.com\nubuntu.com\n</code></pre>"},{"location":"linux_history/","title":"Linux history","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/)</p> <p>This chapter briefly tells the history of Unix and where Linux fits in.</p> <p>If you are eager to start working with Linux without this blah, blah, blah over history, distributions, and licensing then jump straight to <code>Part II - Chapter 8. Working with Directories</code> page 73.</p>"},{"location":"linux_history/#1969","title":"1969","text":"<p>All modern operating systems have their roots in 1969 when <code>Dennis Ritchie</code> and <code>Ken Thompson</code> developed the C language and the <code>Unix</code> operating system at AT&amp;T Bell Labs. They shared their source code (yes, there was open source back in the Seventies) with the rest of the world, including the hippies in Berkeley California. By 1975, when AT&amp;T started selling Unix commercially, about half of the source code was written by others. The hippies were not happy that a commercial company sold software that they had written; the resulting (legal) battle ended in there being two versions of <code>Unix</code>: the official AT&amp;T Unix, and the free <code>BSD</code> Unix.</p> <p>Development of BSD descendants like FreeBSD, OpenBSD, NetBSD, DragonFly BSD and PC-BSD is still active today.</p> <pre><code>https://en.wikipedia.org/wiki/Dennis_Ritchie\nhttps://en.wikipedia.org/wiki/Ken_Thompson\nhttps://en.wikipedia.org/wiki/BSD\nhttps://en.wikipedia.org/wiki/Comparison_of_BSD_operating_systems\n</code></pre>"},{"location":"linux_history/#1980s","title":"1980s","text":"<p>In the Eighties many companies started developing their own Unix: IBM created AIX, Sun SunOS (later Solaris), HP HP-UX and about a dozen other companies did the same. The result was a mess of Unix dialects and a dozen different ways to do the same thing. And here is the first real root of <code>Linux</code>, when <code>Richard Stallman</code> aimed to end this era of Unix separation and everybody re-inventing the wheel by starting the <code>GNU</code> project (GNU is Not Unix). His goal was to make an operating system that was freely available to everyone, and where everyone could work together (like in the Seventies). Many of the command line tools that you use today on <code>Linux</code> are GNU tools.</p> <pre><code>https://en.wikipedia.org/wiki/Richard_Stallman\nhttps://en.wikipedia.org/wiki/IBM_AIX\nhttps://en.wikipedia.org/wiki/HP-UX\n</code></pre>"},{"location":"linux_history/#1990s","title":"1990s","text":"<p>The Nineties started with <code>Linus Torvalds</code>, a Swedish speaking Finnish student, buying a 386 computer and writing a brand new POSIX compliant kernel. He put the source code online, thinking it would never support anything but 386 hardware. Many people embraced the combination of this kernel with the GNU tools, and the rest, as they say, is history.</p> <pre><code>http://en.wikipedia.org/wiki/Linus_Torvalds\nhttps://en.wikipedia.org/wiki/History_of_Linux\nhttps://en.wikipedia.org/wiki/Linux\nhttps://lwn.net\nhttp://www.levenez.com/unix/   (a huge Unix history poster)\n</code></pre>"},{"location":"linux_history/#2015","title":"2015","text":"<p>Today more than 97 percent of the world\\'s supercomputers (including the complete top 10), more than 80 percent of all smartphones, many millions of desktop computers, around 70 percent of all web servers, a large chunk of tablet computers, and several appliances (dvd-players, washing machines, dsl modems, routers, self-driving cars, space station laptops...) run <code>Linux</code>. Linux is by far the most commonly used operating system in the world.</p> <p>Linux kernel version 4.0 was released in April 2015. Its source code grew by several hundred thousand lines (compared to version 3.19 from February 2015) thanks to contributions of thousands of developers paid by hundreds of commercial companies including Red Hat, Intel, Samsung, Broadcom, Texas Instruments, IBM, Novell, Qualcomm, Nokia, Oracle, Google, AMD and even Microsoft (and many more).</p> <pre><code>http://kernelnewbies.org/DevelopmentStatistics\nhttp://kernel.org\nhttp://www.top500.org\n</code></pre>"},{"location":"man_pages/","title":"man pages","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/)</p> <p>This chapter will explain the use of <code>man</code> pages (also called <code>manual pages</code>) on your Unix or Linux computer.</p> <p>You will learn the <code>man</code> command together with related commands like <code>whereis</code>, <code>whatis</code> and <code>mandb</code>.</p> <p>Most Unix files and commands have pretty good man pages to explain their use. Man pages also come in handy when you are using multiple flavours of Unix or several Linux distributions since options and parameters sometimes vary.</p>"},{"location":"man_pages/#man-command","title":"man $command","text":"<p>Type <code>man</code> followed by a command (for which you want help) and start reading. Press <code>q</code> to quit the manpage. Some man pages contain examples (near the end).</p> <pre><code>paul@laika:~$ man whois\nReformatting whois(1), please wait...\n</code></pre>"},{"location":"man_pages/#man-configfile","title":"man $configfile","text":"<p>Most <code>configuration files</code> have their own manual.</p> <pre><code>paul@laika:~$ man syslog.conf\nReformatting syslog.conf(5), please wait...\n</code></pre>"},{"location":"man_pages/#man-daemon","title":"man $daemon","text":"<p>This is also true for most <code>daemons</code> (background programs) on your system..</p> <pre><code>paul@laika:~$ man syslogd\nReformatting syslogd(8), please wait...\n</code></pre>"},{"location":"man_pages/#man-k-apropos","title":"man -k (apropos)","text":"<p><code>man -k</code> (or <code>apropos</code>) shows a list of man pages containing a string.</p> <pre><code>paul@laika:~$ man -k syslog\nlm-syslog-setup (8)  - configure laptop mode to switch syslog.conf ...\nlogger (1)           - a shell command interface to the syslog(3) ...\nsyslog-facility (8)  - Setup and remove LOCALx facility for sysklogd\nsyslog.conf (5)      - syslogd(8) configuration file\nsyslogd (8)          - Linux system logging utilities.\nsyslogd-listfiles (8) - list system logfiles\n</code></pre>"},{"location":"man_pages/#whatis","title":"whatis","text":"<p>To see just the description of a manual page, use <code>whatis</code> followed by a string.</p> <pre><code>paul@u810:~$ whatis route\nroute (8)            - show / manipulate the IP routing table\n</code></pre>"},{"location":"man_pages/#whereis","title":"whereis","text":"<p>The location of a manpage can be revealed with <code>whereis</code>.</p> <pre><code>paul@laika:~$ whereis -m whois\nwhois: /usr/share/man/man1/whois.1.gz\n</code></pre> <p>This file is directly readable by <code>man</code>.</p> <pre><code>paul@laika:~$ man /usr/share/man/man1/whois.1.gz\n</code></pre>"},{"location":"man_pages/#man-sections","title":"man sections","text":"<p>By now you will have noticed the numbers between the round brackets. <code>man man</code> will explain to you that these are section numbers. Executable programs and shell commands reside in section one.</p> <pre><code>1 Executable programs or shell commands\n2 System calls (functions provided by the kernel)\n3 Library calls (functions within program libraries)\n4 Special files (usually found in /dev)\n5 File formats and conventions eg /etc/passwd\n6 Games\n7 Miscellaneous (including macro packages and conventions), e.g. man(7)\n8 System administration commands (usually only for root)\n9 Kernel routines [Non standard]\n</code></pre>"},{"location":"man_pages/#man-section-file","title":"man $section $file","text":"<p>Therefor, when referring to the man page of the passwd command, you will see it written as <code>passwd(1)</code>; when referring to the <code>passwd file</code>, you will see it written as <code>passwd(5)</code>. The screenshot explains how to open the man page in the correct section.</p> <pre><code>[paul@RHEL52 ~]$ man passwd      # opens the first manual found\n[paul@RHEL52 ~]$ man 5 passwd    # opens a page from section 5\n</code></pre>"},{"location":"man_pages/#man-man","title":"man man","text":"<p>If you want to know more about <code>man</code>, then Read The Fantastic Manual (RTFM).</p> <p>Unfortunately, manual pages do not have the answer to everything...</p> <pre><code>paul@laika:~$ man woman\nNo manual entry for woman\n</code></pre>"},{"location":"man_pages/#mandb","title":"mandb","text":"<p>Should you be convinced that a man page exists, but you can\\'t access it, then try running <code>mandb</code> on Debian/Mint.</p> <pre><code>root@laika:~# mandb\n0 man subdirectories contained newer manual pages.\n0 manual pages were added.\n0 stray cats were added.\n0 old database entries were purged.\n</code></pre> <p>Or run <code>makewhatis</code> on CentOS/Redhat.</p> <pre><code>[root@centos65 ~]# apropos scsi\nscsi: nothing appropriate\n[root@centos65 ~]# makewhatis \n[root@centos65 ~]# apropos scsi\nhpsa                 (4)  - HP Smart Array SCSI driver\nlsscsi               (8)  - list SCSI devices (or hosts) and their attributes\nsd                   (4)  - Driver for SCSI Disk Drives\nst                   (4)  - SCSI tape device\n</code></pre>"},{"location":"regular_expressions/","title":"regular expressions","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p><code>Regular expressions</code> are a very powerful tool in Linux. They can be used with a variety of programs like bash, vi, rename, grep, sed, and more.</p> <p>This chapter introduces you to the basics of <code>regular expressions</code>.</p>"},{"location":"regular_expressions/#regex-versions","title":"regex versions","text":"<p>There are three different versions of regular expression syntax:</p> <pre><code>BRE: Basic Regular Expressions\nERE: Extended Regular Expressions\nPRCE: Perl Regular Expressions\n</code></pre> <p>Depending on the tool being used, one or more of these syntaxes can be used.</p> <p>For example the <code>grep</code> tool has the <code>-E</code> option to force a string to be read as ERE while <code>-G</code> forces BRE and <code>-P</code> forces PRCE.</p> <p>Note that <code>grep</code> also has <code>-F</code> to force the string to be read literally.</p> <p>The <code>sed</code> tool also has options to choose a regex syntax.</p> <p><code>Read the manual of the tools you use!</code></p>"},{"location":"regular_expressions/#grep","title":"grep","text":""},{"location":"regular_expressions/#print-lines-matching-a-pattern","title":"print lines matching a pattern","text":"<p><code>grep</code> is a popular Linux tool to search for lines that match a certain pattern. Below are some examples of the simplest <code>regular expressions</code>.</p> <p>This is the contents of the test file. This file contains three lines (or three <code>newline</code> characters).</p> <pre><code>paul@rhel65:~$ cat names\nTania\nLaura\nValentina\n</code></pre> <p>When <code>grepping</code> for a single character, only the lines containing that character are returned.</p> <pre><code>paul@rhel65:~$ grep u names\nLaura\npaul@rhel65:~$ grep e names\nValentina\npaul@rhel65:~$ grep i names\nTania\nValentina\n</code></pre> <p>The pattern matching in this example should be very straightforward; if the given character occurs on a line, then <code>grep</code> will return that line.</p>"},{"location":"regular_expressions/#concatenating-characters","title":"concatenating characters","text":"<p>Two concatenated characters will have to be concatenated in the same way to have a match.</p> <p>This example demonstrates that <code>ia</code> will match Tan<code>ia</code> but not V<code>a</code>lent<code>i</code>na and <code>in</code> will match Valent<code>in</code>a but not Ta<code>ni</code>a.</p> <pre><code>paul@rhel65:~$ grep a names\nTania\nLaura\nValentina\npaul@rhel65:~$ grep ia names\nTania\npaul@rhel65:~$ grep in names\nValentina\npaul@rhel65:~$\n</code></pre>"},{"location":"regular_expressions/#one-or-the-other","title":"one or the other","text":"<p>PRCE and ERE both use the pipe symbol to signify OR. In this example we <code>grep</code> for lines containing the letter i or the letter a.</p> <pre><code>paul@debian10:~$ cat list \nTania\nLaura\npaul@debian10:~$ grep -E 'i|a' list \nTania\nLaura\n</code></pre> <p>Note that we use the <code>-E</code> switch of grep to force interpretion of our string as an ERE.</p> <p>We need to <code>escape</code> the pipe symbol in a BRE to get the same logical OR.</p> <pre><code>paul@debian10:~$ grep -G 'i|a' list \npaul@debian10:~$ grep -G 'i\\|a' list \nTania\nLaura\n</code></pre>"},{"location":"regular_expressions/#one-or-more","title":"one or more","text":"<p>The <code>*</code> signifies zero, one or more occurences of the previous and the <code>+</code> signifies one or more of the previous.</p> <pre><code>paul@debian10:~$ cat list2\nll\nlol\nlool\nloool\npaul@debian10:~$ grep -E 'o*' list2\nll\nlol\nlool\nloool\npaul@debian10:~$ grep -E 'o+' list2\nlol\nlool\nloool\npaul@debian10:~$\n</code></pre>"},{"location":"regular_expressions/#match-the-end-of-a-string","title":"match the end of a string","text":"<p>For the following examples, we will use this file.</p> <pre><code>paul@debian10:~$ cat names \nTania\nLaura\nValentina\nFleur\nFloor\n</code></pre> <p>The two examples below show how to use the <code>dollar character</code> to match the end of a string.</p> <pre><code>paul@debian10:~$ grep a$ names \nTania\nLaura\nValentina\npaul@debian10:~$ grep r$ names \nFleur\nFloor\n</code></pre>"},{"location":"regular_expressions/#match-the-start-of-a-string","title":"match the start of a string","text":"<p>The <code>caret character (^)</code> will match a string at the start (or the beginning) of a line.</p> <p>Given the same file as above, here are two examples.</p> <pre><code>paul@debian10:~$ grep ^Val names \nValentina\npaul@debian10:~$ grep ^F names \nFleur\nFloor\n</code></pre> <p>Both the dollar sign and the little hat are called <code>anchors</code> in a regex.</p>"},{"location":"regular_expressions/#separating-words","title":"separating words","text":"<p>Regular expressions use a <code>\\b</code> sequence to reference a word separator. Take for example this file:</p> <pre><code>paul@debian10:~$ cat text\nThe governer is governing.\nThe winter is over.\nCan you get over there?\n</code></pre> <p>Simply grepping for <code>over</code> will give too many results.</p> <pre><code>paul@debian10:~$ grep over text\nThe governer is governing.\nThe winter is over.\nCan you get over there?\n</code></pre> <p>Surrounding the searched word with spaces is not a good solution (because other characters can be word separators). This screenshot below show how to use <code>\\b</code> to find only the searched word:</p> <pre><code>paul@debian10:~$ grep '\\bover\\b' text\nThe winter is over.\nCan you get over there?\npaul@debian10:~$\n</code></pre> <p>Note that <code>grep</code> also has a <code>-w</code> option to grep for words.</p> <pre><code>paul@debian10:~$ cat text \nThe governer is governing.\nThe winter is over.\nCan you get over there?\npaul@debian10:~$ grep -w over text\nThe winter is over.\nCan you get over there?\npaul@debian10:~$\n</code></pre>"},{"location":"regular_expressions/#grep-features","title":"grep features","text":"<p>Sometimes it is easier to combine a simple regex with <code>grep</code> options, than it is to write a more complex regex. These options where discussed before:</p> <pre><code>grep -i\ngrep -v\ngrep -w\ngrep -A5\ngrep -B5\ngrep -C5\n</code></pre>"},{"location":"regular_expressions/#preventing-shell-expansion-of-a-regex","title":"preventing shell expansion of a regex","text":"<p>The dollar sign is a special character, both for the regex and also for the shell (remember variables and embedded shells). Therefore it is advised to always quote the regex, this prevents shell expansion.</p> <pre><code>paul@debian10:~$ grep 'r$' names \nFleur\nFloor\n</code></pre>"},{"location":"regular_expressions/#rename","title":"rename","text":""},{"location":"regular_expressions/#the-rename-command","title":"the rename command","text":"<p>On Debian Linux the <code>/usr/bin/rename</code> command is a link to <code>/usr/bin/prename</code> installed by the <code>perl</code> package.</p> <pre><code>paul@pi ~ $ dpkg -S $(readlink -f $(which rename))\nperl: /usr/bin/prename\n</code></pre> <p>Red Hat derived systems do not install the same <code>rename</code> command, so this section does not describe <code>rename</code> on Red Hat (unless you copy the perl script manually).</p> <p><code>There is often confusion on the internet about the rename command because solutions that work fine in Debian (and Ubuntu, xubuntu, Mint, ...) cannot be used in Red Hat (and CentOS, Fedora, ...).</code></p>"},{"location":"regular_expressions/#perl","title":"perl","text":"<p>The <code>rename</code> command is actually a perl script that uses <code>perl regular expressions</code>. The complete manual for these can be found by typing <code>perldoc perlrequick</code> (after installing <code>perldoc</code>).</p> <pre><code>root@pi:~# aptitude install perl-doc\nThe following NEW packages will be installed:\n  perl-doc\n0 packages upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 8,170 kB of archives. After unpacking 13.2 MB will be used.\nGet: 1 http://mirrordirector.raspbian.org/raspbian/ wheezy/main perl-do...\nFetched 8,170 kB in 19s (412 kB/s)\nSelecting previously unselected package perl-doc.\n(Reading database ... 67121 files and directories currently installed.)\nUnpacking perl-doc (from .../perl-doc_5.14.2-21+rpi2_all.deb) ...\nAdding 'diversion of /usr/bin/perldoc to /usr/bin/perldoc.stub by perl-doc'\nProcessing triggers for man-db ...\nSetting up perl-doc (5.14.2-21+rpi2) ...\n\nroot@pi:~# perldoc perlrequick\n</code></pre>"},{"location":"regular_expressions/#well-known-syntax","title":"well known syntax","text":"<p>The most common use of the <code>rename</code> is to search for filenames matching a certain <code>string</code> and replacing this string with an <code>other string</code>.</p> <p>This is often presented as <code>s/string/other string/</code> as seen in this example:</p> <pre><code>paul@pi ~ $ ls\nabc       allfiles.TXT  bllfiles.TXT  Scratch   tennis2.TXT\nabc.conf  backup        cllfiles.TXT  temp.TXT  tennis.TXT\npaul@pi ~ $ rename 's/TXT/text/' *\npaul@pi ~ $ ls\nabc       allfiles.text  bllfiles.text  Scratch    tennis2.text\nabc.conf  backup         cllfiles.text  temp.text  tennis.text\n</code></pre> <p>And here is another example that uses <code>rename</code> with the well know syntax to change the extensions of the same files once more:</p> <pre><code>paul@pi ~ $ ls\nabc       allfiles.text  bllfiles.text  Scratch    tennis2.text\nabc.conf  backup         cllfiles.text  temp.text  tennis.text\npaul@pi ~ $ rename 's/text/txt/' *.text\npaul@pi ~ $ ls\nabc       allfiles.txt  bllfiles.txt  Scratch   tennis2.txt\nabc.conf  backup        cllfiles.txt  temp.txt  tennis.txt\npaul@pi ~ $\n</code></pre> <p>These two examples appear to work because the strings we used only exist at the end of the filename. Remember that file extensions have no meaning in the bash shell.</p> <p>The next example shows what can go wrong with this syntax.</p> <pre><code>paul@pi ~ $ touch atxt.txt\npaul@pi ~ $ rename 's/txt/problem/' atxt.txt\npaul@pi ~ $ ls\nabc       allfiles.txt  backup        cllfiles.txt  temp.txt     tennis.txt\nabc.conf  aproblem.txt  bllfiles.txt  Scratch       tennis2.txt\npaul@pi ~ $\n</code></pre> <p>Only the first occurrence of the searched string is replaced.</p>"},{"location":"regular_expressions/#a-global-replace","title":"a global replace","text":"<p>The syntax used in the previous example can be described as <code>s/regex/replacement/</code>. This is simple and straightforward, you enter a <code>regex</code> between the first two slashes and a <code>replacement string</code> between the last two.</p> <p>This example expands this syntax only a little, by adding a <code>modifier</code>.</p> <pre><code>paul@pi ~ $ rename -n 's/TXT/txt/g' aTXT.TXT\naTXT.TXT renamed as atxt.txt\npaul@pi ~ $\n</code></pre> <p>The syntax we use now can be described as <code>s/regex/replacement/g</code> where s signifies <code>switch</code> and g stands for <code>global</code>.</p> <p>Note that this example used the <code>-n</code> switch to show what is being done (instead of actually renaming the file).</p>"},{"location":"regular_expressions/#case-insensitive-replace","title":"case insensitive replace","text":"<p>Another <code>modifier</code> that can be useful is <code>i</code>. this example shows how to replace a case insensitive string with another string.</p> <pre><code>paul@debian10:~/files$ ls\nfile1.text  file2.TEXT  file3.txt\npaul@debian10:~/files$ rename 's/.text/.txt/i' *\npaul@debian10:~/files$ ls\nfile1.txt  file2.txt  file3.txt\npaul@debian10:~/files$\n</code></pre>"},{"location":"regular_expressions/#renaming-extensions","title":"renaming extensions","text":"<p>Command line Linux has no knowledge of MS-DOS like extensions, but many end users and graphical application do use them.</p> <p>Here is an example on how to use <code>rename</code> to only rename the file extension. It uses the dollar sign to mark the ending of the filename.</p> <pre><code>paul@pi ~ $ ls *.txt\nallfiles.txt  bllfiles.txt  cllfiles.txt  really.txt.txt  temp.txt  tennis.txt\npaul@pi ~ $ rename 's/.txt$/.TXT/' *.txt\npaul@pi ~ $ ls *.TXT\nallfiles.TXT  bllfiles.TXT    cllfiles.TXT    really.txt.TXT\ntemp.TXT      tennis.TXT\npaul@pi ~ $\n</code></pre> <p>Note that the <code>dollar sign</code> in the regex means <code>at the end</code>. Without the dollar sign this command would fail on the really.txt.txt file.</p>"},{"location":"regular_expressions/#sed","title":"sed","text":""},{"location":"regular_expressions/#stream-editor","title":"stream editor","text":"<p>The <code>stream editor</code> or short <code>sed</code> uses <code>regex</code> for stream editing.</p> <p>In this example <code>sed</code> is used to replace a string.</p> <pre><code>echo Sunday | sed 's/Sun/Mon/'\nMonday\n</code></pre> <p>The slashes can be replaced by a couple of other characters, which can be handy in some cases to improve readability.</p> <pre><code>echo Sunday | sed 's:Sun:Mon:'\nMonday\necho Sunday | sed 's_Sun_Mon_'\nMonday\necho Sunday | sed 's|Sun|Mon|'\nMonday\n</code></pre>"},{"location":"regular_expressions/#interactive-editor","title":"interactive editor","text":"<p>While <code>sed</code> is meant to be used in a stream, it can also be used interactively on a file.</p> <pre><code>paul@debian10:~/files$ echo Sunday &gt; today\npaul@debian10:~/files$ cat today \nSunday\npaul@debian10:~/files$ sed -i 's/Sun/Mon/' today\npaul@debian10:~/files$ cat today \nMonday\n</code></pre>"},{"location":"regular_expressions/#simple-back-referencing","title":"simple back referencing","text":"<p>The <code>ampersand</code> character can be used to reference the searched (and found) string.</p> <p>In this example the <code>ampersand</code> is used to double the occurence of the found string.</p> <pre><code>echo Sunday | sed 's/Sun/&amp;&amp;/'\nSunSunday\necho Sunday | sed 's/day/&amp;&amp;/'\nSundayday\n</code></pre>"},{"location":"regular_expressions/#back-referencing","title":"back referencing","text":"<p>Parentheses (often called round brackets) are used to group sections of the regex so they can leter be referenced.</p> <p>Consider this simple example:</p> <pre><code>paul@debian10:~$ echo Sunday | sed 's_\\(Sun\\)_\\1ny_'\nSunnyday\npaul@debian10:~$ echo Sunday | sed 's_\\(Sun\\)_\\1ny \\1_'\nSunny Sunday\n</code></pre>"},{"location":"regular_expressions/#a-dot-for-any-character","title":"a dot for any character","text":"<p>In a <code>regex</code> a simple dot can signify any character.</p> <pre><code>paul@debian10:~$ echo 2014-04-01 | sed 's/....-..-../YYYY-MM-DD/'\nYYYY-MM-DD\npaul@debian10:~$ echo abcd-ef-gh | sed 's/....-..-../YYYY-MM-DD/'\nYYYY-MM-DD\n</code></pre>"},{"location":"regular_expressions/#multiple-back-referencing","title":"multiple back referencing","text":"<p>When more than one pair of <code>parentheses</code> is used, each of them can be referenced separately by consecutive numbers.</p> <pre><code>paul@debian10:~$ echo 2014-04-01 | sed 's/\\(....\\)-\\(..\\)-\\(..\\)/\\1+\\2+\\3/'\n2014+04+01\npaul@debian10:~$ echo 2014-04-01 | sed 's/\\(....\\)-\\(..\\)-\\(..\\)/\\3:\\2:\\1/'\n01:04:2014\n</code></pre> <p>This feature is called <code>grouping</code>.</p>"},{"location":"regular_expressions/#white-space","title":"white space","text":"<p>The <code>\\s</code> can refer to white space such as a space or a tab.</p> <p>This example looks for white spaces (\\s) globally and replaces them with 1 space.</p> <pre><code>paul@debian10:~$ echo -e 'today\\tis\\twarm'\ntoday   is      warm\npaul@debian10:~$ echo -e 'today\\tis\\twarm' | sed 's_\\s_ _g'\ntoday is warm\n</code></pre>"},{"location":"regular_expressions/#optional-occurrence","title":"optional occurrence","text":"<p>A question mark signifies that the previous is <code>optional</code>.</p> <p>The example below searches for three consecutive letter o, but the third o is optional.</p> <pre><code>paul@debian10:~$ cat list2\nll\nlol\nlool\nloool\npaul@debian10:~$ grep -E 'ooo?' list2\nlool\nloool\npaul@debian10:~$ cat list2 | sed 's/ooo\\?/A/'\nll\nlol\nlAl\nlAl\n</code></pre>"},{"location":"regular_expressions/#exactly-n-times","title":"exactly n times","text":"<p>You can demand an exact number of times the oprevious has to occur.</p> <p>This example wants exactly three o\\'s.</p> <pre><code>paul@debian10:~$ cat list2\nll\nlol\nlool\nloool\npaul@debian10:~$ grep -E 'o{3}' list2\nloool\npaul@debian10:~$ cat list2 | sed 's/o\\{3\\}/A/'\nll\nlol\nlool\nlAl\npaul@debian10:~$\n</code></pre>"},{"location":"regular_expressions/#between-n-and-m-times","title":"between n and m times","text":"<p>And here we demand exactly from minimum 2 to maximum 3 times.</p> <pre><code>paul@debian10:~$ cat list2\nll\nlol\nlool\nloool\npaul@debian10:~$ grep -E 'o{2,3}' list2\nlool\nloool\npaul@debian10:~$ grep 'o\\{2,3\\}' list2\nlool\nloool\npaul@debian10:~$ cat list2 | sed 's/o\\{2,3\\}/A/'\nll\nlol\nlAl\nlAl\npaul@debian10:~$\n</code></pre>"},{"location":"regular_expressions/#bash-history","title":"bash history","text":"<p>The <code>bash shell</code> can also interprete some regular expressions.</p> <p>This example shows how to manipulate the exclamation mask history feature of the bash shell.</p> <pre><code>paul@debian10:~$ mkdir hist\npaul@debian10:~$ cd hist/\npaul@debian10:~/hist$ touch file1 file2 file3\npaul@debian10:~/hist$ ls -l file1\n-rw-r--r-- 1 paul paul 0 Apr 15 22:07 file1\npaul@debian10:~/hist$ !l\nls -l file1\n-rw-r--r-- 1 paul paul 0 Apr 15 22:07 file1\npaul@debian10:~/hist$ !l:s/1/3\nls -l file3\n-rw-r--r-- 1 paul paul 0 Apr 15 22:07 file3\npaul@debian10:~/hist$\n</code></pre> <p>This also works with the history numbers in bash.</p> <pre><code>paul@debian10:~/hist$ history 6\n 2089  mkdir hist\n 2090  cd hist/\n 2091  touch file1 file2 file3\n 2092  ls -l file1\n 2093  ls -l file3\n 2094  history 6\npaul@debian10:~/hist$ !2092\nls -l file1\n-rw-r--r-- 1 paul paul 0 Apr 15 22:07 file1\npaul@debian10:~/hist$ !2092:s/1/2\nls -l file2\n-rw-r--r-- 1 paul paul 0 Apr 15 22:07 file2\npaul@debian10:~/hist$\n</code></pre>"},{"location":"scripting_adv/","title":"more scripting","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p>"},{"location":"scripting_adv/#eval","title":"eval","text":"<p><code>eval</code> reads arguments as input to the shell (the resulting commands are executed). This allows using the value of a variable as a variable.</p> <pre><code>paul@deb106:~/test42$ answer=42\npaul@deb106:~/test42$ word=answer\npaul@deb106:~/test42$ eval x=\\$$word ; echo $x\n42\n</code></pre> <p>Both in <code>bash</code> and <code>Korn</code> the arguments can be quoted.</p> <pre><code>kahlan@solexp11$ answer=42\nkahlan@solexp11$ word=answer\nkahlan@solexp11$ eval \"y=\\$$word\" ; echo $y\n42\n</code></pre> <p>Sometimes the <code>eval</code> is needed to have correct parsing of arguments. Consider this example where the <code>date</code> command receives one parameter <code>1 week ago</code>.</p> <pre><code>paul@debian6~$ date --date=\"1 week ago\"\nThu Mar  8 21:36:25 CET 2012\n</code></pre> <p>When we set this command in a variable, then executing that variable fails unless we use <code>eval</code>.</p> <pre><code>paul@debian6~$ lastweek='date --date=\"1 week ago\"'\npaul@debian6~$ $lastweek\ndate: extra operand `ago\"'\nTry `date --help' for more information.\npaul@debian6~$ eval $lastweek\nThu Mar  8 21:36:39 CET 2012\n</code></pre>"},{"location":"scripting_adv/#_1","title":"(( ))","text":"<p>The <code>(( ))</code> allows for evaluation of numerical expressions.</p> <pre><code>paul@deb106:~/test42$ (( 42 &gt; 33 )) &amp;&amp; echo true || echo false\ntrue\npaul@deb106:~/test42$ (( 42 &gt; 1201 )) &amp;&amp; echo true || echo false\nfalse\npaul@deb106:~/test42$ var42=42\npaul@deb106:~/test42$ (( 42 == var42 )) &amp;&amp; echo true || echo false\ntrue\npaul@deb106:~/test42$ (( 42 == $var42 )) &amp;&amp; echo true || echo false\ntrue\npaul@deb106:~/test42$ var42=33\npaul@deb106:~/test42$ (( 42 == var42 )) &amp;&amp; echo true || echo false\nfalse\n</code></pre>"},{"location":"scripting_adv/#let","title":"let","text":"<p>The <code>let</code> built-in shell function instructs the shell to perform an evaluation of arithmetic expressions. It will return 0 unless the last arithmetic expression evaluates to 0.</p> <pre><code>[paul@RHEL8b ~]$ let x=\"3 + 4\" ; echo $x\n7\n[paul@RHEL8b ~]$ let x=\"10 + 100/10\" ; echo $x\n20\n[paul@RHEL8b ~]$ let x=\"10-2+100/10\" ; echo $x\n18\n[paul@RHEL8b ~]$ let x=\"10*2+100/10\" ; echo $x\n30\n</code></pre> <p>The <code>shell</code> can also convert between different bases.</p> <pre><code>[paul@RHEL8b ~]$ let x=\"0xFF\" ; echo $x\n255\n[paul@RHEL8b ~]$ let x=\"0xC0\" ; echo $x\n192\n[paul@RHEL8b ~]$ let x=\"0xA8\" ; echo $x\n168\n[paul@RHEL8b ~]$ let x=\"8#70\" ; echo $x\n56\n[paul@RHEL8b ~]$ let x=\"8#77\" ; echo $x\n63\n[paul@RHEL8b ~]$ let x=\"16#c0\" ; echo $x\n192\n</code></pre> <p>There is a difference between assigning a variable directly, or using <code>let</code> to evaluate the arithmetic expressions (even if it is just assigning a value).</p> <pre><code>kahlan@solexp11$ dec=15 ; oct=017 ; hex=0x0f \nkahlan@solexp11$ echo $dec $oct $hex \n15 017 0x0f \nkahlan@solexp11$ let dec=15 ; let oct=017 ; let hex=0x0f\nkahlan@solexp11$ echo $dec $oct $hex\n15 15 15\n</code></pre>"},{"location":"scripting_adv/#case","title":"case","text":"<p>You can sometimes simplify nested if statements with a <code>case</code> construct.</p> <pre><code>[paul@RHEL8b ~]$ ./help\nWhat animal did you see ? lion\nYou better start running fast!\n[paul@RHEL8b ~]$ ./help\nWhat animal did you see ? dog\nDon't worry, give it a cookie.\n[paul@RHEL8b ~]$ cat help\n#!/bin/bash\n#\n# Wild Animals Helpdesk Advice\n#\necho -n \"What animal did you see ? \"\nread animal\ncase $animal in\n        \"lion\" | \"tiger\")\n                echo \"You better start running fast!\"\n        ;;\n        \"cat\")\n                echo \"Let that mouse go...\"\n        ;;\n        \"dog\")\n                echo \"Don't worry, give it a cookie.\"\n        ;;\n        \"chicken\" | \"goose\" | \"duck\" )\n                echo \"Eggs for breakfast!\"\n        ;;\n        \"liger\")\n                echo \"Approach and say 'Ah you big fluffy kitty...'.\"\n        ;;\n        \"babelfish\")\n                echo \"Did it fall out your ear ?\"\n        ;;\n        *)\n                echo \"You discovered an unknown animal, name it!\"\n        ;;\nesac\n[paul@RHEL8b ~]$\n</code></pre>"},{"location":"scripting_adv/#shell-functions","title":"shell functions","text":"<p>Shell <code>functions</code> can be used to group commands in a logical way.</p> <pre><code>kahlan@solexp11$ cat funcs.ksh \n#!/bin/ksh\n\nfunction greetings {\necho Hello World!\necho and hello to $USER to!\n}\n\necho We will now call a function\ngreetings\necho The end\n</code></pre> <p>This is sample output from this script with a <code>function</code>.</p> <pre><code>kahlan@solexp11$ ./funcs.ksh              \nWe will now call a function\nHello World!\nand hello to kahlan to!\nThe end\n</code></pre> <p>A shell function can also receive parameters.</p> <pre><code>kahlan@solexp11$ cat addfunc.ksh \n#!/bin/ksh\n\nfunction plus {\nlet result=\"$1 + $2\"\necho  $1 + $2 = $result\n}\n\nplus 3 10\nplus 20 13\nplus 20 22\n</code></pre> <p>This script produces the following output.</p> <pre><code>kahlan@solexp11$ ./addfunc.ksh \n3 + 10 = 13\n20 + 13 = 33\n20 + 22 = 42\n</code></pre>"},{"location":"scripting_adv/#practice-more-scripting","title":"practice : more scripting","text":"<p>1. Write a script that asks for two numbers, and outputs the sum and product (as shown here).</p> <pre><code>Enter a number: 5\nEnter another number: 2\n\nSum:       5 + 2 = 7\nProduct:   5 x 2 = 10\n</code></pre> <p>2. Improve the previous script to test that the numbers are between 1 and 100, exit with an error if necessary.</p> <p>3. Improve the previous script to congratulate the user if the sum equals the product.</p> <p>4. Write a script with a case insensitive case statement, using the shopt nocasematch option. The nocasematch option is reset to the value it had before the scripts started.</p> <p>5. If time permits (or if you are waiting for other students to finish this practice), take a look at Linux system scripts in /etc/init.d and /etc/rc.d and try to understand them. Where does execution of a script start in /etc/init.d/samba ? There are also some hidden scripts in \\~, we will discuss them later.</p>"},{"location":"scripting_adv/#solution-more-scripting","title":"solution : more scripting","text":"<p>1. Write a script that asks for two numbers, and outputs the sum and product (as shown here).</p> <pre><code>Enter a number: 5\nEnter another number: 2\n\nSum:       5 + 2 = 7\nProduct:   5 x 2 = 10\n\n\n#!/bin/bash\n\necho -n \"Enter a number : \"\nread n1\n\necho -n \"Enter another number : \"\nread n2\n\nlet sum=\"$n1+$n2\"\nlet pro=\"$n1*$n2\"\n\necho -e \"Sum\\t: $n1 + $n2 = $sum\" \necho -e \"Product\\t: $n1 * $n2 = $pro\"\n</code></pre> <p>2. Improve the previous script to test that the numbers are between 1 and 100, exit with an error if necessary.</p> <pre><code>echo -n \"Enter a number between 1 and 100 : \"\nread n1\n\nif [ $n1 -lt 1 -o $n1 -gt 100 ]\nthen\n       echo Wrong number... \n       exit 1\nfi\n</code></pre> <p>3. Improve the previous script to congratulate the user if the sum equals the product.</p> <pre><code>if [ $sum -eq $pro ] \nthen echo Congratulations $sum == $pro\nfi\n</code></pre> <p>4. Write a script with a case insensitive case statement, using the shopt nocasematch option. The nocasematch option is reset to the value it had before the scripts started.</p> <pre><code>#!/bin/bash\n#\n# Wild Animals Case Insensitive Helpdesk Advice\n#\n\nif shopt -q nocasematch; then\n  nocase=yes;\nelse\n  nocase=no;\n  shopt -s nocasematch;\nfi\n\necho -n \"What animal did you see ? \"\nread animal\n\ncase $animal in\n        \"lion\" | \"tiger\")\n                echo \"You better start running fast!\"\n        ;;\n        \"cat\")\n                echo \"Let that mouse go...\"\n        ;;\n        \"dog\")\n                echo \"Don't worry, give it a cookie.\"\n        ;;\n        \"chicken\" | \"goose\" | \"duck\" )\n                echo \"Eggs for breakfast!\"\n        ;;\n        \"liger\")\n                echo \"Approach and say 'Ah you big fluffy kitty.'\"\n        ;;\n        \"babelfish\")\n                echo \"Did it fall out your ear ?\"\n        ;;\n        *)\n                echo \"You discovered an unknown animal, name it!\"\n        ;;\nesac\n\nif [ nocase = yes ] ; then\n        shopt -s nocasematch;\nelse\n        shopt -u nocasematch;\nfi\n</code></pre> <p>5. If time permits (or if you are waiting for other students to finish this practice), take a look at Linux system scripts in /etc/init.d and /etc/rc.d and try to understand them. Where does execution of a script start in /etc/init.d/samba ? There are also some hidden scripts in \\~, we will discuss them later.</p>"},{"location":"scripting_intro/","title":"introduction to scripting","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>A scripting or script language is a <code>programming language</code> for a special run-time environment/shells that automates the execution of commands one-by-one or line-by-line by a its user. Scripting languages are often interpreted, rather than compiled.</p> <p>Shells like <code>sh</code>, <code>ksh</code> and <code>bash</code> have support for programming constructs that can be saved as<code>scripts</code>. These <code>scripts</code> can be converted into <code>shell</code> commands. Many UNIX/Linux commands are essentially <code>scripts</code> that were placed in various <code>/bin``/usr/bin</code>, <code>/usr/sbin</code> or <code>/sbin</code>. Some of these <code>scripts</code> can be inserted as <code>User profile scripts</code> that run when a user logins or can become to be <code>init scripts</code>, which are run when a <code>daemon</code> is started or stopped. Subsequently, This means that system administrators or SysOps also need solid knowledge of <code>scripting</code> to understand how their servers and their applications are started, updated, upgraded, patched, maintained, configured and removed, and also to understand how a user environment is built.</p> <p>The goal of this chapter is to give you all the information in order to read, write and understand small, long and complex scripts.</p>"},{"location":"scripting_intro/#prerequisites","title":"prerequisites","text":"<p>You should have read and understood <code>part III shell expansion</code> and <code>part IV pipes and commands</code> before starting this chapter.</p>"},{"location":"scripting_intro/#hello-world","title":"hello world","text":"<p>Just like in every programming course, we start with a simple <code>hello_world</code> script. The following script will output <code>Hello World</code>.</p> <pre><code>echo Hello World\n</code></pre> <p>After creating this simple script in <code>vi</code> or with <code>echo</code>, you\\'ll have to <code>chmod +x hello_world</code> to make it executable. And unless you add the scripts directory to your path, you\\'ll have to type the path to the script for the shell to be able to find it.</p> <pre><code>[paul@RHEL8a ~]$ echo echo Hello World &gt; hello_world\n[paul@RHEL8a ~]$ chmod +x hello_world \n[paul@RHEL8a ~]$ ./hello_world \nHello World\n[paul@RHEL8a ~]$\n</code></pre>"},{"location":"scripting_intro/#she-bang","title":"she-bang","text":"<p>Let\\'s expand our example a little further by putting <code>#!/bin/bash</code> on the first line of the script. The <code>#!</code> is called a <code>she-bang</code> (sometimes called <code>sha-bang</code>), where the <code>she-bang</code> is the first two characters of the script.</p> <pre><code>#!/bin/bash\necho Hello World\n</code></pre> <p>You can never be sure which shell a user is running. A script that works flawlessly in <code>bash</code> might not work in <code>ksh</code>, <code>csh</code>, or <code>dash</code>. To instruct a shell to run your script in a certain shell, you can start your script with a <code>she-bang</code> followed by the shell it is supposed to run in. This script will run in a bash shell.</p> <pre><code>#!/bin/bash\necho -n hello\necho A bash subshell `echo -n hello`\n</code></pre> <p>This script will run in a Korn shell (unless <code>/bin/ksh</code> is a hard link to <code>/bin/bash</code>). The <code>/etc/shells</code> file contains a list of shells available on your system. Check it to see which ones are optional for you</p> <pre><code>#!/bin/ksh\necho -n hello\necho a Korn subshell `echo -n hello`\n</code></pre> <p>in order to shorten search for needed path for your shell environment you could use <code>env</code>. env is used to either print environment variables. It is also used to run a utility or command in a custom environment. In practice, <code>env</code> has another common use. It is often used by shell scripts to launch the correct interpreter.</p> <pre><code>#!/usr/bin/env bash\necho -n hello\necho A bash subshell $(echo -n hello)\n</code></pre> <p>as of 2020, Bourne Again SHell, or bash for short, still remains the most needed language to shorten the gap the difference between UNIX/Linux based systems and various applications they use. Moreover, due its usefulness it was incorporated in windows10 operational system(WSL). thus its knowledge is more needed, then you might have known.</p>"},{"location":"scripting_intro/#comments","title":"comments","text":"<p>When writing Bash scripts, it is always a good practice to make your code clean and easily understandable. Organizing your code in blocks, indenting, giving variables and functions descriptive names are several ways to do this. Another way to improve the readability of your code is by using comments. A comment is a human-readable explanation or annotation that is written in the shell script.</p> <p>Let\\'s expand our example a little further by adding comment lines.</p> <pre><code>#!/usr/bin/env bash  # this is sha-bang using env command\n#\n# Hello World Script\n#\necho Hello World\necho A bash subshell `echo -n hello` \n# this is old way of calling for subshell with backtick ``\necho A bash subshell $(echo -n hello) \n# this is more modern way of calling for subshell with dollar and brackets $()\n#NOTICE: backtick might not work in future versions of bash shell\n</code></pre>"},{"location":"scripting_intro/#variables","title":"variables","text":"<p>Here is a simple example of a variable inside a script.</p> <pre><code>#!/usr/bin/env bash\n#\n# simple variable in script\n#\nvar1=4\necho var1 = $var1\n</code></pre> <p>Scripts can contain variables, but since scripts are run in their own shell, the variables do not survive the end of the script.</p> <pre><code>[paul@RHEL8a ~]$ echo $var1\n\n[paul@RHEL8a ~]$ ./vars\nvar1 = 4\n[paul@RHEL8a ~]$ echo $var1\n\n[paul@RHEL8a ~]$\n</code></pre>"},{"location":"scripting_intro/#sourcing-a-script","title":"sourcing a script","text":"<p>Luckily, you can force a script to run in the same shell; this is called <code>sourcing</code> a script.</p> <pre><code>[paul@RHEL8a ~]$ source ./vars\nvar1 = 4\n[paul@RHEL8a ~]$ echo $var1\n4\n[paul@RHEL8a ~]$\n</code></pre> <p>The above is identical to the below.</p> <pre><code>[paul@RHEL8a ~]$ . ./vars\nvar1 = 4\n[paul@RHEL8a ~]$ echo $var1\n4\n[paul@RHEL8a ~]$\n</code></pre>"},{"location":"scripting_intro/#troubleshooting-a-script","title":"troubleshooting a script","text":"<p>Another way to run a script in a separate shell is by typing <code>bash</code> with the name of the script as a parameter.</p> <pre><code>paul@debian10~/test$ bash runme\n42\n</code></pre> <p>Expanding this to <code>bash -x</code> allows you to see the commands that the shell is executing (after shell expansion).</p> <pre><code>paul@debian10~/test$ bash -x runme\n+ var4=42\n+ echo 42\n42\npaul@debian10~/test$ cat runme\n# the runme script\nvar4=42\necho $var4\npaul@debian10~/test$\n</code></pre> <p>Notice the absence of the commented (#) line, and the replacement of the variable before execution of <code>echo</code>.</p>"},{"location":"scripting_intro/#prevent-setuid-root-spoofing","title":"prevent setuid root spoofing","text":"<p>Some user may try to perform <code>setuid</code> based script <code>root spoofing</code>. This is a rare but possible attack. To improve script security and to avoid interpreter spoofing, you need to add <code>--</code> after the <code>#!/bin/bash</code>, which disables further option processing so the shell will not accept any options.</p> <pre><code>#!/usr/bin/env bash -\nor\n#!/usr/bin/env bash --\n</code></pre> <p>Any arguments after the <code>--</code> are treated as filenames and arguments. An argument of - is equivalent to --.</p>"},{"location":"scripting_intro/#practice-introduction-to-scripting","title":"practice: introduction to scripting","text":"<p>0. Give each script a different name, keep them for later!</p> <p>1. Write a script that outputs the name of a city.</p> <p>2. Make sure the script runs in the bash shell.</p> <p>3. Make sure the script runs in the Korn shell.</p> <p>4. Create a script that defines two variables, and outputs their value.</p> <p>5. The previous script does not influence your current shell (the variables do not exist outside of the script). Now run the script so that it influences your current shell.</p> <p>6. Is there a shorter way to <code>source</code> the script ?</p> <p>7. Comment your scripts so that others may know what they are working with.</p>"},{"location":"scripting_intro/#solution-introduction-to-scripting","title":"solution: introduction to scripting","text":"<p>0. Give each script a different name, keep them for later!</p> <p>1. Write a script that outputs the name of a city.</p> <pre><code>$ echo 'echo Antwerp' &gt; first.bash\n$ chmod +x first.bash \n$ ./first.bash \nAntwerp\n</code></pre> <p>2. Make sure the script runs in the bash shell.</p> <pre><code>$ cat first.bash\n#!/bin/bash\necho Antwerp\n</code></pre> <p>3. Make sure the script runs in the Korn shell.</p> <pre><code>$ cat first.bash\n#!/bin/ksh\necho Antwerp\n</code></pre> <p>Note that while first.bash will technically work as a Korn shell script, the name ending in .bash is confusing.</p> <p>4. Create a script that defines two variables, and outputs their value.</p> <pre><code>$ cat second.bash\n#!/bin/bash\n\nvar33=300\nvar42=400\n\necho $var33 $var42\n</code></pre> <p>5. The previous script does not influence your current shell (the variables do not exist outside of the script). Now run the script so that it influences your current shell.</p> <pre><code>source second.bash\n</code></pre> <p>6. Is there a shorter way to <code>source</code> the script ?</p> <pre><code>. ./second.bash\n</code></pre> <p>7. Comment your scripts so that others may know what they are working with.</p> <pre><code>$ cat second.bash\n#!/bin/bash\n# script to test variables and sourcing\n\n# define two variables\nvar33=300\nvar42=400\n\n# output the value of these variables\necho $var33 $var42\n</code></pre>"},{"location":"scripting_loops/","title":"scripting loops","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p>"},{"location":"scripting_loops/#test","title":"test [ ]","text":"<p>The <code>test</code> command can test whether something is true or false. Let\\'s start by testing whether 10 is greater than 55.</p> <pre><code>[paul@RHEL8b ~]$ test 10 -gt 55 ; echo $?\n1\n[paul@RHEL8b ~]$\n</code></pre> <p>The test command returns 1 if the test fails. And as you see in the next screenshot, test returns 0 when a test succeeds.</p> <pre><code>[paul@RHEL8b ~]$ test 56 -gt 55 ; echo $?\n0\n[paul@RHEL8b ~]$\n</code></pre> <p>If you prefer true and false, then write the test like this.</p> <pre><code>[paul@RHEL8b ~]$ test 56 -gt 55 &amp;&amp; echo true || echo false\ntrue\n[paul@RHEL8b ~]$ test 6 -gt 55 &amp;&amp; echo true || echo false\nfalse\n</code></pre> <p>The test command can also be written as square brackets, the screenshot below is identical to the one above.</p> <pre><code>[paul@RHEL8b ~]$ [ 56 -gt 55 ] &amp;&amp; echo true || echo false\ntrue\n[paul@RHEL8b ~]$ [ 6 -gt 55 ] &amp;&amp; echo true || echo false\nfalse\n</code></pre> <p>Below are some example tests. Take a look at <code>man test</code> to see more options for tests.</p> <pre><code>[ -d foo ]             Does the directory foo exist ?\n[ -e bar ]             Does the file bar exist ?\n[ '/etc' = $PWD ]      Is the string /etc equal to the variable $PWD ?\n[ $1 != 'secret' ]     Is the first parameter different from secret ?\n[ 55 -lt $bar ]        Is 55 less than the value of $bar ?\n[ $foo -ge 1000 ]      Is the value of $foo greater or equal to 1000 ?\n[ \"abc\" &lt; $bar ]       Does abc sort before the value of $bar ?\n[ -f foo ]             Is foo a regular file ?\n[ -r bar ]             Is bar a readable file ?\n[ foo -nt bar ]        Is file foo newer than file bar ?\n[ -o nounset ]         Is the shell option nounset set ?\n</code></pre> <p>Tests can be combined with logical AND and OR.</p> <pre><code>paul@RHEL8b:~$ [ 66 -gt 55 -a 66 -lt 500 ] &amp;&amp; echo true || echo false\ntrue\npaul@RHEL8b:~$ [ 66 -gt 55 -a 660 -lt 500 ] &amp;&amp; echo true || echo false\nfalse\npaul@RHEL8b:~$ [ 66 -gt 55 -o 660 -lt 500 ] &amp;&amp; echo true || echo false\ntrue\n</code></pre>"},{"location":"scripting_loops/#if-then-else","title":"if then else","text":"<p>The <code>if then else</code> construction is about choice. If a certain condition is met, then execute something, else execute something else. The example below tests whether a file exists, and if the file exists then a proper message is echoed.</p> <pre><code>#!/bin/bash\n\nif [ -f isit.txt ]\nthen echo isit.txt exists!\nelse echo isit.txt not found!\nfi\n</code></pre> <p>If we name the above script \\'choice\\', then it executes like this.</p> <pre><code>[paul@RHEL8a scripts]$ ./choice \nisit.txt not found!\n[paul@RHEL8a scripts]$ touch isit.txt\n[paul@RHEL8a scripts]$ ./choice \nisit.txt exists!\n[paul@RHEL8a scripts]$\n</code></pre>"},{"location":"scripting_loops/#if-then-elif","title":"if then elif","text":"<p>You can nest a new <code>if</code> inside an <code>else</code> with <code>elif</code>. This is a simple example.</p> <pre><code>#!/bin/bash\ncount=42\nif [ $count -eq 42 ]\nthen\n  echo \"42 is correct.\"\nelif [ $count -gt 42 ]\nthen\n  echo \"Too much.\"\nelse\n  echo \"Not enough.\"\nfi\n</code></pre>"},{"location":"scripting_loops/#for-loop","title":"for loop","text":"<p>The example below shows the syntax of a classical <code>for loop</code> in bash.</p> <pre><code>for i in 1 2 4\ndo\n   echo $i\ndone\n</code></pre> <p>An example of a <code>for loop</code> combined with an embedded shell.</p> <pre><code>#!/bin/ksh\nfor counter in `seq 1 20`\ndo\n   echo counting from 1 to 20, now at $counter\n   sleep 1\ndone\n</code></pre> <p>The same example as above can be written without the embedded shell using the bash <code>{from..to}</code> shorthand.</p> <pre><code>#!/bin/bash\nfor counter in {1..20}\ndo\n   echo counting from 1 to 20, now at $counter\n   sleep 1\ndone\n</code></pre> <p>This <code>for loop</code> uses file globbing (from the shell expansion). Putting the instruction on the command line has identical functionality.</p> <pre><code>kahlan@solexp11$ ls\ncount.ksh  go.ksh\nkahlan@solexp11$ for file in *.ksh ; do cp $file $file.backup ; done\nkahlan@solexp11$ ls                                                 \ncount.ksh  count.ksh.backup  go.ksh  go.ksh.backup\n</code></pre>"},{"location":"scripting_loops/#while-loop","title":"while loop","text":"<p>Below a simple example of a <code>while loop</code>.</p> <pre><code>i=100;\nwhile [ $i -ge 0 ] ;\ndo\n   echo Counting down, from 100 to 0, now at $i;\n   let i--;\ndone\n</code></pre> <p>Endless loops can be made with <code>while true</code> or <code>while :</code> , where the <code>colon</code> is the equivalent of <code>no operation</code> in the <code>Korn</code> and <code>bash</code> shells.</p> <pre><code>#!/bin/ksh\n# endless loop\nwhile :\ndo\n echo hello\n sleep 1\ndone\n</code></pre>"},{"location":"scripting_loops/#until-loop","title":"until loop","text":"<p>Below a simple example of an <code>until loop</code>.</p> <pre><code>let i=100;\nuntil [ $i -le 0 ] ;\ndo\n   echo Counting down, from 100 to 1, now at $i;\n   let i--;\ndone\n</code></pre>"},{"location":"scripting_loops/#practice-scripting-arrays","title":"practice: scripting arrays","text":"<p>1.In Bash Shell:</p> <p>* create variable named <code>my_arr</code> with empty value.</p> <p>* add to my_arr values apple banana pineapple watermelon melon strawberry</p>"},{"location":"scripting_loops/#solution-scripting-tests-and-loops","title":"solution: scripting tests and loops","text":"<p>1. Write a script that uses a <code>for</code> loop to count from 3 to 7.</p> <pre><code>#!/bin/bash\n\nfor i in 3 4 5 6 7\ndo\n echo Counting from 3 to 7, now at $i\ndone\n</code></pre> <p>2. Write a script that uses a <code>for</code> loop to count from 1 to 17000.</p> <pre><code>#!/bin/bash\n\nfor i in `seq 1 17000`\ndo\n echo Counting from 1 to 17000, now at $i\ndone\n</code></pre> <p>3. Write a script that uses a <code>while</code> loop to count from 3 to 7.</p> <pre><code>#!/bin/bash\n\ni=3\nwhile [ $i -le 7 ]\ndo\n echo Counting from 3 to 7, now at $i\n let i=i+1\ndone\n</code></pre> <p>4. Write a script that uses an <code>until</code> loop to count down from 8 to 4.</p> <pre><code>#!/bin/bash\n\ni=8\nuntil [ $i -lt 4 ]\ndo\n echo Counting down from 8 to 4, now at $i\n let i=i-1\ndone\n</code></pre> <p>5. Write a script that counts the number of files ending in <code>.txt</code> in the current directory.</p> <pre><code>#!/bin/bash\n\nlet i=0\nfor file in *.txt\ndo\n    let i++\ndone\necho \"There are $i files ending in .txt\"\n</code></pre> <p>6. Wrap an <code>if</code> statement around the script so it is also correct when there are zero files ending in <code>.txt</code>.</p> <pre><code>#!/bin/bash\n\nls *.txt &gt; /dev/null 2&gt;&amp;1\nif [ $? -ne 0 ] \nthen echo \"There are 0 files ending in .txt\"\nelse\n    let i=0\n    for file in *.txt\n    do\n        let i++\n    done\n    echo \"There are $i files ending in .txt\"\nfi\n</code></pre>"},{"location":"scripting_params/","title":"scripting parameters","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p>"},{"location":"scripting_params/#script-parameters","title":"script parameters","text":"<p>A <code>bash</code> shell script can have parameters. The numbering you see in the script below continues if you have more parameters. You also have special parameters containing the number of parameters, a string of all of them, and also the process id, and the last return code. The man page of <code>bash</code> has a full list.</p> <pre><code>#!/bin/bash\necho The first argument is $1\necho The second argument is $2\necho The third argument is $3\n\necho \\$ $$  PID of the script\necho \\# $#  count arguments\necho \\? $?  last return code\necho \\* $*  all the arguments\n</code></pre> <p>Below is the output of the script above in action.</p> <pre><code>[paul@RHEL8a scripts]$ ./pars one two three\nThe first argument is one\nThe second argument is two\nThe third argument is three\n$ 5610 PID of the script\n# 3 count arguments\n? 0 last return code\n* one two three all the arguments\n</code></pre> <p>Once more the same script, but with only two parameters.</p> <pre><code>[paul@RHEL8a scripts]$ ./pars 1 2\nThe first argument is 1\nThe second argument is 2\nThe third argument is\n$ 5612 PID of the script\n# 2 count arguments\n? 0 last return code\n* 1 2 all the arguments\n[paul@RHEL8a scripts]$\n</code></pre> <p>Here is another example, where we use <code>$0</code>. The <code>$0</code> parameter contains the name of the script.</p> <pre><code>paul@debian6~$ cat myname \necho this script is called $0\npaul@debian6~$ ./myname \nthis script is called ./myname\npaul@debian6~$ mv myname test42\npaul@debian6~$ ./test42 \nthis script is called ./test42\n</code></pre>"},{"location":"scripting_params/#shift-through-parameters","title":"shift through parameters","text":"<p>The <code>shift</code> statement can parse all <code>parameters</code> one by one. This is a sample script.</p> <pre><code>kahlan@solexp11$ cat shift.ksh \n#!/bin/ksh\n\nif [ \"$#\" == \"0\" ] \n then\n  echo You have to give at least one parameter.\n  exit 1\nfi\n\nwhile (( $# ))\n do\n  echo You gave me $1\n  shift\n done\n</code></pre> <p>Below is some sample output of the script above.</p> <pre><code>kahlan@solexp11$ ./shift.ksh one  \nYou gave me one\nkahlan@solexp11$ ./shift.ksh one two three 1201 \"33 42\"\nYou gave me one                           \nYou gave me two\nYou gave me three\nYou gave me 1201\nYou gave me 33 42\nkahlan@solexp11$ ./shift.ksh                           \nYou have to give at least one parameter.\n</code></pre>"},{"location":"scripting_params/#runtime-input","title":"runtime input","text":"<p>You can ask the user for input with the <code>read</code> command in a script.</p> <pre><code>#!/bin/bash\necho -n Enter a number:\nread number\n</code></pre>"},{"location":"scripting_params/#sourcing-a-config-file","title":"sourcing a config file","text":"<p>The <code>source</code> (as seen in the shell chapters) can be used to source a configuration file.</p> <p>Below a sample configuration file for an application.</p> <pre><code>[paul@RHEL8a scripts]$ cat myApp.conf \n# The config file of myApp\n\n# Enter the path here\nmyAppPath=/var/myApp\n\n# Enter the number of quines here\nquines=5\n</code></pre> <p>And here an application that uses this file.</p> <pre><code>[paul@RHEL8a scripts]$ cat myApp.bash \n#!/bin/bash\n#\n# Welcome to the myApp application\n#\n\n. ./myApp.conf\n\necho There are $quines quines\n</code></pre> <p>The running application can use the values inside the sourced configuration file.</p> <pre><code>[paul@RHEL8a scripts]$ ./myApp.bash \nThere are 5 quines\n[paul@RHEL8a scripts]$\n</code></pre>"},{"location":"scripting_params/#get-script-options-with-getopts","title":"get script options with getopts","text":"<p>The <code>getopts</code> function allows you to parse options given to a command. The following script allows for any combination of the options a, f and z.</p> <pre><code>kahlan@solexp11$ cat options.ksh \n#!/bin/ksh\n\nwhile getopts \":afz\" option;\ndo\n case $option in\n  a)\n   echo received -a\n   ;;\n  f)\n   echo received -f\n   ;;\n  z)\n   echo received -z\n   ;;\n  *)\n   echo \"invalid option -$OPTARG\" \n   ;;\n esac\ndone\n</code></pre> <p>This is sample output from the script above. First we use correct options, then we enter twice an invalid option.</p> <pre><code>kahlan@solexp11$ ./options.ksh        \nkahlan@solexp11$ ./options.ksh -af\nreceived -a\nreceived -f\nkahlan@solexp11$ ./options.ksh -zfg\nreceived -z\nreceived -f\ninvalid option -g\nkahlan@solexp11$ ./options.ksh -a -b -z\nreceived -a\ninvalid option -b\nreceived -z\n</code></pre> <p>You can also check for options that need an argument, as this example shows.</p> <pre><code>kahlan@solexp11$ cat argoptions.ksh \n#!/bin/ksh\n\nwhile getopts \":af:z\" option;\ndo\n case $option in\n  a)\n   echo received -a\n   ;;\n  f)\n   echo received -f with $OPTARG\n   ;;\n  z)\n   echo received -z\n   ;;\n  :)\n   echo \"option -$OPTARG needs an argument\"\n   ;;\n  *)\n   echo \"invalid option -$OPTARG\" \n   ;;\n esac\ndone\n</code></pre> <p>This is sample output from the script above.</p> <pre><code>kahlan@solexp11$ ./argoptions.ksh -a -f hello -z\nreceived -a\nreceived -f with hello\nreceived -z\nkahlan@solexp11$ ./argoptions.ksh -zaf 42       \nreceived -z\nreceived -a\nreceived -f with 42\nkahlan@solexp11$ ./argoptions.ksh -zf   \nreceived -z\noption -f needs an argument\n</code></pre>"},{"location":"scripting_params/#get-shell-options-with-shopt","title":"get shell options with shopt","text":"<p>You can toggle the values of variables controlling optional shell behaviour with the <code>shopt</code> built-in shell command. The example below first verifies whether the cdspell option is set; it is not. The next shopt command sets the value, and the third shopt command verifies that the option really is set. You can now use minor spelling mistakes in the cd command. The man page of bash has a complete list of options.</p> <pre><code>paul@laika:~$ shopt -q cdspell ; echo $?\n1\npaul@laika:~$ shopt -s cdspell\npaul@laika:~$ shopt -q cdspell ; echo $?\n0\npaul@laika:~$ cd /Etc\n/etc\n</code></pre>"},{"location":"scripting_params/#practice-parameters-and-options","title":"practice: parameters and options","text":"<p>1. Write a script that receives four parameters, and outputs them in reverse order.</p> <p>2. Write a script that receives two parameters (two filenames) and outputs whether those files exist.</p> <p>3. Write a script that asks for a filename. Verify existence of the file, then verify that you own the file, and whether it is writable. If not, then make it writable.</p> <p>4. Make a configuration file for the previous script. Put a logging switch in the config file, logging means writing detailed output of everything the script does to a log file in /tmp.</p>"},{"location":"scripting_params/#solution-parameters-and-options","title":"solution: parameters and options","text":"<p>1. Write a script that receives four parameters, and outputs them in reverse order.</p> <pre><code>echo $4 $3 $2 $1\n</code></pre> <p>2. Write a script that receives two parameters (two filenames) and outputs whether those files exist.</p> <pre><code>#!/bin/bash\n\nif [ -f $1 ]\nthen echo $1 exists!\nelse echo $1 not found!\nfi\n\nif [ -f $2 ]\nthen echo $2 exists!\nelse echo $2 not found!\nfi\n</code></pre> <p>3. Write a script that asks for a filename. Verify existence of the file, then verify that you own the file, and whether it is writable. If not, then make it writable.</p> <p>4. Make a configuration file for the previous script. Put a logging switch in the config file, logging means writing detailed output of everything the script does to a log file in /tmp.</p>"},{"location":"shell_arguments/","title":"commands and arguments","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This chapter introduces you to <code>shell expansion</code> by taking a close look at <code>commands</code> and <code>arguments</code>. Knowing <code>shell expansion</code> is important because many <code>commands</code> on your Linux system are processed and most likely changed by the <code>shell</code> before they are executed.</p> <p>The command line interface or <code>shell</code> used on most Linux systems is called <code>bash</code>, which stands for <code>Bourne again shell</code>. The <code>bash</code> shell incorporates features from <code>sh</code> (the original Bourne shell), <code>csh</code> (the C shell), and <code>ksh</code> (the Korn shell).</p> <p>This chapter frequently uses the <code>echo</code> command to demonstrate shell features. The <code>echo</code> command is very simple: it echoes the input that it receives.</p> <pre><code>paul@laika:~$ echo Burtonville\nBurtonville\npaul@laika:~$ echo Smurfs are blue\nSmurfs are blue\n</code></pre>"},{"location":"shell_arguments/#arguments","title":"arguments","text":"<p>One of the primary features of a shell is to perform a <code>command line scan</code>. When you enter a command at the shell\\'s command prompt and press the enter key, then the shell will start scanning that line, cutting it up in <code>arguments</code>. While scanning the line, the shell may make many changes to the <code>arguments</code> you typed.</p> <p>This process is called <code>shell expansion</code>. When the shell has finished scanning and modifying that line, then it will be executed.</p>"},{"location":"shell_arguments/#white-space-removal","title":"white space removal","text":"<p>Parts that are separated by one or more consecutive <code>white spaces</code> (or tabs) are considered separate <code>arguments</code>, any white space is removed. The first <code>argument</code> is the command to be executed, the other <code>arguments</code> are given to the command. The shell effectively cuts your command into one or more arguments.</p> <p>This explains why the following four different command lines are the same after <code>shell expansion</code>.</p> <pre><code>[paul@RHELv8u3 ~]$ echo Hello World\nHello World\n[paul@RHELv8u3 ~]$ echo Hello   World\nHello World\n[paul@RHELv8u3 ~]$ echo   Hello   World\nHello World\n[paul@RHELv8u3 ~]$    echo      Hello      World\nHello World\n</code></pre> <p>The <code>echo</code> command will display each argument it receives from the shell. The <code>echo</code> command will also add a new white space between the arguments it received.</p>"},{"location":"shell_arguments/#single-quotes","title":"single quotes","text":"<p>You can prevent the removal of white spaces by quoting the spaces. The contents of the quoted string are considered as one argument. In the screenshot below the <code>echo</code> receives only one <code>argument</code>.</p> <pre><code>[paul@RHEL8b ~]$ echo 'A line with      single    quotes'\nA line with      single    quotes\n[paul@RHEL8b ~]$\n</code></pre>"},{"location":"shell_arguments/#double-quotes","title":"double quotes","text":"<p>You can also prevent the removal of white spaces by double quoting  the spaces. Same as above, <code>echo</code> only receives one <code>argument</code>.</p> <pre><code>[paul@RHEL8b ~]$ echo \"A line with      double    quotes\"\nA line with      double    quotes\n[paul@RHEL8b ~]$\n</code></pre> <p>Later in this book, when discussing <code>variables</code> we will see important differences between single and double quotes.</p>"},{"location":"shell_arguments/#echo-and-quotes","title":"echo and quotes","text":"<p>Quoted lines can include special escaped characters recognised by the <code>echo</code> command (when using <code>echo -e</code>). The screenshot below shows how to use <code>\\n</code> for a newline and <code>\\t</code> for a tab (usually eight white spaces).</p> <pre><code>[paul@RHEL8b ~]$ echo -e \"A line with \\na newline\"\nA line with \na newline\n[paul@RHEL8b ~]$ echo -e 'A line with \\na newline'\nA line with \na newline\n[paul@RHEL8b ~]$ echo -e \"A line with \\ta tab\"\nA line with     a tab\n[paul@RHEL8b ~]$ echo -e 'A line with \\ta tab'\nA line with     a tab\n[paul@RHEL8b ~]$\n</code></pre> <p>The echo command can generate more than white spaces, tabs and newlines. Look in the man page for a list of options.</p>"},{"location":"shell_arguments/#commands","title":"commands","text":""},{"location":"shell_arguments/#external-or-builtin-commands","title":"external or builtin commands ?","text":"<p>Not all commands are external to the shell, some are <code>builtin</code>. <code>External commands</code> are programs that have their own binary and reside somewhere in the file system. Many external commands are located in <code>/bin</code> or <code>/sbin</code>. <code>Builtin commands</code> are an integral part of the shell program itself.</p>"},{"location":"shell_arguments/#type","title":"type","text":"<p>To find out whether a command given to the shell will be executed as an <code>external command</code> or as a <code>builtin command</code>, use the <code>type</code> command.</p> <pre><code>paul@laika:~$ type cd\ncd is a shell builtin\npaul@laika:~$ type cat\ncat is /bin/cat\n</code></pre> <p>As you can see, the <code>cd</code> command is <code>builtin</code> and the <code>cat</code> command is <code>external</code>.</p> <p>You can also use this command to show you whether the command is <code>aliased</code> or not.</p> <pre><code>paul@laika:~$ type ls\nls is aliased to `ls --color=auto'\n</code></pre>"},{"location":"shell_arguments/#running-external-commands","title":"running external commands","text":"<p>Some commands have both builtin and external versions. When one of these commands is executed, the builtin version takes priority. To run the external version, you must enter the full path to the command.</p> <pre><code>paul@laika:~$ type -a echo\necho is a shell builtin\necho is /bin/echo\npaul@laika:~$ /bin/echo Running the external echo command... \nRunning the external echo command...\n</code></pre>"},{"location":"shell_arguments/#which","title":"which","text":"<p>The <code>which</code> command will search for binaries in the <code>$PATH</code> environment variable (variables will be explained later). In the screenshot below, it is determined that <code>cd</code> is <code>builtin</code>, and <code>ls, cp, rm, mv, mkdir, pwd,</code> and <code>which</code> are external commands.</p> <pre><code>[root@RHEL8b ~]# which cp ls cd mkdir pwd \n/bin/cp\n/bin/ls\n/usr/bin/which: no cd in (/usr/kerberos/sbin:/usr/kerberos/bin:...\n/bin/mkdir\n/bin/pwd\n</code></pre>"},{"location":"shell_arguments/#aliases","title":"aliases","text":""},{"location":"shell_arguments/#create-an-alias","title":"create an alias","text":"<p>The shell allows you to create <code>aliases</code>. Aliases are often used to create an easier to remember name for an existing command or to easily supply parameters.</p> <pre><code>[paul@RHELv8u3 ~]$ cat count.txt \none\ntwo\nthree\n[paul@RHELv8u3 ~]$ alias dog=tac\n[paul@RHELv8u3 ~]$ dog count.txt \nthree\ntwo\none\n</code></pre>"},{"location":"shell_arguments/#abbreviate-commands","title":"abbreviate commands","text":"<p>An <code>alias</code> can also be useful to abbreviate an existing command.</p> <pre><code>paul@laika:~$ alias ll='ls -lh --color=auto'\npaul@laika:~$ alias c='clear'\npaul@laika:~$\n</code></pre>"},{"location":"shell_arguments/#default-options","title":"default options","text":"<p>Aliases can be used to supply commands with default options. The example below shows how to set the <code>-i</code> option default when typing <code>rm</code>.</p> <pre><code>[paul@RHELv8u3 ~]$ rm -i winter.txt \nrm: remove regular file `winter.txt'? no\n[paul@RHELv8u3 ~]$ rm winter.txt \n[paul@RHELv8u3 ~]$ ls winter.txt\nls: winter.txt: No such file or directory\n[paul@RHELv8u3 ~]$ touch winter.txt\n[paul@RHELv8u3 ~]$ alias rm='rm -i'\n[paul@RHELv8u3 ~]$ rm winter.txt \nrm: remove regular empty file `winter.txt'? no\n[paul@RHELv8u3 ~]$\n</code></pre> <p>Some distributions enable default aliases to protect users from accidentally erasing files (\\'rm -i\\', \\'mv -i\\', \\'cp -i\\')</p>"},{"location":"shell_arguments/#viewing-aliases","title":"viewing aliases","text":"<p>You can provide one or more aliases as arguments to the <code>alias</code> command to get their definitions. Providing no arguments gives a complete list of current aliases.</p> <pre><code>paul@laika:~$ alias c ll\nalias c='clear'\nalias ll='ls -lh --color=auto'\n</code></pre>"},{"location":"shell_arguments/#unalias","title":"unalias","text":"<p>You can undo an alias with the <code>unalias</code> command.</p> <pre><code>[paul@RHEL8b ~]$ which rm\n/bin/rm\n[paul@RHEL8b ~]$ alias rm='rm -i'\n[paul@RHEL8b ~]$ which rm\nalias rm='rm -i'\n        /bin/rm\n[paul@RHEL8b ~]$ unalias rm\n[paul@RHEL8b ~]$ which rm\n/bin/rm\n[paul@RHEL8b ~]$\n</code></pre>"},{"location":"shell_arguments/#displaying-shell-expansion","title":"displaying shell expansion","text":"<p>You can display shell expansion with <code>set -x</code>, and stop displaying it with <code>set +x</code>. You might want to use this further on in this course, or when in doubt about exactly what the shell is doing with your command.</p> <pre><code>[paul@RHELv8u3 ~]$ set -x\n++ echo -ne '\\033]0;paul@RHELv8u3:~\\007'\n[paul@RHELv8u3 ~]$ echo $USER\n+ echo paul\npaul\n++ echo -ne '\\033]0;paul@RHELv8u3:~\\007'\n[paul@RHELv8u3 ~]$ echo \\$USER\n+ echo '$USER'\n$USER\n++ echo -ne '\\033]0;paul@RHELv8u3:~\\007'\n[paul@RHELv8u3 ~]$ set +x\n+ set +x\n[paul@RHELv8u3 ~]$ echo $USER\npaul\n</code></pre>"},{"location":"shell_arguments/#practice-commands-and-arguments","title":"practice: commands and arguments","text":"<p>1. How many <code>arguments</code> are in this line (not counting the command itself).</p> <pre><code>touch '/etc/cron/cron.allow' 'file 42.txt' \"file 33.txt\"\n</code></pre> <p>2. Is <code>tac</code> a shell builtin command ?</p> <p>3. Is there an existing alias for <code>rm</code> ?</p> <p>4. Read the man page of <code>rm</code>, make sure you understand the <code>-i</code> option of rm. Create and remove a file to test the <code>-i</code> option.</p> <p>5. Execute: <code>alias rm='rm -i'</code> . Test your alias with a test file. Does this work as expected ?</p> <p>6. List all current aliases.</p> <p>7a. Create an alias called \\'city\\' that echoes your hometown.</p> <p>7b. Use your alias to test that it works.</p> <p>8. Execute <code>set -x</code> to display shell expansion for every command.</p> <p>9. Test the functionality of <code>set -x</code> by executing your <code>city</code> and <code>rm</code> aliases.</p> <p>10 Execute <code>set +x</code> to stop displaying shell expansion.</p> <p>11. Remove your city alias.</p> <p>12. What is the location of the <code>cat</code> and the <code>passwd</code> commands ?</p> <p>13. Explain the difference between the following commands:</p> <pre><code>echo\n\n/bin/echo\n</code></pre> <p>14. Explain the difference between the following commands:</p> <pre><code>echo Hello\n\necho -n Hello\n</code></pre> <p>15. Display <code>A B C</code> with two spaces between B and C.</p> <p>(optional)16. Complete the following command (do not use spaces) to display exactly the following output:</p> <pre><code>4+4     =8\n10+14   =24\n</code></pre> <p>17. Use <code>echo</code> to display the following exactly:</p> <pre><code>??\\\\\n</code></pre> <p>Find two solutions with single quotes, two with double quotes and one without quotes (and say thank you to Ren\u00e9 and Darioush from Google for this extra).</p> <p>18. Use one <code>echo</code> command to display three words on three lines.</p>"},{"location":"shell_arguments/#solution-commands-and-arguments","title":"solution: commands and arguments","text":"<p>1. How many <code>arguments</code> are in this line (not counting the command itself).</p> <pre><code>touch '/etc/cron/cron.allow' 'file 42.txt' \"file 33.txt\"\n\nanswer: three\n</code></pre> <p>2. Is <code>tac</code> a shell builtin command ?</p> <pre><code>type tac\n</code></pre> <p>3. Is there an existing alias for <code>rm</code> ?</p> <pre><code>alias rm\n</code></pre> <p>4. Read the man page of <code>rm</code>, make sure you understand the <code>-i</code> option of rm. Create and remove a file to test the <code>-i</code> option.</p> <pre><code>man rm\n\ntouch testfile\n\nrm -i testfile\n</code></pre> <p>5. Execute: <code>alias rm='rm -i'</code> . Test your alias with a test file. Does this work as expected ?</p> <pre><code>touch testfile\n\nrm testfile (should ask for confirmation)\n</code></pre> <p>6. List all current aliases.</p> <pre><code>alias\n</code></pre> <p>7a. Create an alias called \\'city\\' that echoes your hometown.</p> <pre><code>alias city='echo Antwerp'\n</code></pre> <p>7b. Use your alias to test that it works.</p> <pre><code>city (it should display Antwerp)\n</code></pre> <p>8. Execute <code>set -x</code> to display shell expansion for every command.</p> <pre><code>set -x\n</code></pre> <p>9. Test the functionality of <code>set -x</code> by executing your <code>city</code> and <code>rm</code> aliases.</p> <pre><code>shell should display the resolved aliases and then execute the command:\npaul@deb106:~$ set -x\npaul@deb106:~$ city\n+ echo antwerp\nantwerp\n</code></pre> <p>10 Execute <code>set +x</code> to stop displaying shell expansion.</p> <pre><code>set +x\n</code></pre> <p>11. Remove your city alias.</p> <pre><code>unalias city\n</code></pre> <p>12. What is the location of the <code>cat</code> and the <code>passwd</code> commands ?</p> <pre><code>which cat (probably /bin/cat)\n\nwhich passwd (probably /usr/bin/passwd)\n</code></pre> <p>13. Explain the difference between the following commands:</p> <pre><code>echo\n\n/bin/echo\n</code></pre> <p>The <code>echo</code> command will be interpreted by the shell as the <code>built-in echo</code> command. The <code>/bin/echo</code> command will make the shell execute the <code>echo binary</code> located in the <code>/bin</code> directory.</p> <p>14. Explain the difference between the following commands:</p> <pre><code>echo Hello\n\necho -n Hello\n</code></pre> <p>The -n option of the <code>echo</code> command will prevent echo from echoing a trailing newline. <code>echo Hello</code> will echo six characters in total, <code>echo -n hello</code> only echoes five characters.</p> <p>(The -n option might not work in the Korn shell.)</p> <p>15. Display <code>A B C</code> with two spaces between B and C.</p> <pre><code>echo \"A B  C\"\n</code></pre> <p>16. Complete the following command (do not use spaces) to display exactly the following output:</p> <pre><code>4+4     =8\n10+14   =24\n</code></pre> <p>The solution is to use tabs with \\t.</p> <pre><code>echo -e \"4+4\\t=8\" ; echo -e \"10+14\\t=24\"\n</code></pre> <p>17. Use <code>echo</code> to display the following exactly:</p> <pre><code>??\\\\\necho '??\\\\'\necho -e '??\\\\\\\\'\necho \"??\\\\\\\\\"\necho -e \"??\\\\\\\\\\\\\"\necho ??\\\\\\\\\n</code></pre> <p>Find two solutions with single quotes, two with double quotes and one without quotes (and say thank you to Ren\u00e9 and Darioush from Google for this extra).</p> <p>18. Use one <code>echo</code> command to display three words on three lines.</p> <pre><code>echo -e \"one \\ntwo \\nthree\"\n</code></pre>"},{"location":"shell_control_operators/","title":"control operators","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>In this chapter we put more than one command on the command line using <code>control operators</code>. We also briefly discuss related parameters ($?) and similar special characters(&amp;).</p>"},{"location":"shell_control_operators/#semicolon","title":"; semicolon","text":"<p>You can put two or more commands on the same line separated by a semicolon <code>;</code> . The shell will scan the line until it reaches the semicolon. All the arguments before this semicolon will be considered a separate command from all the arguments after the semicolon. Both series will be executed sequentially with the shell waiting for each command to finish before starting the next one.</p> <pre><code>[paul@RHELv8u3 ~]$ echo Hello\nHello\n[paul@RHELv8u3 ~]$ echo World\nWorld\n[paul@RHELv8u3 ~]$ echo Hello ; echo World\nHello\nWorld\n[paul@RHELv8u3 ~]$\n</code></pre>"},{"location":"shell_control_operators/#ampersand","title":"&amp; ampersand","text":"<p>When a line ends with an ampersand <code>&amp;</code>, the shell will not wait for the command to finish. You will get your shell prompt back, and the command is executed in background. You will get a message when this command has finished executing in background.</p> <pre><code>[paul@RHELv8u3 ~]$ sleep 20 &amp;\n[1] 7925\n[paul@RHELv8u3 ~]$ \n...wait 20 seconds...\n[paul@RHELv8u3 ~]$ \n[1]+  Done                     sleep 20\n</code></pre> <p>The technical explanation of what happens in this case is explained in the chapter about <code>processes</code>.</p>"},{"location":"shell_control_operators/#dollar-question-mark","title":"$? dollar question mark","text":"<p>The exit code of the previous command is stored in the shell variable <code>$?</code>. Actually <code>$?</code> is a shell parameter and not a variable, since you cannot assign a value to <code>$?</code>.</p> <pre><code>paul@debian10:~/test$ touch file1\npaul@debian10:~/test$ echo $?\n0\npaul@debian10:~/test$ rm file1\npaul@debian10:~/test$ echo $?\n0\npaul@debian10:~/test$ rm file1\nrm: cannot remove `file1': No such file or directory\npaul@debian10:~/test$ echo $?\n1\npaul@debian10:~/test$\n</code></pre>"},{"location":"shell_control_operators/#double-ampersand","title":"&amp;&amp; double ampersand","text":"<p>The shell will interpret <code>&amp;&amp;</code> as a <code>logical AND</code>. When using <code>&amp;&amp;</code> the second command is executed only if the first one succeeds (returns a zero exit status).</p> <pre><code>paul@barry:~$ echo first &amp;&amp; echo second\nfirst\nsecond\npaul@barry:~$ zecho first &amp;&amp; echo second\n-bash: zecho: command not found\n</code></pre> <p>Another example of the same <code>logical AND</code> principle. This example starts with a working <code>cd</code> followed by <code>ls</code>, then a non-working <code>cd</code> which is <code>not</code> followed by <code>ls</code>.</p> <pre><code>[paul@RHELv8u3 ~]$ cd gen &amp;&amp; ls\nfile1  file3  File55  fileab  FileAB   fileabc\nfile2  File4  FileA   Fileab  fileab2\n[paul@RHELv8u3 gen]$ cd gen &amp;&amp; ls\n-bash: cd: gen: No such file or directory\n</code></pre>"},{"location":"shell_control_operators/#double-vertical-bar","title":"|| double vertical bar","text":"<p>The <code>||</code> represents a <code>logical OR</code>. The second command is executed only when the first command fails (returns a non-zero exit status).</p> <pre><code>paul@barry:~$ echo first || echo second ; echo third\nfirst\nthird\npaul@barry:~$ zecho first || echo second ; echo third\n-bash: zecho: command not found\nsecond\nthird\npaul@barry:~$\n</code></pre> <p>Another example of the same <code>logical OR</code> principle.</p> <pre><code>[paul@RHELv8u3 ~]$ cd gen || ls\n[paul@RHELv8u3 gen]$ cd gen || ls\n-bash: cd: gen: No such file or directory\nfile1  file3  File55  fileab  FileAB   fileabc\nfile2  File4  FileA   Fileab  fileab2\n</code></pre>"},{"location":"shell_control_operators/#combining-and","title":"combining &amp;&amp; and ||","text":"<p>You can use this logical AND and logical OR to write an <code>if-then-else</code> structure on the command line. This example uses <code>echo</code> to display whether the <code>rm</code> command was successful.</p> <pre><code>paul@laika:~/test$ rm file1 &amp;&amp; echo It worked! || echo It failed!\nIt worked!\npaul@laika:~/test$ rm file1 &amp;&amp; echo It worked! || echo It failed!\nrm: cannot remove `file1': No such file or directory\nIt failed!\npaul@laika:~/test$\n</code></pre>"},{"location":"shell_control_operators/#pound-sign","title":"# pound sign","text":"<p>Everything written after a <code>pound sign</code> (#) is ignored by the shell. This is useful to write a <code>shell comment</code>, but has no influence on the command execution or shell expansion.</p> <pre><code>paul@debian4:~$ mkdir test    # we create a directory\npaul@debian4:~$ cd test       #### we enter the directory\npaul@debian4:~/test$ ls       # is it empty ?\npaul@debian4:~/test$\n</code></pre>"},{"location":"shell_control_operators/#escaping-special-characters","title":"\\ escaping special characters","text":"<p>The backslash <code>\\</code> character enables the use of control characters, but without the shell interpreting it, this is called <code>escaping</code> characters.</p> <pre><code>[paul@RHELv8u3 ~]$ echo hello \\; world\nhello ; world\n[paul@RHELv8u3 ~]$ echo hello\\ \\ \\ world\nhello   world\n[paul@RHELv8u3 ~]$ echo escaping \\\\\\ \\#\\ \\&amp;\\ \\\"\\ \\'\nescaping \\ # &amp; \" '\n[paul@RHELv8u3 ~]$ echo escaping \\\\\\?\\*\\\"\\'\nescaping \\?*\"'\n</code></pre>"},{"location":"shell_control_operators/#end-of-line-backslash","title":"end of line backslash","text":"<p>Lines ending in a backslash are continued on the next line. The shell does not interpret the newline character and will wait on shell expansion and execution of the command line until a newline without backslash is encountered.</p> <pre><code>[paul@RHEL8b ~]$ echo This command line \\\n&gt; is split in three \\\n&gt; parts\nThis command line is split in three parts\n[paul@RHEL8b ~]$\n</code></pre>"},{"location":"shell_control_operators/#practice-control-operators","title":"practice: control operators","text":"<p>0. Each question can be answered by one command line!</p> <p>1. When you type <code>passwd</code>, which file is executed ?</p> <p>2. What kind of file is that ?</p> <p>3. Execute the <code>pwd</code> command twice. (remember 0.)</p> <p>4. Execute <code>ls</code> after <code>cd /etc</code>, but only if <code>cd /etc</code> did not error.</p> <p>5. Execute <code>cd /etc</code> after <code>cd etc</code>, but only if <code>cd etc</code> fails.</p> <p>6. Echo <code>it worked</code> when <code>touch test42</code> works, and echo <code>it failed</code> when the <code>touch</code> failed. All on one command line as a normal user (not root). Test this line in your home directory and in <code>/bin/</code> .</p> <p>7. Execute <code>sleep 6</code>, what is this command doing ?</p> <p>8. Execute <code>sleep 200</code> in background (do not wait for it to finish).</p> <p>9. Write a command line that executes <code>rm file55</code>. Your command line should print \\'success\\' if file55 is removed, and print \\'failed\\' if there was a problem.</p> <p>(optional)10. Use echo to display \\\"Hello World with strange\\' characters \\ * [ } \\~ \\\\ .\\\" (including all quotes)</p>"},{"location":"shell_control_operators/#solution-control-operators","title":"solution: control operators","text":"<p>0. Each question can be answered by one command line!</p> <p>1. When you type <code>passwd</code>, which file is executed ?</p> <pre><code>which passwd\n</code></pre> <p>2. What kind of file is that ?</p> <pre><code>file /usr/bin/passwd\n</code></pre> <p>3. Execute the <code>pwd</code> command twice. (remember 0.)</p> <pre><code>pwd ; pwd\n</code></pre> <p>4. Execute <code>ls</code> after <code>cd /etc</code>, but only if <code>cd /etc</code> did not error.</p> <pre><code>cd /etc &amp;&amp; ls\n</code></pre> <p>5. Execute <code>cd /etc</code> after <code>cd etc</code>, but only if <code>cd etc</code> fails.</p> <pre><code>cd etc || cd /etc\n</code></pre> <p>6. Echo <code>it worked</code> when <code>touch test42</code> works, and echo <code>it failed</code> when the <code>touch</code> failed. All on one command line as a normal user (not root). Test this line in your home directory and in <code>/bin/</code> .</p> <pre><code>paul@deb106:~$ cd ; touch test42 &amp;&amp; echo it worked || echo it failed\nit worked\npaul@deb106:~$ cd /bin; touch test42 &amp;&amp; echo it worked || echo it failed\ntouch: cannot touch `test42': Permission denied\nit failed\n</code></pre> <p>7. Execute <code>sleep 6</code>, what is this command doing ?</p> <pre><code>pausing for six seconds\n</code></pre> <p>8. Execute <code>sleep 200</code> in background (do not wait for it to finish).</p> <pre><code>sleep 200 &amp;\n</code></pre> <p>9. Write a command line that executes <code>rm file55</code>. Your command line should print \\'success\\' if file55 is removed, and print \\'failed\\' if there was a problem.</p> <pre><code>rm file55 &amp;&amp; echo success || echo failed\n</code></pre> <p>(optional)10. Use echo to display \\\"Hello World with strange\\' characters \\ * [ } \\~ \\\\ .\\\" (including all quotes)</p> <pre><code>echo \\\"Hello World with strange\\' characters \\\\ \\* \\[ \\} \\~ \\\\\\\\ \\. \\\"\n\nor\n\necho \\\"\"Hello World with strange' characters \\ * [ } ~ \\\\ . \"\\\"\n</code></pre>"},{"location":"shell_globbing/","title":"file globbing","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>Typing <code>man 7 glob</code> (on Debian) will tell you that long ago there was a program called <code>/etc/glob</code> that would expand wildcard patterns.</p> <p>Today the shell is responsible for <code>file globbing</code> (or dynamic filename generation). This chapter will explain <code>file globbing</code>.</p>"},{"location":"shell_globbing/#asterisk","title":"* asterisk","text":"<p>The asterisk <code>*</code> is interpreted by the shell as a sign to generate filenames, matching the asterisk to any combination of characters (even none). When no path is given, the shell will use filenames in the current directory. See the man page of <code>glob(7)</code> for more information. (This is part of LPI topic 1.103.3.)</p> <pre><code>[paul@RHELv8u3 gen]$ ls\nfile1  file2  file3  File4  File55  FileA  fileab  Fileab  FileAB  fileabc\n[paul@RHELv8u3 gen]$ ls File*\nFile4  File55  FileA  Fileab  FileAB\n[paul@RHELv8u3 gen]$ ls file*\nfile1  file2  file3  fileab  fileabc\n[paul@RHELv8u3 gen]$ ls *ile55\nFile55\n[paul@RHELv8u3 gen]$ ls F*ile55\nFile55\n[paul@RHELv8u3 gen]$ ls F*55\nFile55\n[paul@RHELv8u3 gen]$\n</code></pre>"},{"location":"shell_globbing/#question-mark","title":"? question mark","text":"<p>Similar to the asterisk, the question mark <code>?</code> is interpreted by the shell as a sign to generate filenames, matching the question mark with exactly one character.</p> <pre><code>[paul@RHELv8u3 gen]$ ls\nfile1  file2  file3  File4  File55  FileA  fileab  Fileab  FileAB  fileabc\n[paul@RHELv8u3 gen]$ ls File?\nFile4  FileA\n[paul@RHELv8u3 gen]$ ls Fil?4\nFile4\n[paul@RHELv8u3 gen]$ ls Fil??\nFile4  FileA\n[paul@RHELv8u3 gen]$ ls File??\nFile55  Fileab  FileAB\n[paul@RHELv8u3 gen]$\n</code></pre>"},{"location":"shell_globbing/#square-brackets","title":"[] square brackets","text":"<p>The square bracket <code>[</code> is interpreted by the shell as a sign to generate filenames, matching any of the characters between <code>[</code> and the first subsequent <code>]</code>. The order in this list between the brackets is not important. Each pair of brackets is replaced by exactly one character.</p> <pre><code>[paul@RHELv8u3 gen]$ ls \nfile1  file2  file3  File4  File55  FileA  fileab  Fileab  FileAB  fileabc\n[paul@RHELv8u3 gen]$ ls File[5A]\nFileA\n[paul@RHELv8u3 gen]$ ls File[A5]\nFileA\n[paul@RHELv8u3 gen]$ ls File[A5][5b]\nFile55\n[paul@RHELv8u3 gen]$ ls File[a5][5b]\nFile55  Fileab\n[paul@RHELv8u3 gen]$ ls File[a5][5b][abcdefghijklm]\nls: File[a5][5b][abcdefghijklm]: No such file or directory\n[paul@RHELv8u3 gen]$ ls file[a5][5b][abcdefghijklm]\nfileabc\n[paul@RHELv8u3 gen]$\n</code></pre> <p>You can also exclude characters from a list between square brackets with the exclamation mark <code>!</code>. And you are allowed to make combinations of these <code>wild cards</code>.</p> <pre><code>[paul@RHELv8u3 gen]$ ls \nfile1  file2  file3  File4  File55  FileA  fileab  Fileab  FileAB  fileabc\n[paul@RHELv8u3 gen]$ ls file[a5][!Z]\nfileab\n[paul@RHELv8u3 gen]$ ls file[!5]*\nfile1  file2  file3  fileab  fileabc\n[paul@RHELv8u3 gen]$ ls file[!5]?\nfileab\n[paul@RHELv8u3 gen]$\n</code></pre>"},{"location":"shell_globbing/#a-z-and-0-9-ranges","title":"a-z and 0-9 ranges","text":"<p>The bash shell will also understand ranges of characters between brackets.</p> <pre><code>[paul@RHELv8u3 gen]$ ls\nfile1  file3  File55  fileab  FileAB   fileabc\nfile2  File4  FileA   Fileab  fileab2\n[paul@RHELv8u3 gen]$ ls file[a-z]*\nfileab  fileab2  fileabc\n[paul@RHELv8u3 gen]$ ls file[0-9]\nfile1  file2  file3\n[paul@RHELv8u3 gen]$ ls file[a-z][a-z][0-9]*\nfileab2\n[paul@RHELv8u3 gen]$\n</code></pre>"},{"location":"shell_globbing/#lang-and-square-brackets","title":"$LANG and square brackets","text":"<p>But, don\\'t forget the influence of the <code>LANG</code> variable. Some languages include lower case letters in an upper case range (and vice versa).</p> <pre><code>paul@RHELv8u4:~/test$ ls [A-Z]ile?\nfile1  file2  file3  File4\npaul@RHELv8u4:~/test$ ls [a-z]ile?\nfile1  file2  file3  File4\npaul@RHELv8u4:~/test$ echo $LANG\nen_US.UTF-8\npaul@RHELv8u4:~/test$ LANG=C\npaul@RHELv8u4:~/test$ echo $LANG\nC\npaul@RHELv8u4:~/test$ ls [a-z]ile?\nfile1  file2  file3\npaul@RHELv8u4:~/test$ ls [A-Z]ile?\nFile4\npaul@RHELv8u4:~/test$\n</code></pre> <p>If <code>$LC_ALL</code> is set, then this will also need to be reset to prevent file globbing.</p>"},{"location":"shell_globbing/#preventing-file-globbing","title":"preventing file globbing","text":"<p>The screenshot below should be no surprise. The <code>echo *</code> will echo a * when in an empty directory. And it will echo the names of all files when the directory is not empty.</p> <pre><code>paul@ubu1010:~$ mkdir test42\npaul@ubu1010:~$ cd test42\npaul@ubu1010:~/test42$ echo *\n*\npaul@ubu1010:~/test42$ touch file42 file33\npaul@ubu1010:~/test42$ echo *\nfile33 file42\n</code></pre> <p>Globbing can be prevented using quotes or by escaping the special characters, as shown in this screenshot.</p> <pre><code>paul@ubu1010:~/test42$ echo *\nfile33 file42\npaul@ubu1010:~/test42$ echo \\*\n*\npaul@ubu1010:~/test42$ echo '*'\n*\npaul@ubu1010:~/test42$ echo \"*\"\n*\n</code></pre>"},{"location":"shell_globbing/#practice-shell-globbing","title":"practice: shell globbing","text":"<p>1. Create a test directory and enter it.</p> <p>2. Create the following files :</p> <pre><code>file1\nfile10\nfile11\nfile2\nFile2\nFile3\nfile33\nfileAB\nfilea\nfileA\nfileAAA\nfile(\nfile 2\n</code></pre> <p>(the last one has 6 characters including a space)</p> <p>3. List (with ls) all files starting with file</p> <p>4. List (with ls) all files starting with File</p> <p>5. List (with ls) all files starting with file and ending in a number.</p> <p>6. List (with ls) all files starting with file and ending with a letter</p> <p>7. List (with ls) all files starting with File and having a digit as fifth character.</p> <p>8. List (with ls) all files starting with File and having a digit as fifth character and nothing else.</p> <p>9. List (with ls) all files starting with a letter and ending in a number.</p> <p>10. List (with ls) all files that have exactly five characters.</p> <p>11. List (with ls) all files that start with f or F and end with 3 or A.</p> <p>12. List (with ls) all files that start with f have i or R as second character and end in a number.</p> <p>13. List all files that do not start with the letter F.</p> <p>14. Copy the value of $LANG to $MyLANG.</p> <p>15. Show the influence of $LANG in listing A-Z or a-z ranges.</p> <p>16. You receive information that one of your servers was cracked, the cracker probably replaced the <code>ls</code> command. You know that the <code>echo</code> command is safe to use. Can <code>echo</code> replace <code>ls</code> ? How can you list the files in the current directory with <code>echo</code> ?</p> <p>17. Is there another command besides cd to change directories ?</p>"},{"location":"shell_globbing/#solution-shell-globbing","title":"solution: shell globbing","text":"<p>1. Create a test directory and enter it.</p> <pre><code>mkdir testdir; cd testdir\n</code></pre> <p>2. Create the following files :</p> <pre><code>file1\nfile10\nfile11\nfile2\nFile2\nFile3\nfile33\nfileAB\nfilea\nfileA\nfileAAA\nfile(\nfile 2\n</code></pre> <p>(the last one has 6 characters including a space)</p> <pre><code>touch file1 file10 file11 file2 File2 File3\ntouch file33 fileAB filea fileA fileAAA\ntouch \"file(\"\ntouch \"file 2\"\n</code></pre> <p>3. List (with ls) all files starting with file</p> <pre><code>ls file*\n</code></pre> <p>4. List (with ls) all files starting with File</p> <pre><code>ls File*\n</code></pre> <p>5. List (with ls) all files starting with file and ending in a number.</p> <pre><code>ls file*[0-9]\n</code></pre> <p>6. List (with ls) all files starting with file and ending with a letter</p> <pre><code>ls file*[a-z]\n</code></pre> <p>7. List (with ls) all files starting with File and having a digit as fifth character.</p> <pre><code>ls File[0-9]*\n</code></pre> <p>8. List (with ls) all files starting with File and having a digit as fifth character and nothing else.</p> <pre><code>ls File[0-9]\n</code></pre> <p>9. List (with ls) all files starting with a letter and ending in a number.</p> <pre><code>ls [a-z]*[0-9]\n</code></pre> <p>10. List (with ls) all files that have exactly five characters.</p> <pre><code>ls ?????\n</code></pre> <p>11. List (with ls) all files that start with f or F and end with 3 or A.</p> <pre><code>ls [fF]*[3A]\n</code></pre> <p>12. List (with ls) all files that start with f have i or R as second character and end in a number.</p> <pre><code>ls f[iR]*[0-9]\n</code></pre> <p>13. List all files that do not start with the letter F.</p> <pre><code>ls [!F]*\n</code></pre> <p>14. Copy the value of $LANG to $MyLANG.</p> <pre><code>MyLANG=$LANG\n</code></pre> <p>15. Show the influence of $LANG in listing A-Z or a-z ranges.</p> <pre><code>see example in book\n</code></pre> <p>16. You receive information that one of your servers was cracked, the cracker probably replaced the <code>ls</code> command. You know that the <code>echo</code> command is safe to use. Can <code>echo</code> replace <code>ls</code> ? How can you list the files in the current directory with <code>echo</code> ?</p> <pre><code>echo *\n</code></pre> <p>17. Is there another command besides cd to change directories ?</p> <pre><code>pushd popd\n</code></pre>"},{"location":"shell_history/","title":"shell history","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>The shell makes it easy for us to repeat commands, this chapter explains how.</p>"},{"location":"shell_history/#repeating-the-last-command","title":"repeating the last command","text":"<p>To repeat the last command in bash, type <code>!!</code>. This is pronounced as <code>bang bang</code>.</p> <pre><code>paul@debian10:~/test42$ echo this will be repeated &gt; file42.txt\npaul@debian10:~/test42$ !!\necho this will be repeated &gt; file42.txt\npaul@debian10:~/test42$\n</code></pre>"},{"location":"shell_history/#repeating-other-commands","title":"repeating other commands","text":"<p>You can repeat other commands using one <code>bang</code> followed by one or more characters. The shell will repeat the last command that started with those characters.</p> <pre><code>paul@debian10:~/test42$ touch file42\npaul@debian10:~/test42$ cat file42\npaul@debian10:~/test42$ !to\ntouch file42\npaul@debian10:~/test42$\n</code></pre>"},{"location":"shell_history/#history","title":"history","text":"<p>To see older commands, use <code>history</code> to display the shell command history (or use <code>history n</code> to see the last n commands).</p> <pre><code>paul@debian10:~/test$ history 10\n38  mkdir test\n39  cd test\n40  touch file1\n41  echo hello &gt; file2\n42  echo It is very cold today &gt; winter.txt\n43  ls\n44  ls -l\n45  cp winter.txt summer.txt\n46  ls -l\n47  history 10\n</code></pre>"},{"location":"shell_history/#n","title":"!n","text":"<p>When typing <code>!</code> followed by the number preceding the command you want repeated, then the shell will echo the command and execute it.</p> <pre><code>paul@debian10:~/test$ !43\nls\nfile1  file2  summer.txt  winter.txt\n</code></pre>"},{"location":"shell_history/#ctrl-r","title":"Ctrl-r","text":"<p>Another option is to use <code>ctrl-r</code> to search in the history. In the screenshot below i only typed <code>ctrl-r</code> followed by four characters <code>apti</code> and it finds the last command containing these four consecutive characters.</p> <pre><code>paul@debian10:~$ \n(reverse-i-search)`apti': sudo aptitude install screen\n</code></pre>"},{"location":"shell_history/#histsize","title":"$HISTSIZE","text":"<p>The $HISTSIZE variable determines the number of commands that will be remembered in your current environment. Most distributions default this variable to 500 or 1000.</p> <pre><code>paul@debian10:~$ echo $HISTSIZE\n500\n</code></pre> <p>You can change it to any value you like.</p> <pre><code>paul@debian10:~$ HISTSIZE=15000\npaul@debian10:~$ echo $HISTSIZE\n15000\n</code></pre>"},{"location":"shell_history/#histfile","title":"$HISTFILE","text":"<p>The $HISTFILE variable points to the file that contains your history. The <code>bash</code> shell defaults this value to <code>~/.bash_history</code>.</p> <pre><code>paul@debian10:~$ echo $HISTFILE\n/home/paul/.bash_history\n</code></pre> <p>A session history is saved to this file when you <code>exit</code> the session!</p> <p>Closing a gnome-terminal with the mouse, or typing <code>reboot</code> as root will NOT save your terminal\\'s history.</p>"},{"location":"shell_history/#histfilesize","title":"$HISTFILESIZE","text":"<p>The number of commands kept in your history file can be set using $HISTFILESIZE.</p> <pre><code>paul@debian10:~$ echo $HISTFILESIZE\n15000\n</code></pre>"},{"location":"shell_history/#prevent-recording-a-command","title":"prevent recording a command","text":"<p>You can prevent a command from being recorded in <code>history</code> using a space prefix.</p> <pre><code>paul@debian8:~/github$ echo abc\nabc\npaul@debian8:~/github$  echo def\ndef\npaul@debian8:~/github$ echo ghi\nghi\npaul@debian8:~/github$ history 3\n 9501  echo abc\n 9502  echo ghi\n 9503  history 3\n</code></pre>"},{"location":"shell_history/#optionalregular-expressions","title":"(optional)regular expressions","text":"<p>It is possible to use <code>regular expressions</code> when using the <code>bang</code> to repeat commands. The screenshot below switches 1 into 2.</p> <pre><code>paul@debian10:~/test$ cat file1\npaul@debian10:~/test$ !c:s/1/2\ncat file2\nhello\npaul@debian10:~/test$\n</code></pre>"},{"location":"shell_history/#optional-korn-shell-history","title":"(optional) Korn shell history","text":"<p>Repeating a command in the <code>Korn shell</code> is very similar. The Korn shell  also has the <code>history</code> command, but uses the letter <code>r</code> to recall lines from history.</p> <p>This screenshot shows the history command. Note the different meaning of the parameter.</p> <pre><code>$ history 17\n17  clear\n18  echo hoi\n19  history 12\n20  echo world\n21  history 17\n</code></pre> <p>Repeating with <code>r</code> can be combined with the line numbers given by the history command, or with the first few letters of the command.</p> <pre><code>$ r e\necho world\nworld\n$ cd /etc\n$ r\ncd /etc\n$\n</code></pre>"},{"location":"shell_history/#practice-shell-history","title":"practice: shell history","text":"<p>1. Issue the command <code>echo The answer to the meaning of life, the universe and everything is 42</code>.</p> <p>2. Repeat the previous command using only two characters (there are two solutions!)</p> <p>3. Display the last 5 commands you typed.</p> <p>4. Issue the long <code>echo</code> from question 1 again, using the line numbers you received from the command in question 3.</p> <p>5. How many commands can be kept in memory for your current shell session ?</p> <p>6. Where are these commands stored when exiting the shell ?</p> <p>7. How many commands can be written to the <code>history file</code> when exiting your current shell session ?</p> <p>8. Make sure your current bash shell remembers the next 5000 commands you type.</p> <p>9. Open more than one console (by press Ctrl-shift-t in gnome-terminal, or by opening an extra putty.exe in MS Windows) with the same user account. When is command history written to the history file ?</p>"},{"location":"shell_history/#solution-shell-history","title":"solution: shell history","text":"<p>1. Issue the command <code>echo The answer to the meaning of life, the universe and everything is 42</code>.</p> <pre><code>echo The answer to the meaning of life, the universe and everything is 42\n</code></pre> <p>2. Repeat the previous command using only two characters (there are two solutions!)</p> <pre><code>!!\nOR\n!e\n</code></pre> <p>3. Display the last 5 commands you typed.</p> <pre><code>paul@ubu1010:~$ history 5\n 52  ls -l\n 53  ls\n 54  df -h | grep sda\n 55  echo The answer to the meaning of life, the universe and everything is 42\n 56  history 5\n</code></pre> <p>You will receive different line numbers.</p> <p>4. Issue the long <code>echo</code> from question 1 again, using the line numbers you received from the command in question 3.</p> <pre><code>paul@ubu1010:~$ !55\necho The answer to the meaning of life, the universe and everything is 42\nThe answer to the meaning of life, the universe and everything is 42\n</code></pre> <p>5. How many commands can be kept in memory for your current shell session ?</p> <pre><code>echo $HISTSIZE\n</code></pre> <p>6. Where are these commands stored when exiting the shell ?</p> <pre><code>echo $HISTFILE\n</code></pre> <p>7. How many commands can be written to the <code>history file</code> when exiting your current shell session ?</p> <pre><code>echo $HISTFILESIZE\n</code></pre> <p>8. Make sure your current bash shell remembers the next 5000 commands you type.</p> <pre><code>HISTSIZE=5000\n</code></pre> <p>9. Open more than one console (by press Ctrl-shift-t in gnome-terminal, or by opening an extra putty.exe in MS Windows) with the same user account. When is command history written to the history file ?</p> <pre><code>when you type exit\n</code></pre>"},{"location":"shell_in_shell/","title":"shell embedding and options","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This chapter takes a brief look at <code>child shells</code>, <code>embedded shells</code> and <code>shell options</code>.</p>"},{"location":"shell_in_shell/#shell-embedding","title":"shell embedding","text":"<p>Shells can be <code>embedded</code> on the command line, or in other words, the command line scan can spawn new processes containing a fork of the current shell. You can use variables to prove that new shells are created. In the screenshot below, the variable $var1 only exists in the (temporary) sub shell.</p> <pre><code>[paul@RHELv8u3 gen]$ echo $var1\n\n[paul@RHELv8u3 gen]$ echo $(var1=5;echo $var1)\n5\n[paul@RHELv8u3 gen]$ echo $var1\n\n[paul@RHELv8u3 gen]$\n</code></pre> <p>You can embed a shell in an <code>embedded shell</code>, this is called <code>nested embedding</code> of shells.</p> <p>This screenshot shows an embedded shell inside an embedded shell.</p> <pre><code>paul@deb503:~$ A=shell\npaul@deb503:~$ echo $C$B$A $(B=sub;echo $C$B$A; echo $(C=sub;echo $C$B$A))\nshell subshell subsubshell\n</code></pre>"},{"location":"shell_in_shell/#backticks","title":"backticks","text":"<p>Single embedding can be useful to avoid changing your current directory. The screenshot below uses <code>backticks</code> instead of dollar-bracket to embed.</p> <pre><code>[paul@RHELv8u3 ~]$ echo `cd /etc; ls -d * | grep pass`\npasswd passwd- passwd.OLD\n[paul@RHELv8u3 ~]$\n</code></pre> <p>You can only use the <code>$()</code> notation to nest embedded shells, <code>backticks</code> cannot do this.</p>"},{"location":"shell_in_shell/#backticks-or-single-quotes","title":"backticks or single quotes","text":"<p>Placing the embedding between <code>backticks</code> uses one character less than the dollar and parenthesis combo. Be careful however, backticks are often confused with single quotes. The technical difference between <code>'</code> and <code>`</code> is significant!</p> <pre><code>[paul@RHELv8u3 gen]$ echo `var1=5;echo $var1`\n5\n[paul@RHELv8u3 gen]$ echo 'var1=5;echo $var1'\nvar1=5;echo $var1\n[paul@RHELv8u3 gen]$\n</code></pre>"},{"location":"shell_in_shell/#shell-options","title":"shell options","text":"<p>Both <code>set</code> and <code>unset</code> are builtin shell commands. They can be used to set options of the bash shell itself. The next example will clarify this. By default, the shell will treat unset variables as a variable having no value. By setting the -u option, the shell will treat any reference to unset variables as an error. See the man page of bash for more information.</p> <pre><code>[paul@RHEL4b ~]$ echo $var123\n\n[paul@RHEL4b ~]$ set -u\n[paul@RHEL4b ~]$ echo $var123\n-bash: var123: unbound variable\n[paul@RHEL4b ~]$ set +u\n[paul@RHEL4b ~]$ echo $var123\n\n[paul@RHEL4b ~]$\n</code></pre> <p>To list all the set options for your shell, use <code>echo $-</code>. The <code>noclobber</code> (or <code>-C</code>) option will be explained later in this book (in the I/O redirection chapter).</p> <pre><code>[paul@RHEL4b ~]$ echo $-\nhimBH\n[paul@RHEL4b ~]$ set -C ; set -u\n[paul@RHEL4b ~]$ echo $-\nhimuBCH\n[paul@RHEL4b ~]$ set +C ; set +u\n[paul@RHEL4b ~]$ echo $-\nhimBH\n[paul@RHEL4b ~]$\n</code></pre> <p>When typing <code>set</code> without options, you get a list of all variables without function when the shell is on <code>posix</code> mode. You can set bash in posix mode typing <code>set -o posix</code>.</p>"},{"location":"shell_in_shell/#practice-shell-embedding","title":"practice: shell embedding","text":"<p>1. Find the list of shell options in the man page of <code>bash</code>. What is the difference between <code>set -u</code> and <code>set -o nounset</code>?</p> <p>2. Activate <code>nounset</code> in your shell. Test that it shows an error message when using non-existing variables.</p> <p>3. Deactivate nounset.</p> <p>4. Execute <code>cd /var</code> and <code>ls</code> in an embedded shell.</p> <p>The <code>echo</code> command is only needed to show the result of the <code>ls</code> command. Omitting will result in the shell trying to execute the first file as a command.</p> <p>5. Create the variable embvar in an embedded shell and echo it. Does the variable exist in your current shell now ?</p> <p>6. Explain what \\\"set -x\\\" does. Can this be useful ?</p> <p>(optional)7. Given the following screenshot, add exactly four characters to that command line so that the total output is FirstMiddleLast.</p> <pre><code>[paul@RHEL8b ~]$ echo  First; echo  Middle; echo  Last\n</code></pre> <p>8. Display a <code>long listing</code> (ls -l) of the <code>passwd</code> command using the <code>which</code> command inside an embedded shell.</p>"},{"location":"shell_in_shell/#solution-shell-embedding","title":"solution: shell embedding","text":"<p>1. Find the list of shell options in the man page of <code>bash</code>. What is the difference between <code>set -u</code> and <code>set -o nounset</code>?</p> <p>read the manual of bash (man bash), search for nounset -- both mean the same thing.</p> <p>2. Activate <code>nounset</code> in your shell. Test that it shows an error message when using non-existing variables.</p> <pre><code>set -u\nOR\nset -o nounset\n</code></pre> <p>Both these lines have the same effect.</p> <p>3. Deactivate nounset.</p> <pre><code>set +u\nOR\nset +o nounset\n</code></pre> <p>4. Execute <code>cd /var</code> and <code>ls</code> in an embedded shell.</p> <pre><code>echo $(cd /var ; ls)\n</code></pre> <p>The <code>echo</code> command is only needed to show the result of the <code>ls</code> command. Omitting will result in the shell trying to execute the first file as a command.</p> <p>5. Create the variable embvar in an embedded shell and echo it. Does the variable exist in your current shell now ?</p> <pre><code>echo $(embvar=emb;echo $embvar) ; echo $embvar #the last echo fails\n\n$embvar does not exist in your current shell\n</code></pre> <p>6. Explain what \\\"set -x\\\" does. Can this be useful ?</p> <pre><code>It displays shell expansion for troubleshooting your command.\n</code></pre> <p>(optional)7. Given the following screenshot, add exactly four characters to that command line so that the total output is FirstMiddleLast.</p> <pre><code>[paul@RHEL8b ~]$ echo  First; echo  Middle; echo  Last\n\necho -n First; echo -n Middle; echo Last\n</code></pre> <p>8. Display a <code>long listing</code> (ls -l) of the <code>passwd</code> command using the <code>which</code> command inside an embedded shell.</p> <pre><code>ls -l $(which passwd)\n</code></pre>"},{"location":"shell_variables/","title":"shell variables","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>In this chapter we learn to manage environment <code>variables</code> in the shell. These <code>variables</code> are often needed by applications.</p>"},{"location":"shell_variables/#dollar-sign","title":"$ dollar sign","text":"<p>Another important character interpreted by the shell is the dollar sign <code>$</code>. The shell will look for an <code>environment variable</code> named like the string following the <code>dollar sign</code> and replace it with the value of the variable (or with nothing if the variable does not exist).</p> <p>These are some examples using $HOSTNAME, $USER, $UID, $SHELL, and $HOME.</p> <pre><code>[paul@RHELv8u3 ~]$ echo This is the $SHELL shell\nThis is the /bin/bash shell\n[paul@RHELv8u3 ~]$ echo This is $SHELL on computer $HOSTNAME\nThis is /bin/bash on computer RHELv8u3.localdomain\n[paul@RHELv8u3 ~]$ echo The userid of $USER is $UID\nThe userid of paul is 500\n[paul@RHELv8u3 ~]$ echo My homedir is $HOME\nMy homedir is /home/paul\n</code></pre>"},{"location":"shell_variables/#case-sensitive","title":"case sensitive","text":"<p>This example shows that shell variables are case sensitive!</p> <pre><code>[paul@RHELv8u3 ~]$ echo Hello $USER\nHello paul\n[paul@RHELv8u3 ~]$ echo Hello $user\nHello\n</code></pre>"},{"location":"shell_variables/#creating-variables","title":"creating variables","text":"<p>This example creates the variable <code>$MyVar</code> and sets its value. It then uses <code>echo</code> to verify the value.</p> <pre><code>[paul@RHELv8u3 gen]$ MyVar=555\n[paul@RHELv8u3 gen]$ echo $MyVar\n555\n[paul@RHELv8u3 gen]$\n</code></pre>"},{"location":"shell_variables/#quotes","title":"quotes","text":"<p>Notice that double quotes still allow the parsing of variables, whereas single quotes prevent this.</p> <pre><code>[paul@RHELv8u3 ~]$ MyVar=555\n[paul@RHELv8u3 ~]$ echo $MyVar\n555\n[paul@RHELv8u3 ~]$ echo \"$MyVar\"\n555\n[paul@RHELv8u3 ~]$ echo '$MyVar'\n$MyVar\n</code></pre> <p>The bash shell will replace variables with their value in double quoted lines, but not in single quoted lines.</p> <pre><code>paul@laika:~$ city=Burtonville\npaul@laika:~$ echo \"We are in $city today.\"\nWe are in Burtonville today.\npaul@laika:~$ echo 'We are in $city today.'\nWe are in $city today.\n</code></pre>"},{"location":"shell_variables/#set","title":"set","text":"<p>You can use the <code>set</code> command to display a list of environment variables. On Ubuntu and Debian systems, the <code>set</code> command will also list shell functions after the shell variables. Use <code>set | more</code> to see the variables then.</p>"},{"location":"shell_variables/#unset","title":"unset","text":"<p>Use the <code>unset</code> command to remove a variable from your shell environment.</p> <pre><code>[paul@RHEL4b ~]$ MyVar=8472\n[paul@RHEL4b ~]$ echo $MyVar\n8472\n[paul@RHEL4b ~]$ unset MyVar\n[paul@RHEL4b ~]$ echo $MyVar\n\n[paul@RHEL4b ~]$\n</code></pre>"},{"location":"shell_variables/#ps1","title":"$PS1","text":"<p>The <code>$PS1</code> variable determines your shell prompt. You can use backslash escaped special characters like <code>\\u</code> for the username or <code>\\w</code> for the working directory. The <code>bash</code> manual has a complete reference.</p> <p>In this example we change the value of <code>$PS1</code> a couple of times.</p> <pre><code>paul@deb503:~$ PS1=prompt\nprompt\npromptPS1='prompt '\nprompt \nprompt PS1='&gt; '\n&gt; \n&gt; PS1='\\u@\\h$ '\npaul@deb503$ \npaul@deb503$ PS1='\\u@\\h:\\W$'\npaul@deb503:~$\n</code></pre> <p>To avoid unrecoverable mistakes, you can set normal user prompts to green and the root prompt to red. Add the following to your <code>.bashrc</code> for a green user prompt:</p> <pre><code># color prompt by paul\nRED='\\[\\033[01;31m\\]'\nWHITE='\\[\\033[01;00m\\]'\nGREEN='\\[\\033[01;32m\\]'\nBLUE='\\[\\033[01;34m\\]'\nexport PS1=\"${debian_chroot:+($debian_chroot)}$GREEN\\u$WHITE@$BLUE\\h$WHITE\\w\\$ \"\n</code></pre>"},{"location":"shell_variables/#path","title":"$PATH","text":"<p>The <code>$PATH</code> variable is determines where the shell is looking for commands to execute (unless the command is builtin or aliased). This variable contains a list of directories, separated by colons.</p> <pre><code>[[paul@RHEL4b ~]$ echo $PATH\n/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:\n</code></pre> <p>The shell will not look in the current directory for commands to execute! (Looking for executables in the current directory provided an easy way to hack PC-DOS computers). If you want the shell to look in the current directory, then add a . at the end of your $PATH.</p> <pre><code>[paul@RHEL4b ~]$ PATH=$PATH:.\n[paul@RHEL4b ~]$ echo $PATH\n/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:.\n[paul@RHEL4b ~]$\n</code></pre> <p>Your path might be different when using su instead of <code>su -</code> because the latter will take on the environment of the target user. The root user typically has <code>/sbin</code> directories added to the $PATH variable.</p> <pre><code>[paul@RHEL3 ~]$ su\nPassword: \n[root@RHEL3 paul]# echo $PATH\n/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin\n[root@RHEL3 paul]# exit\n[paul@RHEL3 ~]$ su -\nPassword: \n[root@RHEL3 ~]# echo $PATH\n/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:\n[root@RHEL3 ~]#\n</code></pre>"},{"location":"shell_variables/#env","title":"env","text":"<p>The <code>env</code> command without options will display a list of <code>exported variables</code>. The difference with <code>set</code> with options is that <code>set</code> lists all variables, including those not exported to child shells.</p> <p>But <code>env</code> can also be used to start a clean shell (a shell without any inherited environment). The <code>env -i</code> command clears the environment for the subshell.</p> <p>Notice in this screenshot that <code>bash</code> will set the <code>$SHELL</code> variable on startup.</p> <pre><code>[paul@RHEL4b ~]$ bash -c 'echo $SHELL $HOME $USER'\n/bin/bash /home/paul paul\n[paul@RHEL4b ~]$ env -i bash -c 'echo $SHELL $HOME $USER'\n/bin/bash\n[paul@RHEL4b ~]$\n</code></pre> <p>You can use the <code>env</code> command to set the <code>$LANG</code>, or any other, variable for just one instance of <code>bash</code> with one command. The example below uses this to show the influence of the <code>$LANG</code> variable on file globbing (see the chapter on file globbing).</p> <pre><code>[paul@RHEL4b test]$ env LANG=C bash -c 'ls File[a-z]'\nFilea  Fileb\n[paul@RHEL4b test]$ env LANG=en_US.UTF-8 bash -c 'ls File[a-z]'\nFilea  FileA  Fileb  FileB\n[paul@RHEL4b test]$\n</code></pre>"},{"location":"shell_variables/#export","title":"export","text":"<p>You can export shell variables to other shells with the <code>export</code> command. This will export the variable to child shells.</p> <pre><code>[paul@RHEL4b ~]$ var3=three\n[paul@RHEL4b ~]$ var4=four\n[paul@RHEL4b ~]$ export var4\n[paul@RHEL4b ~]$ echo $var3 $var4\nthree four\n[paul@RHEL4b ~]$ bash\n[paul@RHEL4b ~]$ echo $var3 $var4\nfour\n</code></pre> <p>But it will not export to the parent shell (previous screenshot continued).</p> <pre><code>[paul@RHEL4b ~]$ export var5=five\n[paul@RHEL4b ~]$ echo $var3 $var4 $var5\nfour five\n[paul@RHEL4b ~]$ exit\nexit\n[paul@RHEL4b ~]$ echo $var3 $var4 $var5\nthree four\n[paul@RHEL4b ~]$\n</code></pre>"},{"location":"shell_variables/#delineate-variables","title":"delineate variables","text":"<p>Until now, we have seen that bash interprets a variable starting from a dollar sign, continuing until the first occurrence of a non-alphanumeric character that is not an underscore. In some situations, this can be a problem. This issue can be resolved with curly braces like in this example.</p> <pre><code>[paul@RHEL4b ~]$ prefix=Super\n[paul@RHEL4b ~]$ echo Hello $prefixman and $prefixgirl\nHello  and\n[paul@RHEL4b ~]$ echo Hello ${prefix}man and ${prefix}girl\nHello Superman and Supergirl\n[paul@RHEL4b ~]$\n</code></pre>"},{"location":"shell_variables/#unbound-variables","title":"unbound variables","text":"<p>The example below tries to display the value of the <code>$MyVar</code> variable, but it fails because the variable does not exist. By default the shell will display nothing when a variable is unbound (does not exist).</p> <pre><code>[paul@RHELv8u3 gen]$ echo $MyVar\n\n[paul@RHELv8u3 gen]$\n</code></pre> <p>There is, however, the <code>nounset</code> shell option that you can use to generate an error when a variable does not exist.</p> <pre><code>paul@laika:~$ set -u\npaul@laika:~$ echo $Myvar\nbash: Myvar: unbound variable\npaul@laika:~$ set +u\npaul@laika:~$ echo $Myvar\n\npaul@laika:~$\n</code></pre> <p>In the bash shell <code>set -u</code> is identical to <code>set -o nounset</code> and likewise <code>set +u</code> is identical to <code>set +o nounset</code>.</p>"},{"location":"shell_variables/#practice-shell-variables","title":"practice: shell variables","text":"<p>1. Use echo to display Hello followed by your username. (use a bash variable!)</p> <p>2. Create a variable <code>answer</code> with a value of <code>42</code>.</p> <p>3. Copy the value of $LANG to $MyLANG.</p> <p>4. List all current shell variables.</p> <p>5. List all exported shell variables.</p> <p>6. Do the <code>env</code> and <code>set</code> commands display your variable ?</p> <p>6. Destroy your <code>answer</code> variable.</p> <p>7. Create two variables, and <code>export</code> one of them.</p> <p>8. Display the exported variable in an interactive child shell.</p> <p>9. Create a variable, give it the value \\'Dumb\\', create another variable with value \\'do\\'. Use <code>echo</code> and the two variables to echo Dumbledore.</p> <p>10. Find the list of backslash escaped characters in the manual of bash. Add the time to your <code>PS1</code> prompt.</p>"},{"location":"shell_variables/#solution-shell-variables","title":"solution: shell variables","text":"<p>1. Use echo to display Hello followed by your username. (use a bash variable!)</p> <pre><code>echo Hello $USER\n</code></pre> <p>2. Create a variable <code>answer</code> with a value of <code>42</code>.</p> <pre><code>answer=42\n</code></pre> <p>3. Copy the value of $LANG to $MyLANG.</p> <pre><code>MyLANG=$LANG\n</code></pre> <p>4. List all current shell variables.</p> <pre><code>set\n\nset|more on Ubuntu/Debian\n</code></pre> <p>5. List all exported shell variables.</p> <pre><code>env\nexport\ndeclare -x\n</code></pre> <p>6. Do the <code>env</code> and <code>set</code> commands display your variable ?</p> <pre><code>env | more\nset | more\n</code></pre> <p>6. Destroy your <code>answer</code> variable.</p> <pre><code>unset answer\n</code></pre> <p>7. Create two variables, and <code>export</code> one of them.</p> <pre><code>var1=1; export var2=2\n</code></pre> <p>8. Display the exported variable in an interactive child shell.</p> <pre><code>bash\necho $var2\n</code></pre> <p>9. Create a variable, give it the value \\'Dumb\\', create another variable with value \\'do\\'. Use <code>echo</code> and the two variables to echo Dumbledore.</p> <pre><code>varx=Dumb; vary=do\n\necho ${varx}le${vary}re\nsolution by Yves from Dexia : echo $varx'le'$vary're'\nsolution by Erwin from Telenet : echo \"$varx\"le\"$vary\"re\n</code></pre> <p>10. Find the list of backslash escaped characters in the manual of bash. Add the time to your <code>PS1</code> prompt.</p> <pre><code>PS1='\\t \\u@\\h \\W$ '\n</code></pre>"},{"location":"user_management/","title":"user management","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This chapter will teach you how to use <code>useradd</code>, <code>usermod</code> and <code>userdel</code> to create, modify and remove user accounts.</p> <p>You will need <code>root</code> access on a Linux computer to complete this chapter.</p>"},{"location":"user_management/#user-management_1","title":"user management","text":"<p>User management on Linux can be done in three complementary ways. You can use the <code>graphical</code> tools provided by your distribution. These tools have a look and feel that depends on the distribution. If you are a novice Linux user on your home system, then use the graphical tool that is provided by your distribution. This will make sure that you do not run into problems.</p> <p>Another option is to use <code>command line tools</code> like useradd, usermod, gpasswd, passwd and others. Server administrators are likely to use these tools, since they are familiar and very similar across many different distributions. This chapter will focus on these command line tools.</p> <p>A third and rather extremist way is to <code>edit the local configuration files</code> directly using vi (or vipw/vigr). Do not attempt this as a novice on production systems!</p>"},{"location":"user_management/#etcpasswd","title":"/etc/passwd","text":"<p>The local user database on Linux (and on most Unixes) is <code>/etc/passwd</code>.</p> <pre><code>[root@RHEL5 ~]# tail /etc/passwd\ninge:x:518:524:art dealer:/home/inge:/bin/ksh\nann:x:519:525:flute player:/home/ann:/bin/bash\nfrederik:x:520:526:rubius poet:/home/frederik:/bin/bash\nsteven:x:521:527:roman emperor:/home/steven:/bin/bash\npascale:x:522:528:artist:/home/pascale:/bin/ksh\ngeert:x:524:530:kernel developer:/home/geert:/bin/bash\nwim:x:525:531:master damuti:/home/wim:/bin/bash\nsandra:x:526:532:radish stresser:/home/sandra:/bin/bash\nannelies:x:527:533:sword fighter:/home/annelies:/bin/bash\nlaura:x:528:534:art dealer:/home/laura:/bin/ksh\n</code></pre> <p>As you can see, this file contains seven columns separated by a colon. The columns contain the username, an x, the user id, the primary group id, a description, the name of the home directory, and the login shell.</p> <p>More information can be found by typing <code>man 5 passwd</code>.</p> <pre><code>[root@RHEL5 ~]# man 5 passwd\n</code></pre>"},{"location":"user_management/#root","title":"root","text":"<p>The <code>root</code> user also called the <code>superuser</code> is the most powerful account on your Linux system. This user can do almost anything, including the creation of other users. The root user always has userid 0 (regardless of the name of the account).</p> <pre><code>[root@RHEL5 ~]# head -1 /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n</code></pre>"},{"location":"user_management/#useradd","title":"useradd","text":"<p>You can add users with the <code>useradd</code> command. The example below shows how to add a user named yanina (last parameter) and at the same time forcing the creation of the home directory (-m), setting the name of the home directory (-d), and setting a description (-c).</p> <pre><code>[root@RHEL5 ~]# useradd -m -d /home/yanina -c \"yanina wickmayer\" yanina\n[root@RHEL5 ~]# tail -1 /etc/passwd\nyanina:x:529:529:yanina wickmayer:/home/yanina:/bin/bash\n</code></pre> <p>The user named yanina received userid 529 and <code>primary group</code> id 529.</p>"},{"location":"user_management/#etcdefaultuseradd","title":"/etc/default/useradd","text":"<p>Both Red Hat Enterprise Linux and Debian/Ubuntu have a file called <code>/etc/default/useradd</code> that contains some default user options. Besides using cat to display this file, you can also use <code>useradd -D</code>.</p> <pre><code>[root@RHEL4 ~]# useradd -D\nGROUP=100\nHOME=/home\nINACTIVE=-1\nEXPIRE=\nSHELL=/bin/bash\nSKEL=/etc/skel\n</code></pre>"},{"location":"user_management/#userdel","title":"userdel","text":"<p>You can delete the user yanina with <code>userdel</code>. The -r option of userdel will also remove the home directory.</p> <pre><code>[root@RHEL5 ~]# userdel -r yanina\n</code></pre>"},{"location":"user_management/#usermod","title":"usermod","text":"<p>You can modify the properties of a user with the <code>usermod</code> command. This example uses <code>usermod</code> to change the description of the user harry.</p> <pre><code>[root@RHEL4 ~]# tail -1 /etc/passwd\nharry:x:516:520:harry potter:/home/harry:/bin/bash\n[root@RHEL4 ~]# usermod -c 'wizard' harry\n[root@RHEL4 ~]# tail -1 /etc/passwd\nharry:x:516:520:wizard:/home/harry:/bin/bash\n</code></pre>"},{"location":"user_management/#creating-home-directories","title":"creating home directories","text":"<p>The easiest way to create a home directory is to supply the <code>-m</code> option with <code>useradd</code> (it is likely set as a default option on Linux).</p> <p>A less easy way is to create a home directory manually with <code>mkdir</code> which also requires setting the owner and the permissions on the directory with <code>chmod</code> and <code>chown</code> (both commands are discussed in detail in another chapter).</p> <pre><code>[root@RHEL5 ~]# mkdir /home/laura\n[root@RHEL5 ~]# chown laura:laura /home/laura\n[root@RHEL5 ~]# chmod 700 /home/laura\n[root@RHEL5 ~]# ls -ld /home/laura/\ndrwx------ 2 laura laura 4096 Jun 24 15:17 /home/laura/\n</code></pre>"},{"location":"user_management/#etcskel","title":"/etc/skel/","text":"<p>When using <code>useradd</code> the <code>-m</code> option, the <code>/etc/skel/</code> directory is copied to the newly created home directory. The <code>/etc/skel/</code> directory contains some (usually hidden) files that contain profile settings and default values for applications. In this way <code>/etc/skel/</code> serves as a default home directory and as a default user profile.</p> <pre><code>[root@RHEL5 ~]# ls -la /etc/skel/\ntotal 48\ndrwxr-xr-x  2 root root  4096 Apr  1 00:11 .\ndrwxr-xr-x 97 root root 12288 Jun 24 15:36 ..\n-rw-r--r--  1 root root    24 Jul 12  2006 .bash_logout\n-rw-r--r--  1 root root   176 Jul 12  2006 .bash_profile\n-rw-r--r--  1 root root   124 Jul 12  2006 .bashrc\n</code></pre>"},{"location":"user_management/#deleting-home-directories","title":"deleting home directories","text":"<p>The -r option of <code>userdel</code> will make sure that the home directory is deleted together with the user account.</p> <pre><code>[root@RHEL5 ~]# ls -ld /home/wim/\ndrwx------ 2 wim wim 4096 Jun 24 15:19 /home/wim/\n[root@RHEL5 ~]# userdel -r wim\n[root@RHEL5 ~]# ls -ld /home/wim/\nls: /home/wim/: No such file or directory\n</code></pre>"},{"location":"user_management/#login-shell","title":"login shell","text":"<p>The <code>/etc/passwd</code> file specifies the <code>login shell</code> for the user. In the screenshot below you can see that user annelies will log in with the <code>/bin/bash</code> shell, and user laura with the <code>/bin/ksh</code> shell.</p> <pre><code>[root@RHEL5 ~]# tail -2 /etc/passwd\nannelies:x:527:533:sword fighter:/home/annelies:/bin/bash\nlaura:x:528:534:art dealer:/home/laura:/bin/ksh\n</code></pre> <p>You can use the usermod command to change the shell for a user.</p> <pre><code>[root@RHEL5 ~]# usermod -s /bin/bash laura\n[root@RHEL5 ~]# tail -1 /etc/passwd\nlaura:x:528:534:art dealer:/home/laura:/bin/bash\n</code></pre>"},{"location":"user_management/#chsh","title":"chsh","text":"<p>Users can change their login shell with the <code>chsh</code> command. First, user harry obtains a list of available shells (he could also have done a <code>cat /etc/shells</code>) and then changes his login shell to the <code>Korn shell</code> (/bin/ksh). At the next login, harry will default into ksh instead of bash.</p> <pre><code>[laura@centos7 ~]$ chsh -l\n/bin/sh\n/bin/bash\n/sbin/nologin\n/usr/bin/sh\n/usr/bin/bash\n/usr/sbin/nologin\n/bin/ksh\n/bin/tcsh\n/bin/csh\n[laura@centos7 ~]$\n</code></pre> <p>Note that the <code>-l</code> option does not exist on Debian and that the above screenshot assumes that <code>ksh</code> and <code>csh</code> shells are installed.</p> <p>The screenshot below shows how <code>laura</code> can change her default shell (active on next login).</p> <pre><code>[laura@centos7 ~]$ chsh -s /bin/ksh\nChanging shell for laura.\nPassword: \nShell changed.\n</code></pre>"},{"location":"user_management/#practice-user-management","title":"practice: user management","text":"<p>1. Create a user account named <code>serena</code>, including a home directory and a description (or comment) that reads <code>Serena Williams</code>. Do all this in one single command.</p> <p>2. Create a user named <code>venus</code>, including home directory, bash shell, a description that reads <code>Venus Williams</code> all in one single command.</p> <p>3. Verify that both users have correct entries in <code>/etc/passwd</code>, <code>/etc/shadow</code> and <code>/etc/group</code>.</p> <p>4. Verify that their home directory was created.</p> <p>5. Create a user named <code>einstime</code> with <code>/bin/date</code> as his default logon shell.</p> <p>6. What happens when you log on with the <code>einstime</code> user ? Can you think of a useful real world example for changing a user\\'s login shell to an application ?</p> <p>7. Create a file named <code>welcome.txt</code> and make sure every new user will see this file in their home directory.</p> <p>8. Verify this setup by creating (and deleting) a test user account.</p> <p>9. Change the default login shell for the <code>serena</code> user to <code>/bin/bash</code>. Verify before and after you make this change.</p>"},{"location":"user_management/#solution-user-management","title":"solution: user management","text":"<p>1. Create a user account named <code>serena</code>, including a home directory and a description (or comment) that reads <code>Serena Williams</code>. Do all this in one single command.</p> <pre><code>root@debian10:~# useradd -m -c 'Serena Williams' serena\n</code></pre> <p>2. Create a user named <code>venus</code>, including home directory, bash shell, a description that reads <code>Venus Williams</code> all in one single command.</p> <pre><code>root@debian10:~# useradd -m -c \"Venus Williams\" -s /bin/bash venus\n</code></pre> <p>3. Verify that both users have correct entries in <code>/etc/passwd</code>, <code>/etc/shadow</code> and <code>/etc/group</code>.</p> <pre><code>root@debian10:~# tail -2 /etc/passwd\nserena:x:1008:1010:Serena Williams:/home/serena:/bin/sh\nvenus:x:1009:1011:Venus Williams:/home/venus:/bin/bash\nroot@debian10:~# tail -2 /etc/shadow\nserena:!:16358:0:99999:7:::\nvenus:!:16358:0:99999:7:::\nroot@debian10:~# tail -2 /etc/group\nserena:x:1010:\nvenus:x:1011:\n</code></pre> <p>4. Verify that their home directory was created.</p> <pre><code>root@debian10:~# ls -lrt /home | tail -2\ndrwxr-xr-x 2 serena    serena    4096 Oct 15 10:50 serena\ndrwxr-xr-x 2 venus     venus     4096 Oct 15 10:59 venus\nroot@debian10:~#\n</code></pre> <p>5. Create a user named <code>einstime</code> with <code>/bin/date</code> as his default logon shell.</p> <pre><code>root@debian10:~# useradd -s /bin/date einstime\n</code></pre> <p>Or even better:</p> <pre><code>root@debian10:~# useradd -s $(which date) einstime\n</code></pre> <p>6. What happens when you log on with the <code>einstime</code> user ? Can you think of a useful real world example for changing a user\\'s login shell to an application ?</p> <pre><code>root@debian10:~# su - einstime\nWed Oct 15 11:05:56 UTC 2014    # You get the output of the date command\nroot@debian10:~#\n</code></pre> <p>It can be useful when users need to access only one application on the server. Just logging in opens the application for them, and closing the application automatically logs them out.</p> <p>7. Create a file named <code>welcome.txt</code> and make sure every new user will see this file in their home directory.</p> <pre><code>root@debian10:~# echo Hello &gt; /etc/skel/welcome.txt\n</code></pre> <p>8. Verify this setup by creating (and deleting) a test user account.</p> <pre><code>root@debian10:~# useradd -m test\nroot@debian10:~# ls -l /home/test\ntotal 4\n-rw-r--r-- 1 test test 6 Oct 15 11:16 welcome.txt\nroot@debian10:~# userdel -r test\nroot@debian10:~#\n</code></pre> <p>9. Change the default login shell for the <code>serena</code> user to <code>/bin/bash</code>. Verify before and after you make this change.</p> <pre><code>root@debian10:~# grep serena /etc/passwd\nserena:x:1008:1010:Serena Williams:/home/serena:/bin/sh\nroot@debian10:~# usermod -s /bin/bash serena\nroot@debian10:~# grep serena /etc/passwd\nserena:x:1008:1010:Serena Williams:/home/serena:/bin/bash\nroot@debian10:~#\n</code></pre>"},{"location":"user_passwords/","title":"user passwords","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This chapter will tell you more about passwords for local users.</p> <p>Three methods for setting passwords are explained; using the <code>passwd</code> command, using <code>openssel passwd</code>, and using the <code>crypt</code> function in a C program.</p> <p>The chapter will also discuss password settings and disabling, suspending or locking accounts.</p>"},{"location":"user_passwords/#passwd","title":"passwd","text":"<p>Passwords of users can be set with the <code>passwd</code> command. Users will have to provide their old password before twice entering the new one.</p> <pre><code>[tania@centos7 ~]$ passwd\nChanging password for user tania.\nChanging password for tania.\n(current) UNIX password:\nNew password:\nBAD PASSWORD: The password is shorter than 8 characters\nNew password:\nBAD PASSWORD: The password is a palindrome\nNew password:\nBAD PASSWORD: The password is too similar to the old one\npasswd: Have exhausted maximum number of retries for service\n</code></pre> <p>As you can see, the passwd tool will do some basic verification to prevent users from using too simple passwords. The <code>root</code> user does not have to follow these rules (there will be a warning though). The <code>root</code> user also does not have to provide the old password before entering the new password twice.</p> <pre><code>root@debian10:~# passwd tania\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\n</code></pre>"},{"location":"user_passwords/#shadow-file","title":"shadow file","text":"<p>User passwords are encrypted and kept in <code>/etc/shadow</code>. The /etc/shadow file is read only and can only be read by root. We will see in the file permissions section how it is possible for users to change their password. For now, you will have to know that users can change their password with the <code>/usr/bin/passwd</code> command.</p> <pre><code>[root@centos7 ~]# tail -4 /etc/shadow\npaul:$6$ikp2Xta5BT.Tml.p$2TZjNnOYNNQKpwLJqoGJbVsZG5/Fti8ovBRd.VzRbiDSl7TEq\\\nIaSMH.TeBKnTS/SjlMruW8qffC0JNORW.BTW1:16338:0:99999:7:::\ntania:$6$8Z/zovxj$9qvoqT8i9KIrmN.k4EQwAF5ryz5yzNwEvYjAa9L5XVXQu.z4DlpvMREH\\\neQpQzvRnqFdKkVj17H5ST.c79HDZw0:16356:0:99999:7:::\nlaura:$6$glDuTY5e$/NYYWLxfHgZFWeoujaXSMcR.Mz.lGOxtcxFocFVJNb98nbTPhWFXfKWG\\\nSyYh1WCv6763Wq54.w24Yr3uAZBOm/:16356:0:99999:7:::\nvalentina:$6$jrZa6PVI$1uQgqR6En9mZB6mKJ3LXRB4CnFko6LRhbh.v4iqUk9MVreui1lv7\\\nGxHOUDSKA0N55ZRNhGHa6T2ouFnVno/0o1:16356:0:99999:7:::\n[root@centos7 ~]#\n</code></pre> <p>The <code>/etc/shadow</code> file contains nine colon separated columns. The nine fields contain (from left to right) the user name, the encrypted password (note that only inge and laura have an encrypted password), the day the password was last changed (day 1 is January 1, 1970), number of days the password must be left unchanged, password expiry day, warning number of days before password expiry, number of days after expiry before disabling the account, and the day the account was disabled (again, since 1970). The last field has no meaning yet.</p> <p>All the passwords in the screenshot above are hashes of <code>hunter2</code>.</p>"},{"location":"user_passwords/#encryption-with-passwd","title":"encryption with passwd","text":"<p>Passwords are stored in an encrypted format. This encryption is done by the <code>crypt</code> function. The easiest (and recommended) way to add a user with a password to the system is to add the user with the <code>useradd -m user</code> command, and then set the user\\'s password with <code>passwd</code>.</p> <pre><code>[root@RHEL4 ~]# useradd -m xavier\n[root@RHEL4 ~]# passwd xavier\nChanging password for user xavier.\nNew UNIX password: \nRetype new UNIX password: \npasswd: all authentication tokens updated successfully.\n[root@RHEL4 ~]#\n</code></pre>"},{"location":"user_passwords/#encryption-with-openssl","title":"encryption with openssl","text":"<p>Another way to create users with a password is to use the -p option of useradd, but that option requires an encrypted password. You can generate this encrypted password with the <code>openssl passwd</code> command.</p> <p>The <code>openssl passwd</code> command will generate several distinct hashes for the same password, for this it uses a <code>salt</code>.</p> <pre><code>paul@rhel65:~$ openssl passwd hunter2\n86jcUNlnGDFpY\npaul@rhel65:~$ openssl passwd hunter2\nYj7mDO9OAnvq6\npaul@rhel65:~$ openssl passwd hunter2\nYqDcJeGoDbzKA\npaul@rhel65:~$\n</code></pre> <p>This <code>salt</code> can be chosen and is visible as the first two characters of the hash.</p> <pre><code>paul@rhel65:~$ openssl passwd -salt 42 hunter2\n42ZrbtP1Ze8G.\npaul@rhel65:~$ openssl passwd -salt 42 hunter2\n42ZrbtP1Ze8G.\npaul@rhel65:~$ openssl passwd -salt 42 hunter2\n42ZrbtP1Ze8G.\npaul@rhel65:~$\n</code></pre> <p>This example shows how to create a user with password.</p> <pre><code>root@rhel65:~# useradd -m -p $(openssl passwd hunter2) mohamed\n</code></pre> <p>Note that this command puts the password in your command history!</p>"},{"location":"user_passwords/#encryption-with-crypt","title":"encryption with crypt","text":"<p>A third option is to create your own C program using the crypt function, and compile this into a command.</p> <pre><code>paul@rhel65:~$ cat MyCrypt.c\n#include &lt;stdio.h&gt;\n#define __USE_XOPEN\n#include &lt;unistd.h&gt;\n\nint main(int argc, char** argv)\n{\n if(argc==3)\n   {\n       printf(\"%s\\n\", crypt(argv[1],argv[2]));\n   }\n   else\n   {\n       printf(\"Usage: MyCrypt $password $salt\\n\" );\n   }\n  return 0;\n}\n</code></pre> <p>This little program can be compiled with <code>gcc</code> like this.</p> <pre><code>paul@rhel65:~$ gcc MyCrypt.c -o MyCrypt -lcrypt\n</code></pre> <p>To use it, we need to give two parameters to MyCrypt. The first is the unencrypted password, the second is the salt. The salt is used to perturb the encryption algorithm in one of 4096 different ways. This variation prevents two users with the same password from having the same entry in <code>/etc/shadow</code>.</p> <pre><code>paul@rhel65:~$ ./MyCrypt hunter2 42\n42ZrbtP1Ze8G.\npaul@rhel65:~$ ./MyCrypt hunter2 33\n33d6taYSiEUXI\n</code></pre> <p>Did you notice that the first two characters of the password are the <code>salt</code>?</p> <p>The standard output of the crypt function is using the DES algorithm which is old and can be cracked in minutes. A better method is to use <code>md5</code> passwords which can be recognized by a salt starting with $1$.</p> <pre><code>paul@rhel65:~$ ./MyCrypt hunter2 '$1$42'\n$1$42$7l6Y3xT5282XmZrtDOF9f0\npaul@rhel65:~$ ./MyCrypt hunter2 '$6$42'\n$6$42$OqFFAVnI3gTSYG0yI9TZWX9cpyQzwIop7HwpG1LLEsNBiMr4w6OvLX1KDa./UpwXfrFk1i...\n</code></pre> <p>The <code>md5</code> salt can be up to eight characters long. The salt is displayed in <code>/etc/shadow</code> between the second and third $, so never use the password as the salt!</p> <pre><code>paul@rhel65:~$ ./MyCrypt hunter2 '$1$hunter2'\n$1$hunter2$YVxrxDmidq7Xf8Gdt6qM2.\n</code></pre>"},{"location":"user_passwords/#etclogindefs","title":"/etc/login.defs","text":"<p>The <code>/etc/login.defs</code> file contains some default settings for user passwords like password aging and length settings. (You will also find the numerical limits of user ids and group ids and whether or not a home directory should be created by default).</p> <pre><code>root@rhel65:~# grep ^PASS /etc/login.defs\nPASS_MAX_DAYS   99999\nPASS_MIN_DAYS   0\nPASS_MIN_LEN    5\nPASS_WARN_AGE   7\n</code></pre> <p>Debian also has this file.</p> <pre><code>root@debian10:~# grep PASS /etc/login.defs\n#  PASS_MAX_DAYS   Maximum number of days a password may be used.\n#  PASS_MIN_DAYS   Minimum number of days allowed between password changes.\n#  PASS_WARN_AGE   Number of days warning given before a password expires.\nPASS_MAX_DAYS   99999\nPASS_MIN_DAYS   0\nPASS_WARN_AGE   7\n#PASS_CHANGE_TRIES\n#PASS_ALWAYS_WARN\n#PASS_MIN_LEN\n#PASS_MAX_LEN\n# NO_PASSWORD_CONSOLE\nroot@debian10:~#\n</code></pre>"},{"location":"user_passwords/#chage","title":"chage","text":"<p>The <code>chage</code> command can be used to set an expiration date for a user account (-E), set a minimum (-m) and maximum (-M) password age, a password expiration date, and set the number of warning days before the password expiration date. Much of this functionality is also available from the <code>passwd</code> command. The <code>-l</code> option of chage will list these settings for a user.</p> <pre><code>root@rhel65:~# chage -l paul\nLast password change                                    : Mar 27, 2014\nPassword expires                                        : never\nPassword inactive                                       : never\nAccount expires                                         : never\nMinimum number of days between password change          : 0\nMaximum number of days between password change          : 99999\nNumber of days of warning before password expires       : 7\nroot@rhel65:~#\n</code></pre>"},{"location":"user_passwords/#disabling-a-password","title":"disabling a password","text":"<p>Passwords in <code>/etc/shadow</code> cannot begin with an exclamation mark. When the second field in <code>/etc/passwd</code> starts with an exclamation mark, then the password can not be used.</p> <p>Using this feature is often called <code>locking</code>, <code>disabling</code>, or <code>suspending</code> a user account. Besides <code>vi</code> (or vipw) you can also accomplish this with <code>usermod</code>.</p> <p>The first command in the next screenshot will show the hashed password of <code>laura</code> in <code>/etc/shadow</code>. The next command disables the password of <code>laura</code>, making it impossible for Laura to authenticate using this password.</p> <pre><code>root@debian10:~# grep laura /etc/shadow | cut -c1-70\nlaura:$6$JYj4JZqp$stwwWACp3OtE1R2aZuE87j.nbW.puDkNUYVk7mCHfCVMa3CoDUJV\nroot@debian10:~# usermod -L laura\n</code></pre> <p>As you can see below, the password hash is simply preceded with an exclamation mark.</p> <pre><code>root@debian10:~# grep laura /etc/shadow | cut -c1-70\nlaura:!$6$JYj4JZqp$stwwWACp3OtE1R2aZuE87j.nbW.puDkNUYVk7mCHfCVMa3CoDUJ\nroot@debian10:~#\n</code></pre> <p>The root user (and users with <code>sudo</code> rights on <code>su</code>) still will be able to <code>su</code> into the <code>laura</code> account (because the password is not needed here). Also note that <code>laura</code> will still be able to login if she has set up passwordless ssh!</p> <pre><code>root@debian10:~# su - laura\nlaura@debian10:~$\n</code></pre> <p>You can unlock the account again with <code>usermod -U</code>.</p> <pre><code>root@debian10:~# usermod -U laura\nroot@debian10:~# grep laura /etc/shadow | cut -c1-70\nlaura:$6$JYj4JZqp$stwwWACp3OtE1R2aZuE87j.nbW.puDkNUYVk7mCHfCVMa3CoDUJV\n</code></pre> <p>Watch out for tiny differences in the command line options of <code>passwd</code>, <code>usermod</code>, and <code>useradd</code> on different Linux distributions. Verify the local files when using features like <code>\"disabling, suspending, or locking\"</code> on user accounts and their passwords.</p>"},{"location":"user_passwords/#editing-local-files","title":"editing local files","text":"<p>If you still want to manually edit the <code>/etc/passwd</code> or <code>/etc/shadow</code>, after knowing these commands for password management, then use <code>vipw</code> instead of vi(m) directly. The <code>vipw</code> tool will do proper locking of the file.</p> <pre><code>[root@RHEL5 ~]# vipw /etc/passwd\nvipw: the password file is busy (/etc/ptmp present)\n</code></pre>"},{"location":"user_passwords/#practice-user-passwords","title":"practice: user passwords","text":"<p>1. Set the password for <code>serena</code> to <code>hunter2</code>.</p> <p>2. Also set a password for <code>venus</code> and then lock the <code>venus</code> user account with <code>usermod</code>. Verify the locking in <code>/etc/shadow</code> before and after you lock it.</p> <p>3. Use <code>passwd -d</code> to disable the <code>serena</code> password. Verify the <code>serena</code> line in <code>/etc/shadow</code> before and after disabling.</p> <p>4. What is the difference between locking a user account and disabling a user account\\'s password like we just did with <code>usermod -L</code> and <code>passwd -d</code>?</p> <p>5. Try changing the password of serena to serena as serena.</p> <p>6. Make sure <code>serena</code> has to change her password in 10 days.</p> <p>7. Make sure every new user needs to change their password every 10 days.</p> <p>8. Take a backup as root of <code>/etc/shadow</code>. Use <code>vi</code> to copy an encrypted <code>hunter2</code> hash from <code>venus</code> to <code>serena</code>. Can <code>serena</code> now log on with <code>hunter2</code> as a password ?</p> <p>9. Why use <code>vipw</code> instead of <code>vi</code> ? What could be the problem when using <code>vi</code> or <code>vim</code> ?</p> <p>10. Use <code>chsh</code> to list all shells (only works on RHEL/CentOS/Fedora), and compare to <code>cat /etc/shells</code>.</p> <p>11. Which <code>useradd</code> option allows you to name a home directory ?</p> <p>12. How can you see whether the password of user <code>serena</code> is locked or unlocked ? Give a solution with <code>grep</code> and a solution with <code>passwd</code>.</p>"},{"location":"user_passwords/#solution-user-passwords","title":"solution: user passwords","text":"<p>1. Set the password for <code>serena</code> to <code>hunter2</code>.</p> <pre><code>root@debian10:~# passwd serena\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\n</code></pre> <p>2. Also set a password for <code>venus</code> and then lock the <code>venus</code> user account with <code>usermod</code>. Verify the locking in <code>/etc/shadow</code> before and after you lock it.</p> <pre><code>root@debian10:~# passwd venus\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\nroot@debian10:~# grep venus /etc/shadow | cut -c1-70\nvenus:$6$gswzXICW$uSnKFV1kFKZmTPaMVS4AvNA/KO27OxN0v5LHdV9ed0gTyXrjUeM/\nroot@debian10:~# usermod -L venus\nroot@debian10:~# grep venus /etc/shadow | cut -c1-70\nvenus:!$6$gswzXICW$uSnKFV1kFKZmTPaMVS4AvNA/KO27OxN0v5LHdV9ed0gTyXrjUeM\n</code></pre> <p>Note that <code>usermod -L</code> precedes the password hash with an exclamation mark (!).</p> <p>3. Use <code>passwd -d</code> to disable the <code>serena</code> password. Verify the <code>serena</code> line in <code>/etc/shadow</code> before and after disabling.</p> <pre><code>root@debian10:~# grep serena /etc/shadow | cut -c1-70\nserena:$6$Es/omrPE$F2Ypu8kpLrfKdW0v/UIwA5jrYyBD2nwZ/dt.i/IypRgiPZSdB/B\nroot@debian10:~# passwd -d serena\npasswd: password expiry information changed.\nroot@debian10:~# grep serena /etc/shadow\nserena::16358:0:99999:7:::\nroot@debian10:~#\n</code></pre> <p>4. What is the difference between locking a user account and disabling a user account\\'s password like we just did with <code>usermod -L</code> and <code>passwd -d</code>?</p> <p>Locking will prevent the user from logging on to the system with his password by putting a ! in front of the password in <code>/etc/shadow</code>.</p> <p>Disabling with <code>passwd</code> will erase the password from <code>/etc/shadow</code>.</p> <p>5. Try changing the password of serena to serena as serena.</p> <pre><code>log on as serena, then execute: passwd serena... it should fail!\n</code></pre> <p>6. Make sure <code>serena</code> has to change her password in 10 days.</p> <pre><code>chage -M 10 serena\n</code></pre> <p>7. Make sure every new user needs to change their password every 10 days.</p> <pre><code>vi /etc/login.defs (and change PASS_MAX_DAYS to 10)\n</code></pre> <p>8. Take a backup as root of <code>/etc/shadow</code>. Use <code>vi</code> to copy an encrypted <code>hunter2</code> hash from <code>venus</code> to <code>serena</code>. Can <code>serena</code> now log on with <code>hunter2</code> as a password ?</p> <pre><code>Yes.\n</code></pre> <p>9. Why use <code>vipw</code> instead of <code>vi</code> ? What could be the problem when using <code>vi</code> or <code>vim</code> ?</p> <pre><code>vipw will give a warning when someone else is already using that file (with vipw).\n</code></pre> <p>10. Use <code>chsh</code> to list all shells (only works on RHEL/CentOS/Fedora), and compare to <code>cat /etc/shells</code>.</p> <pre><code>chsh -l\ncat /etc/shells\n</code></pre> <p>11. Which <code>useradd</code> option allows you to name a home directory ?</p> <pre><code>-d\n</code></pre> <p>12. How can you see whether the password of user <code>serena</code> is locked or unlocked ? Give a solution with <code>grep</code> and a solution with <code>passwd</code>.</p> <pre><code>grep serena /etc/shadow\n\npasswd -S serena\n</code></pre>"},{"location":"user_profiles/","title":"User profiles","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>Logged on users have a number of preset (and customized) aliases, variables, and functions, but where do they come from ? The <code>shell</code> uses a number of startup files that are executed (or rather <code>sourced</code>) whenever the shell is invoked. What follows is an overview of startup scripts.</p>"},{"location":"user_profiles/#system-profile","title":"system profile","text":"<p>Both the <code>bash</code> and the <code>ksh</code> shell will verify the existence of <code>/etc/profile</code> and <code>source</code> it if it exists.</p> <p>When reading this script, you will notice (both on Debian and on Red Hat Enterprise Linux) that it builds the PATH environment variable (among others). The script might also change the PS1 variable, set the HOSTNAME and execute even more scripts like <code>/etc/inputrc</code></p> <p>This screenshot uses grep to show PATH manipulation in <code>/etc/profile</code> on Debian.</p> <pre><code>root@debian10:~# grep PATH /etc/profile\n  PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\"\nexport PATH\nroot@debian10:~#\n</code></pre> <p>This screenshot uses grep to show PATH manipulation in <code>/etc/profile</code> on RHEL7/CentOS7.</p> <pre><code>[root@centos7 ~]# grep PATH /etc/profile\n    case \":${PATH}:\" in\n                PATH=$PATH:$1\n                PATH=$1:$PATH\nexport PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL\n[root@centos7 ~]#\n</code></pre> <p>The <code>root user</code> can use this script to set aliases, functions, and variables for every user on the system.</p>"},{"location":"user_profiles/#bash_profile","title":"\\~/.bash_profile","text":"<p>When this file exists in the home directory, then <code>bash</code> will source it. On Debian Linux 5/6/7 this file does not exist by default.</p> <p>RHEL7/CentOS7 uses a small <code>~/.bash_profile</code> where it checks for the existence of <code>~/.bashrc</code> and then sources it. It also adds $HOME/bin to the $PATH variable.</p> <pre><code>[root@rhel7 ~]# cat /home/paul/.bash_profile\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\n\nexport PATH\n[root@rhel7 ~]#\n</code></pre>"},{"location":"user_profiles/#bash_login","title":"\\~/.bash_login","text":"<p>When <code>.bash_profile</code> does not exist, then <code>bash</code> will check for <code>~/.bash_login</code> and source it.</p> <p>Neither Debian nor Red Hat have this file by default.</p>"},{"location":"user_profiles/#profile","title":"\\~/.profile","text":"<p>When neither <code>~/.bash_profile</code> and <code>~/.bash_login</code> exist, then bash will verify the existence of <code>~/.profile</code> and execute it. This file does not exist by default on Red Hat.</p> <p>On Debian this script can execute <code>~/.bashrc</code> and will add $HOME/bin to the $PATH variable.</p> <pre><code>root@debian10:~# tail -11 /home/paul/.profile\nif [ -n \"$BASH_VERSION\" ]; then\n    # include .bashrc if it exists\n    if [ -f \"$HOME/.bashrc\" ]; then\n        . \"$HOME/.bashrc\"\n    fi\nfi\n\n# set PATH so it includes user's private bin if it exists\nif [ -d \"$HOME/bin\" ] ; then\n    PATH=\"$HOME/bin:$PATH\"\nfi\n</code></pre> <p>RHEL/CentOS does not have this file by default.</p>"},{"location":"user_profiles/#bashrc","title":"\\~/.bashrc","text":"<p>The <code>~/.bashrc</code> script is often sourced by other scripts. Let us take a look at what it does by default.</p> <p>Red Hat uses a very simple <code>~/.bashrc</code>, checking for <code>/etc/bashrc</code> and sourcing it. It also leaves room for custom aliases and functions.</p> <pre><code>[root@rhel7 ~]# cat /home/paul/.bashrc\n# .bashrc\n\n# Source global definitions\nif [ -f /etc/bashrc ]; then\n        . /etc/bashrc\nfi\n\n# Uncomment the following line if you don't like systemctl's auto-paging feature:\n# export SYSTEMD_PAGER=\n\n# User specific aliases and functions\n</code></pre> <p>On Debian this script is quite a bit longer and configures $PS1, some history variables and a number af active and inactive aliases.</p> <pre><code>root@debian10:~# wc -l /home/paul/.bashrc\n110 /home/paul/.bashrc\n</code></pre>"},{"location":"user_profiles/#bash_logout","title":"\\~/.bash_logout","text":"<p>When exiting <code>bash</code>, it can execute <code>~/.bash_logout</code>.</p> <p>Debian use this opportunity to clear the console screen.</p> <pre><code>serena@deb106:~$ cat .bash_logout\n# ~/.bash_logout: executed by bash(1) when login shell exits.\n\n# when leaving the console clear the screen to increase privacy\n\nif [ \"$SHLVL\" = 1 ]; then\n    [ -x /usr/bin/clear_console ] &amp;&amp; /usr/bin/clear_console -q\nfi\n</code></pre> <p>Red Hat Enterprise Linux 5 will simple call the <code>/usr/bin/clear</code> command in this script.</p> <pre><code>[serena@rhel53 ~]$ cat .bash_logout \n# ~/.bash_logout\n\n/usr/bin/clear\n</code></pre> <p>Red Hat Enterprise Linux 6 and 7 create this file, but leave it empty (except for a comment).</p> <pre><code>paul@rhel65:~$ cat .bash_logout\n# ~/.bash_logout\n</code></pre>"},{"location":"user_profiles/#debian-overview","title":"Debian overview","text":"<p>Below is a table overview of when Debian is running any of these bash startup scripts.</p> <p>script               su    su -   ssh    gdm</p> <p>\\~./bashrc           no    yes    yes    yes</p> <p>\\~/.profile          no    yes    yes    yes</p> <p>/etc/profile         no    yes    yes    yes</p> <p>/etc/bash.bashrc    yes     no     no    yes</p> <p>: Debian User Environment</p>"},{"location":"user_profiles/#rhel5-overview","title":"RHEL5 overview","text":"<p>Below is a table overview of when Red Hat Enterprise Linux 5 is running any of these bash startup scripts.</p> <p>script               su    su -   ssh    gdm</p> <p>\\~./bashrc          yes    yes    yes    yes</p> <p>\\~/.bash_profile     no    yes    yes    yes</p> <p>/etc/profile         no    yes    yes    yes</p> <p>/etc/bashrc         yes    yes    yes    yes</p> <p>: Red Hat User Environment</p>"},{"location":"user_profiles/#practice-user-profiles","title":"practice: user profiles","text":"<p>1. Make a list of all the profile files on your system.</p> <p>2. Read the contents of each of these, often they <code>source</code> extra scripts.</p> <p>3. Put a unique variable, alias and function in each of those files.</p> <p>4. Try several different ways to obtain a shell (su, su -, ssh, tmux, gnome-terminal, Ctrl-alt-F1, ...) and verify which of your custom variables, aliases and function are present in your environment.</p> <p>5. Do you also know the order in which they are executed?</p> <p>6. When an application depends on a setting in $HOME/.profile, does it matter whether $HOME/.bash_profile exists or not ?</p>"},{"location":"user_profiles/#solution-user-profiles","title":"solution: user profiles","text":"<p>1. Make a list of all the profile files on your system.</p> <pre><code>ls -a ~ ; ls -l /etc/pro* /etc/bash*\n</code></pre> <p>2. Read the contents of each of these, often they <code>source</code> extra scripts.</p> <p>3. Put a unique variable, alias and function in each of those files.</p> <p>4. Try several different ways to obtain a shell (su, su -, ssh, tmux, gnome-terminal, Ctrl-alt-F1, ...) and verify which of your custom variables, aliases and function are present in your environment.</p> <p>5. Do you also know the order in which they are executed?</p> <pre><code>same name aliases, functions and variables will overwrite each other\n</code></pre> <p>6. When an application depends on a setting in $HOME/.profile, does it matter whether $HOME/.bash_profile exists or not ?</p> <pre><code>Yes it does matter. (man bash /INVOCATION)\n</code></pre>"},{"location":"users/","title":"introduction to users","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This little chapter will teach you how to identify your user account on a Unix computer using commands like <code>who am i</code>, <code>id</code>, and more.</p> <p>In a second part you will learn how to become another user with the <code>su</code> command.</p> <p>And you will learn how to run a program as another user with <code>sudo</code>.</p>"},{"location":"users/#whoami","title":"whoami","text":"<p>The <code>whoami</code> command tells you your username.</p> <pre><code>[paul@centos7 ~]$ whoami\npaul\n[paul@centos7 ~]$\n</code></pre>"},{"location":"users/#who","title":"who","text":"<p>The <code>who</code> command will give you information about who is logged on the system.</p> <pre><code>[paul@centos7 ~]$ who\nroot     pts/0        2014-10-10 23:07 (10.104.33.101)\npaul     pts/1        2014-10-10 23:30 (10.104.33.101)\nlaura    pts/2        2014-10-10 23:34 (10.104.33.96)\ntania    pts/3        2014-10-10 23:39 (10.104.33.91)\n[paul@centos7 ~]$\n</code></pre>"},{"location":"users/#who-am-i","title":"who am i","text":"<p>With <code>who am i</code> the <code>who</code> command will display only the line pointing to your current session.</p> <pre><code>[paul@centos7 ~]$ who am i\npaul     pts/1        2014-10-10 23:30 (10.104.33.101)\n[paul@centos7 ~]$\n</code></pre>"},{"location":"users/#w","title":"w","text":"<p>The <code>w</code> command shows you who is logged on and what they are doing.</p> <pre><code>[paul@centos7 ~]$ w\n 23:34:07 up 31 min,  2 users,  load average: 0.00, 0.01, 0.02\nUSER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0     23:07   15.00s  0.01s  0.01s top\npaul     pts/1     23:30    7.00s  0.00s  0.00s w\n[paul@centos7 ~]$\n</code></pre>"},{"location":"users/#id","title":"id","text":"<p>The <code>id</code> command will give you your user id, primary group id, and a list of the groups that you belong to.</p> <pre><code>paul@debian9:~$ id\nuid=1000(paul) gid=1000(paul) groups=1000(paul)\n</code></pre> <p>On RHEL/CentOS you will also get <code>SELinux</code> context information with this command.</p> <pre><code>[root@centos7 ~]# id\nuid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r\\\n:unconfined_t:s0-s0:c0.c1023\n</code></pre>"},{"location":"users/#su-to-another-user","title":"su to another user","text":"<p>The <code>su</code> command allows a user to run a shell as another user.</p> <pre><code>laura@debian9:~$ su tania\nPassword:\ntania@debian9:/home/laura$\n</code></pre>"},{"location":"users/#su-to-root","title":"su to root","text":"<p>Yes you can also <code>su</code> to become <code>root</code>, when you know the <code>root password</code>.</p> <pre><code>laura@debian9:~$ su root\nPassword:\nroot@debian9:/home/laura#\n</code></pre>"},{"location":"users/#su-as-root","title":"su as root","text":"<p>You need to know the password of the user you want to substitute to, unless your are logged in as <code>root</code>. The <code>root</code> user can become any existing user without knowing that user\\'s password.</p> <pre><code>root@debian9:~# id\nuid=0(root) gid=0(root) groups=0(root)\nroot@debian9:~# su - valentina\nvalentina@debian9:~$\n</code></pre>"},{"location":"users/#su-username","title":"su - $username","text":"<p>By default, the <code>su</code> command maintains the same shell environment. To become another user and also get the target user\\'s environment, issue the <code>su -</code> command followed by the target username.</p> <pre><code>root@debian9:~# su laura\nlaura@debian9:/root$ exit\nexit\nroot@debian9:~# su - laura\nlaura@debian9:~$ pwd\n/home/laura\n</code></pre>"},{"location":"users/#su-","title":"su -","text":"<p>When no username is provided to <code>su</code> or <code>su -</code>, the command will assume <code>root</code> is the target.</p> <pre><code>tania@debian9:~$ su -\nPassword:\nroot@debian9:~#\n</code></pre>"},{"location":"users/#run-a-program-as-another-user","title":"run a program as another user","text":"<p>The sudo program allows a user to start a program with the credentials of another user. Before this works, the system administrator has to set up the <code>/etc/sudoers</code> file. This can be useful to delegate administrative tasks to another user (without giving the root password).</p> <p>The screenshot below shows the usage of <code>sudo</code>. User <code>paul</code> received the right to run <code>useradd</code> with the credentials of <code>root</code>. This allows <code>paul</code> to create new users on the system without becoming <code>root</code> and without knowing the <code>root password</code>.</p> <p>First the command fails for <code>paul</code>.</p> <pre><code>paul@debian9:~$ /usr/sbin/useradd -m valentina\nuseradd: Permission denied.\nuseradd: cannot lock /etc/passwd; try again later.\n</code></pre> <p>But with <code>sudo</code> it works.</p> <pre><code>paul@debian9:~$ sudo /usr/sbin/useradd -m valentina\n[sudo] password for paul:\npaul@debian9:~$\n</code></pre>"},{"location":"users/#visudo","title":"visudo","text":"<p>Check the man page of <code>visudo</code> before playing with the <code>/etc/sudoers</code> file. Editing the <code>sudoers</code> is out of scope for this fundamentals book.</p> <pre><code>paul@rhel610:~$ apropos visudo\nvisudo               (8)  - edit the sudoers file\npaul@rhel610:~$\n</code></pre>"},{"location":"users/#sudo-su-","title":"sudo su -","text":"<p>On some Linux systems like Ubuntu and Xubuntu, the <code>root</code> user does not have a password set. This means that it is not possible to login as <code>root</code> (extra security). To perform tasks as <code>root</code>, the first user is given all <code>sudo rights</code> via the <code>/etc/sudoers</code>. In fact all users that are members of the admin group can use sudo to run all commands as root.</p> <pre><code>root@laika:~# grep admin /etc/sudoers \n# Members of the admin group may gain root privileges\n%admin ALL=(ALL) ALL\n</code></pre> <p>The end result of this is that the user can type <code>sudo su -</code> and become root without having to enter the root password. The sudo command does require you to enter your own password. Thus the password prompt in the screenshot below is for sudo, not for su.</p> <pre><code>paul@laika:~$ sudo su -\nPassword:\nroot@laika:~#\n</code></pre>"},{"location":"users/#sudo-logging","title":"sudo logging","text":"<p>Using <code>sudo</code> without authorization will result in a severe warning:</p> <pre><code>paul@rhel610:~$ sudo su -\n\nWe trust you have received the usual lecture from the local System\nAdministrator. It usually boils down to these three things:\n\n    #1) Respect the privacy of others.\n    #2) Think before you type.\n    #3) With great power comes great responsibility.\n\n[sudo] password for paul:\npaul is not in the sudoers file.  This incident will be reported.\npaul@rhel610:~$\n</code></pre> <p>The root user can see this in the <code>/var/log/secure</code> on Red Hat and in <code>/var/log/auth.log</code> on Debian).</p> <pre><code>root@rhel610:~# tail /var/log/secure | grep sudo | tr -s ' '\nApr 13 16:03:42 rhel65 sudo: paul : user NOT in sudoers ; TTY=pts/0 ; PWD=\\\n/home/paul ; USER=root ; COMMAND=/bin/su -\nroot@rhel610:~#\n</code></pre>"},{"location":"users/#practice-introduction-to-users","title":"practice: introduction to users","text":"<p>1. Run a command that displays only your currently logged on user name.</p> <p>2. Display a list of all logged on users.</p> <p>3. Display a list of all logged on users including the command they are running at this very moment.</p> <p>4. Display your user name and your unique user identification (userid).</p> <p>5. Use <code>su</code> to switch to another user account (unless you are root, you will need the password of the other account). And get back to the previous account.</p> <p>6. Now use <code>su -</code> to switch to another user and notice the difference.</p> <p>Note that <code>su -</code> gets you into the home directory of <code>Tania</code>.</p> <p>7. Try to create a new user account (when using your normal user account). this should fail. (Details on adding user accounts are explained in the next chapter.)</p> <p>8. Now try the same, but with <code>sudo</code> before your command.</p>"},{"location":"users/#solution-introduction-to-users","title":"solution: introduction to users","text":"<p>1. Run a command that displays only your currently logged on user name.</p> <pre><code>laura@debian9:~$ whoami\nlaura\nlaura@debian9:~$ echo $USER\nlaura\n</code></pre> <p>2. Display a list of all logged on users.</p> <pre><code>laura@debian9:~$ who\nlaura     pts/0        2014-10-13 07:22 (10.104.33.101)\nlaura@debian9:~$\n</code></pre> <p>3. Display a list of all logged on users including the command they are running at this very moment.</p> <pre><code>laura@debian9:~$ w\n 07:47:02 up 16 min,  2 users,  load average: 0.00, 0.00, 0.00\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    10.104.33.101    07:30    6.00s  0.04s  0.00s w\nroot     pts/1    10.104.33.101    07:46    6.00s  0.01s  0.00s sleep 42\nlaura@debian9:~$\n</code></pre> <p>4. Display your user name and your unique user identification (userid).</p> <pre><code>laura@debian9:~$ id\nuid=1005(laura) gid=1007(laura) groups=1007(laura)\nlaura@debian9:~$\n</code></pre> <p>5. Use <code>su</code> to switch to another user account (unless you are root, you will need the password of the other account). And get back to the previous account.</p> <pre><code>laura@debian9:~$ su tania\nPassword:\ntania@debian9:/home/laura$ id\nuid=1006(tania) gid=1008(tania) groups=1008(tania)\ntania@debian9:/home/laura$ exit\nlaura@debian9:~$\n</code></pre> <p>6. Now use <code>su -</code> to switch to another user and notice the difference.</p> <pre><code>laura@debian9:~$ su - tania\nPassword:\ntania@debian9:~$ pwd\n/home/tania\ntania@debian9:~$ logout\nlaura@debian9:~$\n</code></pre> <p>Note that <code>su -</code> gets you into the home directory of <code>Tania</code>.</p> <p>7. Try to create a new user account (when using your normal user account). this should fail. (Details on adding user accounts are explained in the next chapter.)</p> <pre><code>laura@debian9:~$ useradd valentina\n-su: useradd: command not found\nlaura@debian9:~$ /usr/sbin/useradd valentina\nuseradd: Permission denied.\nuseradd: cannot lock /etc/passwd; try again later.\n</code></pre> <p>It is possible that <code>useradd</code> is located in <code>/sbin/useradd</code> on your computer.</p> <p>8. Now try the same, but with <code>sudo</code> before your command.</p> <pre><code>laura@debian9:~$ sudo /usr/sbin/useradd valentina\n[sudo] password for laura:\nlaura is not in the sudoers file.  This incident will be reported.\nlaura@debian9:~$\n</code></pre> <p>Notice that <code>laura</code> has no permission to use the <code>sudo</code> on this system.</p>"},{"location":"virtualbox/","title":"getting Linux at home","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/)</p> <p><code>This chapter shows a Ubuntu install in Virtualbox. Consider it legacy and use CentOS7 or Debian8 instead (each have their own chapter now).</code></p> <p>This book assumes you have access to a working Linux computer. Most companies have one or more Linux servers, if you have already logged on to it, then you \\'re all set (skip this chapter and go to the next).</p> <p>Another option is to insert a Ubuntu Linux CD in a computer with (or without) Microsoft Windows and follow the installation. Ubuntu will resize (or create) partitions and setup a menu at boot time to choose Windows or Linux.</p> <p>If you do not have access to a Linux computer at the moment, and if you are unable or unsure about installing Linux on your computer, then this chapter proposes a third option: installing Linux in a virtual machine.</p> <p>Installation in a virtual machine (provided by <code>Virtualbox</code>) is easy and safe. Even when you make mistakes and crash everything on the virtual Linux machine, then nothing on the real computer is touched.</p> <p>This chapter gives easy steps and screenshots to get a working Ubuntu server in a Virtualbox virtual machine. The steps are very similar to installing Fedora or CentOS or even Debian, and if you like you can also use VMWare instead of Virtualbox.</p>"},{"location":"virtualbox/#download-a-linux-cd-image","title":"download a Linux CD image","text":"<p>Start by downloading a Linux CD image (an .ISO file) from the distribution of your choice from the Internet. Take care selecting the correct cpu architecture of your computer; choose <code>i386</code> if unsure. Choosing the wrong cpu type (like x86_64 when you have an old Pentium) will almost immediately fail to boot the CD.</p> <p></p>"},{"location":"virtualbox/#download-virtualbox","title":"download Virtualbox","text":"<p>Step two (when the .ISO file has finished downloading) is to download Virtualbox. If you are currently running Microsoft Windows, then download and install Virtualbox for Windows!</p> <p></p>"},{"location":"virtualbox/#create-a-virtual-machine","title":"create a virtual machine","text":"<p>Now start Virtualbox. Contrary to the screenshot below, your left pane should be empty.</p> <p></p> <p>Click <code>New</code> to create a new virtual machine. We will walk together through the wizard. The screenshots below are taken on Mac OSX; they will be slightly different if you are running Microsoft Windows.</p> <p></p> <p>Name your virtual machine (and maybe select 32-bit or 64-bit).</p> <p></p> <p>Give the virtual machine some memory (512MB if you have 2GB or more, otherwise select 256MB).</p> <p></p> <p>Select to create a new disk (remember, this will be a virtual disk).</p> <p></p> <p>If you get the question below, choose vdi.</p> <p></p> <p>Choose <code>dynamically allocated</code> (fixed size is only useful in production or on really old, slow hardware).</p> <p></p> <p>Choose between 10GB and 16GB as the disk size.</p> <p></p> <p>Click <code>create</code> to create the virtual disk.</p> <p></p> <p>Click <code>create</code> to create the virtual machine.</p> <p></p>"},{"location":"virtualbox/#attach-the-cd-image","title":"attach the CD image","text":"<p>Before we start the virtual computer, let us take a look at some settings (click <code>Settings</code>).</p> <p></p> <p>Do not worry if your screen looks different, just find the button named <code>storage</code>.</p> <p></p> <p>Remember the .ISO file you downloaded? Connect this .ISO file to this virtual machine by clicking on the CD icon next to <code>Empty</code>.</p> <p></p> <p>Now click on the other CD icon and attach your ISO file to this virtual CD drive.</p> <p></p> <p>Verify that your download is accepted. If Virtualbox complains at this point, then you probably did not finish the download of the CD (try downloading it again).</p> <p></p> <p>It could be useful to set the network adapter to bridge instead of NAT. Bridged usually will connect your virtual computer to the Internet.</p> <p></p>"},{"location":"virtualbox/#install-linux","title":"install Linux","text":"<p>The virtual machine is now ready to start. When given a choice at boot, select <code>install</code> and follow the instructions on the screen. When the installation is finished, you can log on to the machine and start practising Linux!</p>"},{"location":"working_with_directories/","title":"working with directories","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>This module is a brief overview of the most common commands to work with directories: <code>pwd</code>, <code>cd</code>, <code>ls</code>, <code>mkdir</code> and <code>rmdir</code>. These commands are available on any Linux (or Unix) system.</p> <p>This module also discusses <code>absolute</code> and <code>relative paths</code> and <code>path completion</code> in the <code>bash</code> shell.</p>"},{"location":"working_with_directories/#pwd","title":"pwd","text":"<p>The <code>you are here</code> sign can be displayed with the <code>pwd</code> command (Print Working Directory). Go ahead, try it: Open a command line interface (also called a terminal, console or xterm) and type <code>pwd</code>. The tool displays your <code>current directory</code>.</p> <pre><code>paul@debian8:~$ pwd\n/home/paul\n</code></pre>"},{"location":"working_with_directories/#cd","title":"cd","text":"<p>You can change your current directory with the <code>cd</code> command (Change Directory).</p> <pre><code>paul@debian8$ cd /etc\npaul@debian8$ pwd\n/etc\npaul@debian8$ cd /bin\npaul@debian8$ pwd\n/bin\npaul@debian8$ cd /home/paul/\npaul@debian8$ pwd\n/home/paul\n</code></pre>"},{"location":"working_with_directories/#cd_1","title":"cd \\~","text":"<p>The <code>cd</code> is also a shortcut to get back into your home directory. Just typing <code>cd</code> without a target directory, will put you in your home directory. Typing <code>cd ~</code> has the same effect.</p> <pre><code>paul@debian8$ cd /etc\npaul@debian8$ pwd\n/etc\npaul@debian8$ cd\npaul@debian8$ pwd\n/home/paul\npaul@debian8$ cd ~\npaul@debian8$ pwd\n/home/paul\n</code></pre>"},{"location":"working_with_directories/#cd_2","title":"cd ..","text":"<p>To go to the <code>parent directory</code> (the one just above your current directory in the directory tree), type <code>cd ..</code> .</p> <pre><code>paul@debian8$ pwd\n/usr/share/games\npaul@debian8$ cd ..\npaul@debian8$ pwd\n/usr/share\n</code></pre> <p>To stay in the current directory, type <code>cd .</code> ;-) We will see useful use of the <code>.</code> character representing the current directory later.</p>"},{"location":"working_with_directories/#cd-","title":"cd -","text":"<p>Another useful shortcut with <code>cd</code> is to just type <code>cd -</code> to go to the previous directory.</p> <pre><code>paul@debian8$ pwd\n/home/paul\npaul@debian8$ cd /etc\npaul@debian8$ pwd\n/etc\npaul@debian8$ cd -\n/home/paul\npaul@debian8$ cd -\n/etc\n</code></pre>"},{"location":"working_with_directories/#absolute-and-relative-paths","title":"absolute and relative paths","text":"<p>You should be aware of <code>absolute and relative paths</code> in the file tree. When you type a path starting with a <code>slash (/)</code>, then the <code>root</code> of the file tree is assumed. If you don\\'t start your path with a slash, then the current directory is the assumed starting point.</p> <p>The screenshot below first shows the current directory <code>/home/paul</code>. From within this directory, you have to type <code>cd /home</code> instead of <code>cd home</code> to go to the <code>/home</code> directory.</p> <pre><code>paul@debian8$ pwd\n/home/paul\npaul@debian8$ cd home\nbash: cd: home: No such file or directory\npaul@debian8$ cd /home\npaul@debian8$ pwd\n/home\n</code></pre> <p>When inside <code>/home</code>, you have to type <code>cd paul</code> instead of <code>cd /paul</code> to enter the subdirectory <code>paul</code> of the current directory <code>/home</code>.</p> <pre><code>paul@debian8$ pwd\n/home\npaul@debian8$ cd /paul\nbash: cd: /paul: No such file or directory\npaul@debian8$ cd paul\npaul@debian8$ pwd\n/home/paul\n</code></pre> <p>In case your current directory is the <code>root directory /</code>, then both <code>cd /home</code> and <code>cd home</code> will get you in the <code>/home</code> directory.</p> <pre><code>paul@debian8$ pwd\n/\npaul@debian8$ cd home\npaul@debian8$ pwd\n/home\npaul@debian8$ cd /\npaul@debian8$ cd /home \npaul@debian8$ pwd\n/home\n</code></pre> <p>This was the last screenshot with <code>pwd</code> statements. From now on, the current directory will often be displayed in the prompt. Later in this book we will explain how the shell variable <code>$PS1</code> can be configured to show this.</p>"},{"location":"working_with_directories/#path-completion","title":"path completion","text":"<p>The <code>tab key</code> can help you in typing a path without errors. Typing <code>cd /et</code> followed by the <code>tab key</code> will expand the command line to <code>cd /etc/</code>. When typing <code>cd /Et</code> followed by the <code>tab key</code>, nothing will happen because you typed the wrong <code>path</code> (upper case E).</p> <p>You will need fewer key strokes when using the <code>tab key</code>, and you will be sure your typed <code>path</code> is correct!</p>"},{"location":"working_with_directories/#ls","title":"ls","text":"<p>You can list the contents of a directory with <code>ls</code>.</p> <pre><code>paul@debian8:~$ ls\nallfiles.txt  dmesg.txt  services   stuff  summer.txt\npaul@debian8:~$\n</code></pre>"},{"location":"working_with_directories/#ls-a","title":"ls -a","text":"<p>A frequently used option with ls is <code>-a</code> to show all files. Showing all files means including the <code>hidden files</code>. When a file name on a Linux file system starts with a dot, it is considered a <code>hidden file</code> and it doesn\\'t show up in regular file listings.</p> <pre><code>paul@debian8:~$ ls\nallfiles.txt  dmesg.txt  services  stuff  summer.txt\npaul@debian8:~$ ls -a\n.   allfiles.txt   .bash_profile  dmesg.txt   .lesshst  stuff\n..  .bash_history  .bashrc        services    .ssh      summer.txt \npaul@debian8:~$\n</code></pre>"},{"location":"working_with_directories/#ls-l","title":"ls -l","text":"<p>Many times you will be using options with <code>ls</code> to display the contents of the directory in different formats or to display different parts of the directory. Typing just <code>ls</code> gives you a list of files in the directory. Typing <code>ls -l</code> (that is a letter L, not the number 1) gives you a long listing.</p> <pre><code>paul@debian8:~$ ls -l\ntotal 17296\n-rw-r--r-- 1 paul paul 17584442 Sep 17 00:03 allfiles.txt\n-rw-r--r-- 1 paul paul    96650 Sep 17 00:03 dmesg.txt\n-rw-r--r-- 1 paul paul    19558 Sep 17 00:04 services\ndrwxr-xr-x 2 paul paul     4096 Sep 17 00:04 stuff\n-rw-r--r-- 1 paul paul        0 Sep 17 00:04 summer.txt\n</code></pre>"},{"location":"working_with_directories/#ls-lh","title":"ls -lh","text":"<p>Another frequently used ls option is <code>-h</code>. It shows the numbers (file sizes) in a more human readable format. Also shown below is some variation in the way you can give the options to <code>ls</code>. We will explain the details of the output later in this book.</p> <p>Note that we use the letter L as an option in this screenshot, not the number 1.</p> <pre><code>paul@debian8:~$ ls -l -h\ntotal 17M\n-rw-r--r-- 1 paul paul  17M Sep 17 00:03 allfiles.txt\n-rw-r--r-- 1 paul paul  95K Sep 17 00:03 dmesg.txt\n-rw-r--r-- 1 paul paul  20K Sep 17 00:04 services\ndrwxr-xr-x 2 paul paul 4.0K Sep 17 00:04 stuff\n-rw-r--r-- 1 paul paul    0 Sep 17 00:04 summer.txt\npaul@debian8:~$ ls -lh\ntotal 17M\n-rw-r--r-- 1 paul paul  17M Sep 17 00:03 allfiles.txt\n-rw-r--r-- 1 paul paul  95K Sep 17 00:03 dmesg.txt\n-rw-r--r-- 1 paul paul  20K Sep 17 00:04 services\ndrwxr-xr-x 2 paul paul 4.0K Sep 17 00:04 stuff\n-rw-r--r-- 1 paul paul    0 Sep 17 00:04 summer.txt\npaul@debian8:~$ ls -hl\ntotal 17M\n-rw-r--r-- 1 paul paul  17M Sep 17 00:03 allfiles.txt\n-rw-r--r-- 1 paul paul  95K Sep 17 00:03 dmesg.txt\n-rw-r--r-- 1 paul paul  20K Sep 17 00:04 services\ndrwxr-xr-x 2 paul paul 4.0K Sep 17 00:04 stuff\n-rw-r--r-- 1 paul paul    0 Sep 17 00:04 summer.txt\npaul@debian8:~$ ls -h -l\ntotal 17M\n-rw-r--r-- 1 paul paul  17M Sep 17 00:03 allfiles.txt\n-rw-r--r-- 1 paul paul  95K Sep 17 00:03 dmesg.txt\n-rw-r--r-- 1 paul paul  20K Sep 17 00:04 services\ndrwxr-xr-x 2 paul paul 4.0K Sep 17 00:04 stuff\n-rw-r--r-- 1 paul paul    0 Sep 17 00:04 summer.txt\npaul@debian8:~$\n</code></pre>"},{"location":"working_with_directories/#mkdir","title":"mkdir","text":"<p>Walking around the Unix file tree is fun, but it is even more fun to create your own directories with <code>mkdir</code>. You have to give at least one parameter to <code>mkdir</code>, the name of the new directory to be created. Think before you type a leading <code>/</code> .</p> <pre><code>paul@debian8:~$ mkdir mydir\npaul@debian8:~$ cd mydir\npaul@debian8:~/mydir$ ls -al\ntotal 8\ndrwxr-xr-x  2 paul paul 4096 Sep 17 00:07 .\ndrwxr-xr-x 48 paul paul 4096 Sep 17 00:07 ..\npaul@debian8:~/mydir$ mkdir stuff\npaul@debian8:~/mydir$ mkdir otherstuff\npaul@debian8:~/mydir$ ls -l\ntotal 8\ndrwxr-xr-x 2 paul paul 4096 Sep 17 00:08 otherstuff\ndrwxr-xr-x 2 paul paul 4096 Sep 17 00:08 stuff\npaul@debian8:~/mydir$\n</code></pre>"},{"location":"working_with_directories/#mkdir-p","title":"mkdir -p","text":"<p>The following command will fail, because the <code>parent directory</code> of <code>threedirsdeep</code> does not exist.</p> <pre><code>paul@debian8:~$ mkdir mydir2/mysubdir2/threedirsdeep\nmkdir: cannot create directory \u2018mydir2/mysubdir2/threedirsdeep\u2019: No such fi\\\nle or directory\n</code></pre> <p>When given the option <code>-p</code>, then <code>mkdir</code> will create <code>parent directories</code> as needed.</p> <pre><code>paul@debian8:~$ mkdir -p mydir2/mysubdir2/threedirsdeep\npaul@debian8:~$ cd mydir2\npaul@debian8:~/mydir2$ ls -l\ntotal 4\ndrwxr-xr-x 3 paul paul 4096 Sep 17 00:11 mysubdir2\npaul@debian8:~/mydir2$ cd mysubdir2\npaul@debian8:~/mydir2/mysubdir2$ ls -l\ntotal 4\ndrwxr-xr-x 2 paul paul 4096 Sep 17 00:11 threedirsdeep\npaul@debian8:~/mydir2/mysubdir2$ cd threedirsdeep/\npaul@debian8:~/mydir2/mysubdir2/threedirsdeep$ pwd\n/home/paul/mydir2/mysubdir2/threedirsdeep\n</code></pre>"},{"location":"working_with_directories/#rmdir","title":"rmdir","text":"<p>When a directory is empty, you can use <code>rmdir</code> to remove the directory.</p> <pre><code>paul@debian8:~/mydir$ ls -l\ntotal 8\ndrwxr-xr-x 2 paul paul 4096 Sep 17 00:08 otherstuff\ndrwxr-xr-x 2 paul paul 4096 Sep 17 00:08 stuff\npaul@debian8:~/mydir$ rmdir otherstuff\npaul@debian8:~/mydir$ cd ..\npaul@debian8:~$ rmdir mydir\nrmdir: failed to remove \u2018mydir\u2019: Directory not empty\npaul@debian8:~$ rmdir mydir/stuff\npaul@debian8:~$ rmdir mydir\npaul@debian8:~$\n</code></pre>"},{"location":"working_with_directories/#rmdir-p","title":"rmdir -p","text":"<p>And similar to the <code>mkdir -p</code> option, you can also use <code>rmdir</code> to recursively remove directories.</p> <pre><code>paul@debian8:~$ mkdir -p test42/subdir\npaul@debian8:~$ rmdir -p test42/subdir\npaul@debian8:~$\n</code></pre>"},{"location":"working_with_directories/#practice-working-with-directories","title":"practice: working with directories","text":"<p>1. Display your current directory.</p> <p>2. Change to the /etc directory.</p> <p>3. Now change to your home directory using only three key presses.</p> <p>4. Change to the /boot/grub directory using only eleven key presses.</p> <p>5. Go to the parent directory of the current directory.</p> <p>6. Go to the root directory.</p> <p>7. List the contents of the root directory.</p> <p>8. List a long listing of the root directory.</p> <p>9. Stay where you are, and list the contents of /etc.</p> <p>10. Stay where you are, and list the contents of /bin and /sbin.</p> <p>11. Stay where you are, and list the contents of \\~.</p> <p>12. List all the files (including hidden files) in your home directory.</p> <p>13. List the files in /boot in a human readable format.</p> <p>14. Create a directory testdir in your home directory.</p> <p>15. Change to the /etc directory, stay here and create a directory newdir in your home directory.</p> <p>16. Create in one command the directories \\~/dir1/dir2/dir3 (dir3 is a subdirectory from dir2, and dir2 is a subdirectory from dir1 ).</p> <p>17. Remove the directory testdir.</p> <p>18. If time permits (or if you are waiting for other students to finish this practice), use and understand <code>pushd</code> and <code>popd</code>. Use the man page of <code>bash</code> to find information about these commands.</p>"},{"location":"working_with_directories/#solution-working-with-directories","title":"solution: working with directories","text":"<p>1. Display your current directory.</p> <pre><code>pwd\n</code></pre> <p>2. Change to the /etc directory.</p> <pre><code>cd /etc\n</code></pre> <p>3. Now change to your home directory using only three key presses.</p> <pre><code>cd (and the enter key)\n</code></pre> <p>4. Change to the /boot/grub directory using only eleven key presses.</p> <pre><code>cd /boot/grub (use the tab key)\n</code></pre> <p>5. Go to the parent directory of the current directory.</p> <pre><code>cd .. (with space between cd and ..)\n</code></pre> <p>6. Go to the root directory.</p> <pre><code>cd /\n</code></pre> <p>7. List the contents of the root directory.</p> <pre><code>ls\n</code></pre> <p>8. List a long listing of the root directory.</p> <pre><code>ls -l\n</code></pre> <p>9. Stay where you are, and list the contents of /etc.</p> <pre><code>ls /etc\n</code></pre> <p>10. Stay where you are, and list the contents of /bin and /sbin.</p> <pre><code>ls /bin /sbin\n</code></pre> <p>11. Stay where you are, and list the contents of \\~.</p> <pre><code>ls ~\n</code></pre> <p>12. List all the files (including hidden files) in your home directory.</p> <pre><code>ls -al ~\n</code></pre> <p>13. List the files in /boot in a human readable format.</p> <pre><code>ls -lh /boot\n</code></pre> <p>14. Create a directory testdir in your home directory.</p> <pre><code>mkdir ~/testdir\n</code></pre> <p>15. Change to the /etc directory, stay here and create a directory newdir in your home directory.</p> <pre><code>cd /etc ; mkdir ~/newdir\n</code></pre> <p>16. Create in one command the directories \\~/dir1/dir2/dir3 (dir3 is a subdirectory from dir2, and dir2 is a subdirectory from dir1 ).</p> <pre><code>mkdir -p ~/dir1/dir2/dir3\n</code></pre> <p>17. Remove the directory testdir.</p> <pre><code>rmdir testdir\n</code></pre> <p>18. If time permits (or if you are waiting for other students to finish this practice), use and understand <code>pushd</code> and <code>popd</code>. Use the man page of <code>bash</code> to find information about these commands.</p> <pre><code>man bash           # opens the manual\n/pushd             # searches for pushd\nn                  # next (do this two/three times)\n</code></pre> <p>The Bash shell has two built-in commands called <code>pushd</code> and <code>popd</code>. Both commands work with a common stack of previous directories. Pushd adds a directory to the stack and changes to a new current directory, popd removes a directory from the stack and sets the current directory.</p> <pre><code>paul@debian10:/etc$ cd /bin\npaul@debian10:/bin$ pushd /lib\n/lib /bin\npaul@debian10:/lib$ pushd /proc\n/proc /lib /bin\npaul@debian10:/proc$ popd\n/lib /bin\npaul@debian10:/lib$ popd\n/bin\n</code></pre>"},{"location":"working_with_file_contents/","title":"working with file contents","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>In this chapter we will look at the contents of <code>text files</code> with <code>head, tail, cat, tac, more, less</code> and <code>strings</code>.</p> <p>We will also get a glimpse of the possibilities of tools like <code>cat</code> on the command line.</p>"},{"location":"working_with_file_contents/#head","title":"head","text":"<p>You can use <code>head</code> to display the first ten lines of a file.</p> <pre><code>paul@debian10~$ head /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nroot@debian10~#\n</code></pre> <p>The <code>head</code> command can also display the first <code>n</code> lines of a file.</p> <pre><code>paul@debian10~$ head -4 /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\npaul@debian10~$\n</code></pre> <p>And <code>head</code> can also display the first <code>n bytes</code>.</p> <pre><code>paul@debian10~$ head -c14 /etc/passwd\nroot:x:0:0:roopaul@debian10~$\n</code></pre>"},{"location":"working_with_file_contents/#tail","title":"tail","text":"<p>Similar to <code>head</code>, the <code>tail</code> command will display the last ten lines of a file.</p> <pre><code>paul@debian10~$ tail /etc/services\nvboxd           20012/udp\nbinkp           24554/tcp                       # binkp fidonet protocol\nasp             27374/tcp                       # Address Search Protocol\nasp             27374/udp\ncsync2          30865/tcp                       # cluster synchronization tool\ndircproxy       57000/tcp                       # Detachable IRC Proxy\ntfido           60177/tcp                       # fidonet EMSI over telnet\nfido            60179/tcp                       # fidonet EMSI over TCP\n\n# Local services\npaul@debian10~$\n</code></pre> <p>You can give <code>tail</code> the number of lines you want to see.</p> <pre><code>paul@debian10~$ tail -3 /etc/services\nfido            60179/tcp                       # fidonet EMSI over TCP\n\n# Local services\npaul@debian10~$\n</code></pre> <p>The <code>tail</code> command has other useful options, some of which we will use during this course.</p>"},{"location":"working_with_file_contents/#cat","title":"cat","text":"<p>The <code>cat</code> command is one of the most universal tools, yet all it does is copy <code>standard input</code> to <code>standard output</code>. In combination with the shell this can be very powerful and diverse. Some examples will give a glimpse into the possibilities. The first example is simple, you can use cat to display a file on the screen. If the file is longer than the screen, it will scroll to the end.</p> <pre><code>paul@debian8:~$ cat /etc/resolv.conf\ndomain linux-training.be\nsearch linux-training.be\nnameserver 192.168.1.42\n</code></pre>"},{"location":"working_with_file_contents/#concatenate","title":"concatenate","text":"<p><code>cat</code> is short for <code>concatenate</code>. One of the basic uses of <code>cat</code> is to concatenate files into a bigger (or complete) file.</p> <pre><code>paul@debian8:~$ echo one &gt;part1\npaul@debian8:~$ echo two &gt;part2\npaul@debian8:~$ echo three &gt;part3\npaul@debian8:~$ cat part1\none\npaul@debian8:~$ cat part2\ntwo\npaul@debian8:~$ cat part3\nthree\npaul@debian8:~$ cat part1 part2 part3\none\ntwo\nthree\npaul@debian8:~$ cat part1 part2 part3 &gt;all\npaul@debian8:~$ cat all\none\ntwo\nthree\npaul@debian8:~$\n</code></pre>"},{"location":"working_with_file_contents/#create-files","title":"create files","text":"<p>You can use <code>cat</code> to create flat text files. Type the <code>cat &gt; winter.txt</code> command as shown in the screenshot below. Then type one or more lines, finishing each line with the enter key. After the last line, type and hold the Control (Ctrl) key and press d.</p> <pre><code>paul@debian8:~$ cat &gt; winter.txt\nIt is very cold today!\npaul@debian8:~$ cat winter.txt\nIt is very cold today!\npaul@debian8:~$\n</code></pre> <p>The <code>Ctrl d</code> key combination will send an <code>EOF</code> (End of File) to the running process ending the <code>cat</code> command.</p>"},{"location":"working_with_file_contents/#custom-end-marker","title":"custom end marker","text":"<p>You can choose an end marker for <code>cat</code> with <code>&lt;&lt;</code> as is shown in this screenshot. This construction is called a <code>here directive</code> and will end the <code>cat</code> command.</p> <pre><code>paul@debian8:~$ cat &gt; hot.txt &lt;&lt;stop\n&gt; It is hot today!\n&gt; Yes it is summer.\n&gt; stop\npaul@debian8:~$ cat hot.txt\nIt is hot today!\nYes it is summer.\npaul@debian8:~$\n</code></pre>"},{"location":"working_with_file_contents/#copy-files","title":"copy files","text":"<p>In the third example you will see that cat can be used to copy files. We will explain in detail what happens here in the bash shell chapter.</p> <pre><code>paul@debian8:~$ cat winter.txt\nIt is very cold today!\npaul@debian8:~$ cat winter.txt &gt; cold.txt\npaul@debian8:~$ cat cold.txt \nIt is very cold today!\npaul@debian8:~$\n</code></pre>"},{"location":"working_with_file_contents/#tac","title":"tac","text":"<p>Just one example will show you the purpose of <code>tac</code> (cat backwards).</p> <pre><code>paul@debian8:~$ cat count\none\ntwo\nthree\nfour\npaul@debian8:~$ tac count \nfour\nthree\ntwo\none\n</code></pre>"},{"location":"working_with_file_contents/#more-and-less","title":"more and less","text":"<p>The <code>more</code> command is useful for displaying files that take up more than one screen. More will allow you to see the contents of the file page by page. Use the space bar to see the next page, or <code>q</code> to quit. Some people prefer the <code>less</code> command to <code>more</code>.</p>"},{"location":"working_with_file_contents/#strings","title":"strings","text":"<p>With the <code>strings</code> command you can display readable ascii strings found in (binary) files. This example locates the <code>ls</code> binary then displays readable strings in the binary file (output is truncated).</p> <pre><code>paul@laika:~$ which ls\n/bin/ls\npaul@laika:~$ strings /bin/ls\n/lib/ld-linux.so.2\nlibrt.so.1\n__gmon_start__\n_Jv_RegisterClasses\nclock_gettime\nlibacl.so.1\n...\n</code></pre>"},{"location":"working_with_file_contents/#practice-file-contents","title":"practice: file contents","text":"<p>1. Display the first 12 lines of <code>/etc/services</code>.</p> <p>2. Display the last line of <code>/etc/passwd</code>.</p> <p>3. Use cat to create a file named <code>count.txt</code> that looks like this:</p> <pre><code>One\nTwo\nThree\nFour\nFive\n</code></pre> <p>4. Use <code>cp</code> to make a backup of this file to <code>cnt.txt</code>.</p> <p>5. Use <code>cat</code> to make a backup of this file to <code>catcnt.txt</code>.</p> <p>6. Display <code>catcnt.txt</code>, but with all lines in reverse order (the last line first).</p> <p>7. Use more to display <code>/etc/services</code>.</p> <p>8. Display the readable character strings from the <code>/usr/bin/passwd</code> command.</p> <p>9. Use <code>ls</code> to find the biggest file in <code>/etc</code>.</p> <p>10. Open two terminal windows (or tabs) and make sure you are in the same directory in both. Type <code>echo this is the first line &gt; tailing.txt</code> in the first terminal, then issue <code>tail -f tailing.txt</code> in the second terminal. Now go back to the first terminal and type <code>echo This is another line &gt;&gt; tailing.txt</code> (note the double &gt;&gt;), verify that the <code>tail -f</code> in the second terminal shows both lines. Stop the <code>tail -f</code> with <code>Ctrl-C</code>.</p> <p>11. Use <code>cat</code> to create a file named <code>tailing.txt</code> that contains the contents of <code>tailing.txt</code> followed by the contents of <code>/etc/passwd</code>.</p> <p>12. Use <code>cat</code> to create a file named <code>tailing.txt</code> that contains the contents of <code>tailing.txt</code> preceded by the contents of <code>/etc/passwd</code>.</p>"},{"location":"working_with_file_contents/#solution-file-contents","title":"solution: file contents","text":"<p>1. Display the first 12 lines of <code>/etc/services</code>.</p> <pre><code>head -12 /etc/services\n</code></pre> <p>2. Display the last line of <code>/etc/passwd</code>.</p> <pre><code>tail -1 /etc/passwd\n</code></pre> <p>3. Use cat to create a file named <code>count.txt</code> that looks like this:</p> <pre><code>cat &gt; count.txt\nOne\nTwo\nThree\nFour\nFive (followed by Ctrl-d)\n</code></pre> <p>4. Use <code>cp</code> to make a backup of this file to <code>cnt.txt</code>.</p> <pre><code>cp count.txt cnt.txt\n</code></pre> <p>5. Use <code>cat</code> to make a backup of this file to <code>catcnt.txt</code>.</p> <pre><code>cat count.txt &gt; catcnt.txt\n</code></pre> <p>6. Display <code>catcnt.txt</code>, but with all lines in reverse order (the last line first).</p> <pre><code>tac catcnt.txt\n</code></pre> <p>7. Use more to display <code>/etc/services</code>.</p> <pre><code>more /etc/services\n</code></pre> <p>8. Display the readable character strings from the <code>/usr/bin/passwd</code> command.</p> <pre><code>strings /usr/bin/passwd\n</code></pre> <p>9. Use <code>ls</code> to find the biggest file in <code>/etc</code>.</p> <pre><code>ls -lrS /etc\n</code></pre> <p>10. Open two terminal windows (or tabs) and make sure you are in the same directory in both. Type <code>echo this is the first line &gt; tailing.txt</code> in the first terminal, then issue <code>tail -f tailing.txt</code> in the second terminal. Now go back to the first terminal and type <code>echo This is another line &gt;&gt; tailing.txt</code> (note the double &gt;&gt;), verify that the <code>tail -f</code> in the second terminal shows both lines. Stop the <code>tail -f</code> with <code>Ctrl-C</code>.</p> <p>11. Use <code>cat</code> to create a file named <code>tailing.txt</code> that contains the contents of <code>tailing.txt</code> followed by the contents of <code>/etc/passwd</code>.</p> <pre><code>cat /etc/passwd &gt;&gt; tailing.txt\n</code></pre> <p>12. Use <code>cat</code> to create a file named <code>tailing.txt</code> that contains the contents of <code>tailing.txt</code> preceded by the contents of <code>/etc/passwd</code>.</p> <pre><code>mv tailing.txt tmp.txt ; cat /etc/passwd tmp.txt &gt; tailing.txt\n</code></pre>"},{"location":"working_with_files/","title":"working with files","text":"<p>(Written by Paul Cobbaut, https://github.com/paulcobbaut/, with contributions by: Alex M. Schapelle, https://github.com/zero-pytagoras/)</p> <p>In this chapter we learn how to recognise, create, remove, copy and move files using commands like <code>file, touch, rm, cp, mv</code> and <code>rename</code>.</p>"},{"location":"working_with_files/#all-files-are-case-sensitive","title":"all files are case sensitive","text":"<p>Files on Linux (or any Unix) are <code>case sensitive</code>. This means that <code>FILE1</code> is different from <code>file1</code>, and <code>/etc/hosts</code> is different from <code>/etc/Hosts</code> (the latter one does not exist on a typical Linux computer).</p> <p>This screenshot shows the difference between two files, one with upper case <code>W</code>, the other with lower case <code>w</code>.</p> <pre><code>paul@laika:~/Linux$ ls\nwinter.txt  Winter.txt\npaul@laika:~/Linux$ cat winter.txt\nIt is cold.\npaul@laika:~/Linux$ cat Winter.txt\nIt is very cold!\n</code></pre>"},{"location":"working_with_files/#everything-is-a-file","title":"everything is a file","text":"<p>A <code>directory</code> is a special kind of <code>file</code>, but it is still a (case sensitive!) <code>file</code>. Each terminal window (for example <code>/dev/pts/4</code>), any hard disk or partition (for example <code>/dev/sdb1</code>) and any process are all represented somewhere in the <code>file system</code> as a <code>file</code>. It will become clear throughout this course that everything on Linux is a <code>file</code>.</p>"},{"location":"working_with_files/#file","title":"file","text":"<p>The <code>file</code> utility determines the file type. Linux does not use extensions to determine the file type. The command line does not care whether a file ends in .txt or .pdf. As a system administrator, you should use the <code>file</code> command to determine the file type. Here are some examples on a typical Linux system.</p> <pre><code>paul@laika:~$ file pic33.png\npic33.png: PNG image data, 3840 x 1200, 8-bit/color RGBA, non-interlaced\npaul@laika:~$ file /etc/passwd\n/etc/passwd: ASCII text\npaul@laika:~$ file HelloWorld.c\nHelloWorld.c: ASCII C program text\n</code></pre> <p>The file command uses a magic file that contains patterns to recognise file types. The magic file is located in <code>/usr/share/file/magic</code>. Type <code>man 5 magic</code> for more information.</p> <p>It is interesting to point out <code>file -s</code> for special files like those in <code>/dev</code> and <code>/proc</code>.</p> <pre><code>root@debian6~# file /dev/sda\n/dev/sda: block special\nroot@debian6~# file -s /dev/sda\n/dev/sda: x86 boot sector; partition 1: ID=0x83, active, starthead...\nroot@debian6~# file /proc/cpuinfo \n/proc/cpuinfo: empty\nroot@debian6~# file -s /proc/cpuinfo\n/proc/cpuinfo: ASCII C++ program text\n</code></pre>"},{"location":"working_with_files/#touch","title":"touch","text":""},{"location":"working_with_files/#create-an-empty-file","title":"create an empty file","text":"<p>One easy way to create an empty file is with <code>touch</code>. (We will see many other ways for creating files later in this book.)</p> <p>This screenshot starts with an empty directory, creates two files with <code>touch</code> and the lists those files.</p> <pre><code>paul@debian10:~$ ls -l\ntotal 0\npaul@debian10:~$ touch file42\npaul@debian10:~$ touch file33\npaul@debian10:~$ ls -l\ntotal 0\n-rw-r--r-- 1 paul paul 0 Oct 15 08:57 file33\n-rw-r--r-- 1 paul paul 0 Oct 15 08:56 file42\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#touch-t","title":"touch -t","text":"<p>The <code>touch</code> command can set some properties while creating empty files. Can you determine what is set by looking at the next screenshot? If not, check the manual for <code>touch</code>.</p> <pre><code>paul@debian10:~$ touch -t 200505050000 SinkoDeMayo\npaul@debian10:~$ touch -t 130207111630 BigBattle.txt\npaul@debian10:~$ ls -l\ntotal 0\n-rw-r--r-- 1 paul paul 0 Jul 11  1302 BigBattle.txt\n-rw-r--r-- 1 paul paul 0 Oct 15 08:57 file33\n-rw-r--r-- 1 paul paul 0 Oct 15 08:56 file42\n-rw-r--r-- 1 paul paul 0 May  5  2005 SinkoDeMayo\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#rm","title":"rm","text":""},{"location":"working_with_files/#remove-forever","title":"remove forever","text":"<p>When you no longer need a file, use <code>rm</code> to remove it. Unlike some graphical user interfaces, the command line in general does not have a <code>waste bin</code> or <code>trash can</code> to recover files. When you use <code>rm</code> to remove a file, the file is gone. Therefore, be careful when removing files!</p> <pre><code>paul@debian10:~$ ls\nBigBattle.txt  file33  file42  SinkoDeMayo\npaul@debian10:~$ rm BigBattle.txt\npaul@debian10:~$ ls\nfile33  file42  SinkoDeMayo\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#rm-i","title":"rm -i","text":"<p>To prevent yourself from accidentally removing a file, you can type <code>rm -i</code>.</p> <pre><code>paul@debian10:~$ ls\nfile33  file42  SinkoDeMayo\npaul@debian10:~$ rm -i file33\nrm: remove regular empty file `file33'? yes\npaul@debian10:~$ rm -i SinkoDeMayo\nrm: remove regular empty file `SinkoDeMayo'? n\npaul@debian10:~$ ls\nfile42  SinkoDeMayo\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#rm-rf","title":"rm -rf","text":"<p>By default, <code>rm -r</code> will not remove non-empty directories. However <code>rm</code> accepts several options that will allow you to remove any directory. The <code>rm -rf</code> statement is famous because it will erase anything (providing that you have the permissions to do so). When you are logged on as root, be very careful with <code>rm -rf</code> (the <code>f</code> means <code>force</code> and the <code>r</code> means <code>recursive</code>) since being root implies that permissions don\\'t apply to you. You can literally erase your entire file system by accident.</p> <pre><code>paul@debian10:~$ mkdir test\npaul@debian10:~$ rm test\nrm: cannot remove `test': Is a directory\npaul@debian10:~$ rm -rf test\npaul@debian10:~$ ls test\nls: cannot access test: No such file or directory\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#cp","title":"cp","text":""},{"location":"working_with_files/#copy-one-file","title":"copy one file","text":"<p>To copy a file, use <code>cp</code> with a source and a target argument.</p> <pre><code>paul@debian10:~$ ls\nfile42  SinkoDeMayo\npaul@debian10:~$ cp file42 file42.copy\npaul@debian10:~$ ls\nfile42  file42.copy  SinkoDeMayo\n</code></pre>"},{"location":"working_with_files/#copy-to-another-directory","title":"copy to another directory","text":"<p>If the target is a directory, then the source files are copied to that target directory.</p> <pre><code>paul@debian10:~$ mkdir dir42\npaul@debian10:~$ cp SinkoDeMayo dir42\npaul@debian10:~$ ls dir42/\nSinkoDeMayo\n</code></pre>"},{"location":"working_with_files/#cp-r","title":"cp -r","text":"<p>To copy complete directories, use <code>cp -r</code> (the <code>-r</code> option forces <code>recursive</code> copying of all files in all subdirectories).</p> <pre><code>paul@debian10:~$ ls\ndir42  file42  file42.copy  SinkoDeMayo\npaul@debian10:~$ cp -r dir42/ dir33\npaul@debian10:~$ ls\ndir33  dir42  file42  file42.copy  SinkoDeMayo\npaul@debian10:~$ ls dir33/\nSinkoDeMayo\n</code></pre>"},{"location":"working_with_files/#copy-multiple-files-to-directory","title":"copy multiple files to directory","text":"<p>You can also use cp to copy multiple files into a directory. In this case, the last argument (a.k.a. the target) must be a directory.</p> <pre><code>paul@debian10:~$ cp file42 file42.copy SinkoDeMayo dir42/\npaul@debian10:~$ ls dir42/\nfile42  file42.copy  SinkoDeMayo\n</code></pre>"},{"location":"working_with_files/#cp-i","title":"cp -i","text":"<p>To prevent <code>cp</code> from overwriting existing files, use the <code>-i</code> (for interactive) option.</p> <pre><code>paul@debian10:~$ cp SinkoDeMayo file42\npaul@debian10:~$ cp SinkoDeMayo file42\npaul@debian10:~$ cp -i SinkoDeMayo file42\ncp: overwrite `file42'? n\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#mv","title":"mv","text":""},{"location":"working_with_files/#rename-files-with-mv","title":"rename files with mv","text":"<p>Use <code>mv</code> to rename a file or to move the file to another directory.</p> <pre><code>paul@debian10:~$ ls\ndir33  dir42  file42  file42.copy  SinkoDeMayo\npaul@debian10:~$ mv file42 file33\npaul@debian10:~$ ls\ndir33  dir42  file33  file42.copy  SinkoDeMayo\npaul@debian10:~$\n</code></pre> <p>When you need to rename only one file then <code>mv</code> is the preferred command to use.</p>"},{"location":"working_with_files/#rename-directories-with-mv","title":"rename directories with mv","text":"<p>The same <code>mv</code> command can be used to rename directories.</p> <pre><code>paul@debian10:~$ ls -l\ntotal 8\ndrwxr-xr-x 2 paul paul 4096 Oct 15 09:36 dir33\ndrwxr-xr-x 2 paul paul 4096 Oct 15 09:36 dir42\n-rw-r--r-- 1 paul paul    0 Oct 15 09:38 file33\n-rw-r--r-- 1 paul paul    0 Oct 15 09:16 file42.copy\n-rw-r--r-- 1 paul paul    0 May  5  2005 SinkoDeMayo\npaul@debian10:~$ mv dir33 backup\npaul@debian10:~$ ls -l\ntotal 8\ndrwxr-xr-x 2 paul paul 4096 Oct 15 09:36 backup\ndrwxr-xr-x 2 paul paul 4096 Oct 15 09:36 dir42\n-rw-r--r-- 1 paul paul    0 Oct 15 09:38 file33\n-rw-r--r-- 1 paul paul    0 Oct 15 09:16 file42.copy\n-rw-r--r-- 1 paul paul    0 May  5  2005 SinkoDeMayo\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#mv-i","title":"mv -i","text":"<p>The <code>mv</code> also has a <code>-i</code> switch similar to <code>cp</code> and <code>rm</code>.</p> <p>this screenshot shows that <code>mv -i</code> will ask permission to overwrite an existing file.</p> <pre><code>paul@debian10:~$ mv -i file33 SinkoDeMayo\nmv: overwrite `SinkoDeMayo'? no\npaul@debian10:~$\n</code></pre>"},{"location":"working_with_files/#rename","title":"rename","text":""},{"location":"working_with_files/#about-rename","title":"about rename","text":"<p>The <code>rename</code> command is one of the rare occasions where the Linux Fundamentals book has to make a distinction between Linux distributions. Almost every command in the <code>Fundamentals</code> part of this book works on almost every Linux computer. But <code>rename</code> is different.</p> <p>Try to use <code>mv</code> whenever you need to rename only a couple of files.</p>"},{"location":"working_with_files/#rename-on-debianubuntu","title":"rename on Debian/Ubuntu","text":"<p>The <code>rename</code> command on Debian uses regular expressions (regular expression or shor regex are explained in a later chapter) to rename many files at once.</p> <p>Below a <code>rename</code> example that switches all occurrences of txt to png for all file names ending in .txt.</p> <pre><code>paul@debian10:~/test42$ ls\nabc.txt  file33.txt  file42.txt\npaul@debian10:~/test42$ rename 's/\\.txt/\\.png/' *.txt\npaul@debian10:~/test42$ ls\nabc.png  file33.png  file42.png\n</code></pre> <p>This second example switches all (first) occurrences of <code>file</code> into <code>document</code> for all file names ending in .png.</p> <pre><code>paul@debian10:~/test42$ ls\nabc.png  file33.png  file42.png\npaul@debian10:~/test42$ rename 's/file/document/' *.png\npaul@debian10:~/test42$ ls\nabc.png  document33.png  document42.png\npaul@debian10:~/test42$\n</code></pre>"},{"location":"working_with_files/#rename-on-centosrhelfedora","title":"rename on CentOS/RHEL/Fedora","text":"<p>On Red Hat Enterprise Linux, the syntax of <code>rename</code> is a bit different. The first example below renames all *.conf files replacing any occurrence of .conf with .backup.</p> <pre><code>[paul@centos7 ~]$ touch one.conf two.conf three.conf\n[paul@centos7 ~]$ rename .conf .backup *.conf\n[paul@centos7 ~]$ ls\none.backup  three.backup  two.backup\n[paul@centos7 ~]$\n</code></pre> <p>The second example renames all (*) files replacing one with ONE.</p> <pre><code>[paul@centos7 ~]$ ls\none.backup  three.backup  two.backup\n[paul@centos7 ~]$ rename one ONE *\n[paul@centos7 ~]$ ls\nONE.backup  three.backup  two.backup\n[paul@centos7 ~]$\n</code></pre>"},{"location":"working_with_files/#practice-working-with-files","title":"practice: working with files","text":"<p>1. List the files in the /bin directory</p> <p>2. Display the type of file of /bin/cat, /etc/passwd and /usr/bin/passwd.</p> <p>3a. Download wolf.jpg and LinuxFun.pdf from http://linux-training.be (wget http://linux-training.be/files/studentfiles/wolf.jpg and wget http://linux-training.be/files/books/LinuxFun.pdf)</p> <pre><code>wget http://linux-training.be/files/studentfiles/wolf.jpg\nwget http://linux-training.be/files/studentfiles/wolf.png\nwget http://linux-training.be/files/books/LinuxFun.pdf\n</code></pre> <p>3b. Display the type of file of wolf.jpg and LinuxFun.pdf</p> <p>3c. Rename wolf.jpg to wolf.pdf (use mv).</p> <p>3d. Display the type of file of wolf.pdf and LinuxFun.pdf.</p> <p>4. Create a directory \\~/touched and enter it.</p> <p>5. Create the files today.txt and yesterday.txt in touched.</p> <p>6. Change the date on yesterday.txt to match yesterday\\'s date.</p> <p>7. Copy yesterday.txt to copy.yesterday.txt</p> <p>8. Rename copy.yesterday.txt to kim</p> <p>9. Create a directory called \\~/testbackup and copy all files from \\~/touched into it.</p> <p>10. Use one command to remove the directory \\~/testbackup and all files into it.</p> <p>11. Create a directory \\~/etcbackup and copy all *.conf files from /etc into it. Did you include all subdirectories of /etc ?</p> <p>12. Use rename to rename all *.conf files to *.backup . (if you have more than one distro available, try it on all!)</p>"},{"location":"working_with_files/#solution-working-with-files","title":"solution: working with files","text":"<p>1. List the files in the /bin directory</p> <pre><code>ls /bin\n</code></pre> <p>2. Display the type of file of /bin/cat, /etc/passwd and /usr/bin/passwd.</p> <pre><code>file /bin/cat /etc/passwd /usr/bin/passwd\n</code></pre> <p>3a. Download wolf.jpg and LinuxFun.pdf from http://linux-training.be (wget http://linux-training.be/files/studentfiles/wolf.jpg and wget http://linux-training.be/files/books/LinuxFun.pdf)</p> <pre><code>wget http://linux-training.be/files/studentfiles/wolf.jpg\nwget http://linux-training.be/files/studentfiles/wolf.png\nwget http://linux-training.be/files/books/LinuxFun.pdf\n</code></pre> <p>3b. Display the type of file of wolf.jpg and LinuxFun.pdf</p> <pre><code>file wolf.jpg LinuxFun.pdf\n</code></pre> <p>3c. Rename wolf.jpg to wolf.pdf (use mv).</p> <pre><code>mv wolf.jpg wolf.pdf\n</code></pre> <p>3d. Display the type of file of wolf.pdf and LinuxFun.pdf.</p> <pre><code>file wolf.pdf LinuxFun.pdf\n</code></pre> <p>4. Create a directory \\~/touched and enter it.</p> <pre><code>mkdir ~/touched ; cd ~/touched\n</code></pre> <p>5. Create the files today.txt and yesterday.txt in touched.</p> <pre><code>touch today.txt yesterday.txt\n</code></pre> <p>6. Change the date on yesterday.txt to match yesterday\\'s date.</p> <pre><code>touch -t 200810251405 yesterday.txt (substitute 20081025 with yesterday)\n</code></pre> <p>7. Copy yesterday.txt to copy.yesterday.txt</p> <pre><code>cp yesterday.txt copy.yesterday.txt\n</code></pre> <p>8. Rename copy.yesterday.txt to kim</p> <pre><code>mv copy.yesterday.txt kim\n</code></pre> <p>9. Create a directory called \\~/testbackup and copy all files from \\~/touched into it.</p> <pre><code>mkdir ~/testbackup ; cp -r ~/touched ~/testbackup/\n</code></pre> <p>10. Use one command to remove the directory \\~/testbackup and all files into it.</p> <pre><code>rm -rf ~/testbackup\n</code></pre> <p>11. Create a directory \\~/etcbackup and copy all *.conf files from /etc into it. Did you include all subdirectories of /etc ?</p> <pre><code>cp -r /etc/*.conf ~/etcbackup\n\nOnly *.conf files that are directly in /etc/ are copied.\n</code></pre> <p>12. Use rename to rename all *.conf files to *.backup . (if you have more than one distro available, try it on all!)</p> <pre><code>On RHEL: touch 1.conf 2.conf ; rename conf backup *.conf\n\nOn Debian: touch 1.conf 2.conf ; rename 's/conf/backup/' *.conf\n</code></pre>"}]}